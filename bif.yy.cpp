#line 2 "../bisonflex/bif.yy.cpp"

#line 4 "../bisonflex/bif.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer bifFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *bifalloc (yy_size_t  );
void *bifrealloc (void *,yy_size_t  );
void biffree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 165
#define YY_END_OF_BUFFER 166
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[735] =
    {   0,
        0,    0,  166,  164,  161,  162,  163,  164,  153,  155,
      144,  145,  146,  147,  139,  148,  159,  152,  134,  134,
      136,  137,  164,  138,  164,  158,  140,  141,  157,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      142,  156,  143,  154,  161,  162,    0,    0,  159,    1,
      159,  134,  159,  149,  150,  158,    0,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  111,  158,  158,  158,  158,  158,  158,  158,  158,
       35,  158,  158,  158,  158,  158,  158,  158,  158,  158,

      158,  158,  158,  158,  158,  158,  158,  158,  108,  158,
      158,  158,  107,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  160,    0,    0,    2,  159,  135,    0,  158,  158,
       43,  158,  158,  158,  158,  158,  133,  158,  158,  158,
      158,  158,  158,  158,  159,  158,  158,  158,  158,  131,
      158,  158,  158,  158,  158,  158,  158,  132,   47,   87,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,   22,  105,  158,  158,  158,  158,  158,  158,  159,
      158,  158,   45,  158,  159,   84,   85,  158,  158,  158,

      158,  158,  158,  158,  158,  158,  158,  158,   88,  158,
      110,    0,  159,  158,  159,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,    7,  158,   93,  158,
      158,  158,  113,  114,  115,  116,  158,  158,  158,  158,
       52,  158,  158,   23,  158,  158,   20,  128,  158,   83,
      158,   42,  158,  158,  158,  158,  158,  158,   90,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  102,
      103,  159,  158,  158,  158,   91,  159,  158,   48,   49,
      158,  158,  159,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,    8,  158,   94,   96,   98,  100,  158,

       95,   97,   99,  101,  158,  158,  158,  158,  158,  158,
       56,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,   55,  158,  158,  158,  158,  158,
      158,   15,  158,  158,  158,  158,  158,  158,  158,  158,
       51,  158,  109,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  159,  158,  158,  158,   86,  158,  158,
      158,  159,  158,  158,  158,  158,  127,  158,  158,  158,
      158,   53,  158,  158,  159,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,   16,  158,  158,  158,  158,  158,  158,

      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  130,   18,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,   82,   81,  159,  158,
      158,  158,  118,  158,  158,  159,  125,  158,  158,  158,
      158,  158,    9,  158,   24,  158,  159,  158,   68,   70,
       69,   71,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,   65,  158,  158,  158,
       77,  158,  158,  158,   26,    4,  158,   27,  158,  158,

      158,  159,   72,  158,   19,   79,  158,  159,  158,   28,
      158,   29,   21,  158,  158,  159,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,   46,  158,  158,
      158,  158,  158,  158,   89,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,   37,
       75,  159,  158,  158,  159,  158,  158,  158,    5,  159,
        6,  158,   13,   76,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,   39,  158,  158,  158,   34,  158,
      158,  158,  158,  158,  158,  158,  158,  158,   40,  158,

      158,  158,  158,   11,  158,  119,  158,  158,  158,   12,
       78,  159,   67,  129,  123,  158,  158,  117,  159,   25,
      158,  158,   17,  158,  158,  158,  158,  158,   64,   63,
       36,  158,  158,    3,  158,  158,  158,  158,  158,  158,
       41,  158,  158,  158,  158,  158,  158,  158,  158,  121,
      159,  122,  158,  124,  120,  158,  158,  158,  158,  158,
      158,   31,   80,   33,  158,  158,  158,  158,  158,  158,
       66,  126,  158,  158,   10,  158,   38,  104,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,   30,  158,  158,   61,   62,   60,

      158,  158,  158,   14,   58,   59,   57,  158,  158,  158,
      158,  158,   44,   73,  158,  158,  158,  158,  158,  158,
      158,   92,  158,  112,   32,  158,   50,   74,  158,  158,
      158,   54,  106,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    1,    1,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   24,   24,   25,   26,   27,
       28,   29,    1,    1,   30,   30,   30,   30,   30,   30,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   32,   31,   31,
       33,   34,   35,   36,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   31,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    1,    1,    2,    3,    1,    1,    1,    1,
        1,    4,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    5,    1,    1,    1,    1,    4,
        4,    4,    1,    4,    1,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[741] =
    {   0,
        0,    0,  201, 4695,   65,  194, 4695,   66, 4695, 4695,
     4695, 4695, 4695,    0, 4695,    0,    0,   57,   87,   37,
     4695, 4695,  169, 4695,  160,  100, 4695, 4695, 4695,  106,
      136,  114,  124,  107,  152,  165,  169,  135,  176,  177,
      199,  194,  201,  239,  215,  242,  278,  232,  270,  256,
     4695, 4695, 4695, 4695,   70,  185,  180,   68,    0, 4695,
      335,   63,  385, 4695, 4695,  325,   60,  332,  333,  372,
      388,  409,  410,  428,  439,  446,  447,  457,  458,  476,
      487,  494,  498,  512,  523,  525,  536,  537,  561,  565,
      573,  583,  594,  595,  616,  602,  623,  641,  645,  652,

      653,  666,  690,  697,  702,  709,  733,  743,  745,  747,
      761,  772,  774,  785,  810,  812,  822,  823,  834,  867,
      853,  874,  875,  886,  904,  915,  914,  916,  943,  953,
      954, 4695,   83,  179, 4695, 1011,    0,    0, 1031, 1041,
     1001, 1042, 1060, 1071, 1082,  229,   88,  191,  339,  399,
     1053,  943,  950, 1093,  124,  702, 1103, 1113, 1013, 1115,
     1125, 1127, 1137, 1139, 1149, 1153, 1164, 1168, 1175, 1179,
     1186, 1193, 1197, 1204, 1208, 1215, 1227, 1231, 1241, 1248,
     1252, 1259, 1269, 1280, 1282, 1292, 1302, 1313, 1315,  120,
     1325, 1329, 1339, 1343,  132, 1350, 1354, 1361, 1365, 1372,

     1376, 1388, 1398, 1408, 1410, 1421, 1423, 1434, 1441, 1445,
     1456,  173,  288, 1458,  508, 1468, 1472, 1482, 1496, 1492,
     1506, 1508, 1510, 1523, 1530, 1534, 1545, 1541, 1557, 1561,
     1571, 1575,    0,    0,    0,    0, 1582, 1586, 1597, 1607,
     1619, 1623, 1633, 1637, 1644, 1648, 1655, 1662, 1666, 1676,
     1678, 1680, 1691, 1693, 1703, 1705, 1715, 1717, 1727, 1729,
     1739, 1743, 1753, 1763, 1765, 1775, 1777, 1787, 1798,    0,
        0,  122, 1791, 1805, 1815, 1817,  112, 1819, 1832, 1836,
     1843, 1847,  121, 1854, 1858, 1868, 1872, 1879, 1883, 1894,
     1898, 1905, 1909, 1920, 1924,    0,    0,    0,    0, 1937,

        0,    0,    0,    0, 1949, 1939, 1959, 1963, 1973, 1984,
     1988, 1998, 2000, 2002, 2012, 2014, 2027, 2031, 2041, 2045,
     2055, 2062, 2066, 2081, 2085, 2092, 2096, 2103, 2110, 2122,
     2126, 2137, 2139, 2149, 2151, 2161, 2163, 2175, 2177, 2187,
     2197, 2199, 2210, 2214, 2221, 2228, 2238, 2242, 2249, 2253,
     2264, 2274, 2285,  114, 2278, 2289, 2296,    0, 2303, 2313,
     2320,  102, 2324, 2331, 2338, 2345, 2349, 2356, 2363, 2374,
     2378, 2385, 2389, 2399,   97, 2403, 2420, 2424, 2434, 2436,
     2422, 2446, 2448, 2458, 2462, 2472, 2474, 2487, 2498, 2509,
     2513, 2524, 2526, 2536, 2540, 2547, 2551, 2561, 2565, 2572,

     2576, 2586, 2588, 2599, 2609, 2613, 2620, 2631, 2635, 2645,
     2649, 2660, 2664, 2675, 2679, 2686, 2690, 2702, 2706, 2713,
     2720, 2724, 2734, 2744, 2746, 2758, 2760, 2762,   86, 2772,
     2774, 2784, 2786, 2796, 2798,   73, 2800, 2813, 2820, 2827,
     2831, 2841, 2843, 2845, 2856, 2860,   85, 2867, 2871, 2881,
     2883, 2885, 2895, 2899, 2906, 2913, 2917, 2930, 2934, 2944,
     2946, 2957, 2968, 2964, 2975, 2979, 2989, 2993, 3000, 3004,
     3015, 3022, 3026, 3033, 3043, 3047, 3054, 3058, 3065, 3075,
     3077, 3088, 3095, 3099, 3109, 3119, 3121, 3131, 3133, 3146,
     3148, 3158, 3168, 3172, 3182, 3184, 3194, 3196, 3206, 3210,

     3217,   69, 3221, 3228, 3235, 3239, 3246,   58, 3256, 3263,
     3267, 3274, 3278, 3285, 3289,   45, 3299, 3301, 3312, 3314,
     3316, 3338, 3326, 3340, 3350, 3352, 3354, 3364, 3376, 3383,
     3390, 3394, 3405, 3407, 3417, 3427, 3429, 3439, 3443, 3453,
     3455, 3457, 3467, 3477, 3487, 3491, 3498, 3505, 3516, 3518,
     3528, 3530, 3532, 3543, 3545, 3555, 3565, 3569, 3576, 3583,
     3587,   45, 3594, 3601,   56, 3611, 3615, 3622, 3629,   41,
     3636, 3640, 3647, 3651, 3658, 3662, 3672, 3674, 3685, 3696,
     3700, 3707, 3711, 3721, 3723, 3736, 3746, 3748, 3758, 3760,
     3771, 3773, 3788, 3784, 3799, 3803, 3810, 3814, 3824, 3826,

     3836, 3838, 3851, 3840, 3855, 3866, 3877, 3873, 3884, 3888,
     3895,   50, 3899, 3906,    0, 3910, 3917, 3921,   49, 3931,
     3933, 3943, 3945, 3955, 3957, 3959, 3969, 3971, 3981, 3983,
     3985, 3995, 4002, 4009, 4013, 4020, 4027, 4037, 4041, 4048,
     4052, 4059, 4066, 4070, 4080, 4082, 4084, 4094, 4104, 4111,
       27, 4115, 4122,    0, 4126, 4133, 4140, 4150, 4157, 4164,
     4171, 4175, 4182, 4186, 4197, 4199, 4209, 4216, 4223, 4230,
     4237, 4241, 4248, 4252, 4259, 4263, 4270,    0, 4277, 4287,
     4289, 4291, 4303, 4307, 4318, 4331, 4338, 4345, 4349, 4356,
     4360, 4375, 4377, 4387, 4389, 4400, 4402, 4404, 4415, 4417,

     4427, 4429, 4440, 4447, 4451, 4458, 4462, 4469, 4476, 4480,
     4487, 4494, 4501, 4505, 4512, 4516, 4523, 4534, 4541, 4545,
     4556, 4558, 4568, 4572, 4579, 4583, 4593, 4597, 4607, 4611,
     4618, 4625, 4629, 4695, 4675,   73, 4676, 4680, 4684, 4689
    } ;

static yyconst flex_int16_t yy_def[741] =
    {   0,
      734,    1,  734,  734,  734,  734,  734,  735,  734,  734,
      734,  734,  734,  736,  734,  736,  736,  736,  736,   19,
      734,  734,  734,  734,  734,  737,  734,  734,  734,  737,
      737,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
      734,  734,  734,  734,  734,  734,  738,  738,  736,  734,
      739,   19,  736,  734,  734,   31,  734,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,  734,  734,  740,  734,  739,   63,  736,   31,   31,
       31,   31,   31,   31,   31,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  736,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  736,
      145,  145,  145,  145,  736,  145,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  738,  736,  145,  736,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  736,  736,  736,  736,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  736,
      736,  736,  145,  145,  145,  145,  736,  145,  145,  145,
      145,  145,  736,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  736,  736,  736,  736,  145,

      736,  736,  736,  736,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  736,  145,  145,  145,  736,  145,  145,
      145,  736,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  736,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  736,  145,
      145,  145,  145,  145,  145,  736,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  736,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  736,  145,  145,  145,  145,  145,  736,  145,  145,
      145,  145,  145,  145,  145,  736,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  736,  145,  145,  736,  145,  145,  145,  145,  736,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  736,  145,  145,  736,  145,  145,  145,  736,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      736,  145,  145,  736,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  736,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,    0,  734,  734,  734,  734,  734,  734
    } ;

static yyconst flex_int16_t yy_nxt[4762] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   21,   22,   23,   24,   25,   26,
       26,   26,   27,   17,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   26,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   26,   26,   50,
       26,   26,   51,   52,   53,   54,   55,   60,   59,   55,
       57,   55,   61,  132,   55,  138,   59,   57,  678,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      654,  651,  133,  138,   59,  619,   59,  615,  212,   57,

      612,  570,   57,   62,   62,   62,   62,   62,   62,   62,
       62,   59,  565,   59,   59,   59,  212,   59,   63,   59,
       59,   59,   59,  562,   67,   66,   66,  516,   66,  508,
      734,   66,  502,   59,   66,   66,  270,  271,  447,   59,
      233,  234,  235,  236,  436,   66,   63,   59,   79,   59,
       59,   59,   72,  429,   66,   66,   66,   68,   73,   74,
       67,   75,  362,   66,   76,   66,  358,  272,   77,   59,
       66,   66,  354,   66,   78,   91,   66,   69,  734,  277,
       66,  135,   66,   70,   92,  132,   66,   56,   65,   80,
       66,   66,   71,   66,   81,   64,   56,   66,   66,   82,

      734,   83,   86,  734,  734,  734,   66,   84,   66,  734,
       89,   85,   66,   87,   90,   66,   66,   93,   66,   88,
       66,   66,   66,   66,   66,   66,  734,   95,   66,   66,
      226,  101,   94,   66,   66,   66,   66,   66,   96,   97,
       66,   66,   66,  103,  102,  734,   66,   98,   66,   99,
       66,  734,  104,   66,  734,  100,   66,   66,  734,  105,
       66,  734,   66,  116,  734,  734,   66,   66,  734,  115,
      734,   66,   66,   66,  225,   66,  106,   66,  107,   66,
       66,  734,  734,  117,  108,  127,  109,  110,   66,   66,
      111,   66,  112,  113,  734,  114,  118,   66,   66,   66,

      734,  131,  734,   66,  296,  297,  298,  299,  128,  734,
      129,   66,   66,  734,  734,  119,  734,   66,  120,  121,
      734,  734,  122,  734,  130,  123,   66,  734,  734,  124,
      734,  734,  125,  126,   66,  134,  134,  135,  134,  134,
      134,  134,  134,  134,  134,  134,   66,  134,  734,  734,
      734,  139,  734,   66,   66,  734,  734,  734,  734,  134,
      134,  134,  134,  134,  734,  734,   66,  134,  734,  134,
      134,  734,   66,   66,   66,  734,   66,   66,  734,   66,
       66,   66,   66,  734,  734,   66,  734,  141,   66,   66,
      734,  140,  734,   66,  227,  734,  734,  134,  134,  134,

      134,  137,  137,  137,  137,  137,  137,  137,  137,   66,
      734,  734,  734,   66,  137,  734,  734,  142,  734,   66,
      734,  734,  137,  137,  137,  137,  137,  137,   66,   66,
       66,   66,  734,  734,  734,   66,   66,   66,  228,  734,
      734,  734,   66,  143,   66,   66,  145,  734,  734,   66,
       66,   66,  734,  734,  734,  734,   66,   66,  734,  734,
       66,  734,  144,  734,  146,   66,   66,   66,   66,   66,
      734,  734,  734,  734,  734,   66,  734,  147,   66,   66,
       66,  734,  734,  734,   66,  734,   66,   66,  150,  148,
      734,  734,  734,   66,   66,   66,  149,   66,   66,   66,

      734,  734,   66,   66,   66,   66,  734,  155,   66,  734,
      151,  734,  152,   66,   66,   66,  734,   66,  734,   66,
      734,  734,  734,   66,  301,  302,  303,  304,   66,  153,
      734,  734,   66,   66,   66,   66,  734,  156,  734,   66,
      734,   66,  734,  154,   66,   66,   66,  734,  734,  734,
       66,  734,  734,   66,   66,  734,  157,   66,   66,   66,
      734,  734,  158,  734,   66,  734,   66,  734,   66,  734,
       66,  734,   66,  159,  734,  161,  734,   66,   66,   66,
      734,   66,   66,   66,   66,  734,   66,  734,  734,  734,
      734,  160,   66,   66,   66,  734,  734,  734,  162,  734,

      734,  734,   66,  734,   66,  734,   66,  734,   66,  734,
      734,  734,   66,  734,   66,   66,   66,   66,  734,  734,
       66,   66,  163,   66,   66,  734,  734,  734,  164,   66,
       66,  734,  734,  734,  734,   66,   66,   66,  734,   66,
      734,   66,   66,   66,  169,  734,  166,  734,  734,   66,
       66,   66,  734,  167,  165,  734,  168,   66,   66,  734,
      734,  734,   66,   66,   66,  734,   66,  734,  734,  734,
       66,  734,   66,   66,   66,  734,  734,  734,  734,   66,
      170,  734,   66,  734,  734,  171,   66,   66,   66,  734,
      734,  734,   66,   66,   66,  734,  734,   66,  734,  172,

       66,   66,  173,  174,  734,  734,  734,   66,   66,   66,
      734,   66,  734,   66,  734,  175,  734,  734,   66,  176,
      734,  734,   66,   66,  734,  734,  734,  734,  734,  734,
       66,   66,  177,  734,  734,  734,  734,   66,   66,   66,
       66,  734,  734,   66,   66,   66,   66,  734,   66,   66,
       66,  179,  178,   66,   66,  237,   66,  734,   66,  734,
      734,  734,  180,  734,   66,   66,   66,  734,   66,  734,
      734,  734,  734,  734,   66,  734,  734,  734,  181,  734,
       66,  734,   66,  182,   66,  734,   66,  734,   66,   66,
       66,  734,   66,   66,   66,   66,  734,  734,  734,   66,

      734,   66,   66,  183,  734,  734,   66,  184,   66,  734,
      734,  734,  734,  185,  734,   66,  734,   66,  734,   66,
      187,   66,  186,  734,  734,  190,   66,  188,   66,  734,
       66,   66,   66,   66,  734,  734,  734,  734,  734,  734,
      734,   66,  734,   66,   66,  734,  734,  734,  191,  734,
      734,   66,  734,   66,  734,   66,  734,   66,  734,   66,
      193,  189,  734,   66,   66,  734,   66,  734,   66,   66,
       66,  734,  734,  734,   66,   66,  192,  734,   66,   66,
      195,   66,  734,  196,  197,  734,  734,  734,   66,  194,
       66,  734,  198,  734,   66,   66,   66,  734,  734,  734,

       66,  734,  734,  734,  734,  734,  734,   66,   66,   66,
      734,  199,  201,  734,   66,   66,   66,  734,  734,  734,
      734,   66,   66,   66,  734,   66,  734,   66,  734,  734,
      200,   66,  202,  203,  734,   66,   66,   66,  734,  734,
      734,  734,   66,  734,  734,   66,  734,  734,  734,  734,
      204,   66,  205,  734,  734,   66,   66,   66,  734,  734,
       66,   66,   66,   66,   66,  734,  207,  734,  734,  734,
      206,   66,   66,  734,   66,   66,  734,  734,  734,  734,
       66,   66,  734,  734,   66,  208,   66,   66,   66,   66,
       66,  209,  734,   66,  210,   66,   66,  231,  230,   66,

       66,   66,  734,  734,  734,  211,  734,  734,  734,   66,
       66,  134,  134,  135,  134,  134,  134,  134,  134,  134,
      134,  134,   66,  134,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  134,  134,  134,  134,  134,
      734,  734,   66,  134,  213,  134,  134,  217,   66,  734,
       66,   66,   66,  734,  215,  734,   66,   66,  240,   66,
      734,  734,   66,   66,  734,  734,  734,  214,  734,  734,
      734,  734,   66,  134,  134,  134,  134,  216,   66,  734,
      734,   66,   66,   66,  734,  218,  734,   66,   66,   66,
       66,   66,   66,  734,  229,  734,   66,   66,   66,   66,

      734,   66,  734,   66,  219,  734,  734,   66,  220,  734,
      734,  734,   66,  734,  734,  734,   66,  734,   66,  221,
      222,  734,  734,   66,  734,  223,  734,   66,  224,   66,
       66,   66,  734,  734,  734,  734,   66,  734,   66,   66,
       66,   66,  734,  734,  238,  734,   66,  232,  734,   66,
       66,   66,   66,   66,  239,  734,   66,  734,   66,   66,
      734,   66,   66,   66,   66,   66,  734,  242,   66,  734,
       66,   66,  241,   66,   66,   66,   66,   66,  243,  734,
       66,  734,   66,   66,  734,   66,   66,   66,  734,  246,
       66,   66,   66,  734,  244,   66,   66,  734,  734,   66,

      734,   66,   66,  245,  247,   66,   66,   66,  734,  734,
       66,   66,   66,   66,   66,  734,   66,   66,   66,  734,
      734,   66,   66,   66,   66,   66,  734,  248,  734,   66,
       66,   66,   66,  734,   66,   66,   66,  250,  734,   66,
       66,   66,   66,   66,  734,   66,   66,   66,  249,  252,
       66,   66,   66,   66,   66,  734,  734,  734,   66,  734,
      251,   66,  253,  254,   66,   66,  734,  256,   66,   66,
       66,  734,  734,   66,   66,  734,  734,   66,   66,   66,
      734,  255,  257,  734,   66,   66,   66,   66,  734,   66,
       66,   66,  734,  259,   66,   66,   66,   66,   66,  734,

      734,  734,   66,  258,  734,   66,   66,   66,  734,  734,
      734,  260,   66,  734,  734,   66,  261,   66,   66,   66,
       66,  734,  262,   66,  734,   66,   66,  734,   66,   66,
       66,  734,  734,  266,  734,   66,  263,  734,   66,   66,
       66,  734,  734,  734,  265,   66,  734,  264,   66,  267,
       66,   66,   66,   66,  734,  734,   66,  268,   66,   66,
      269,   66,   66,   66,  734,  273,   66,   66,   66,  734,
      275,   66,   66,  734,  734,   66,   66,   66,  734,  274,
      276,   66,   66,  279,  280,   66,   66,   66,   66,   66,
      734,   66,   66,   66,  734,  734,   66,   66,   66,   66,

       66,  283,   66,   66,   66,  734,  734,   66,   66,   66,
       66,   66,  734,   66,   66,   66,  734,  278,   66,   66,
      734,  734,   66,  734,  284,   66,   66,  281,  734,  734,
      285,   66,  734,  282,   66,   66,   66,  734,  734,  734,
      734,   66,  286,  287,   66,   66,   66,   66,   66,  734,
      288,   66,  734,   66,   66,  734,   66,  734,   66,   66,
       66,   66,  734,  289,   66,  290,   66,   66,  734,   66,
      293,   66,   66,  292,  734,  291,  734,   66,   66,   66,
       66,  734,   66,   66,   66,  734,  734,   66,   66,  734,
      734,   66,  295,   66,   66,   66,   66,  734,  294,   66,

      734,   66,   66,  734,   66,   66,   66,  734,  734,   66,
       66,   66,  734,  306,   66,   66,  734,  300,   66,   66,
       66,  734,  734,  734,  734,   66,  734,  305,   66,   66,
       66,  307,  308,   66,  309,   66,  734,  310,   66,   66,
      311,  734,   66,   66,   66,   66,   66,   66,   66,   66,
      734,   66,   66,   66,   66,  313,   66,  734,  734,  734,
       66,   66,  312,  314,  315,  734,   66,   66,   66,   66,
      734,   66,   66,  316,  734,  734,   66,   66,   66,   66,
      317,  318,   66,   66,   66,  734,  734,  322,   66,  734,
      319,   66,  320,  734,   66,   66,  734,  734,   66,   66,

       66,  734,  321,   66,   66,  734,  323,   66,   66,   66,
      734,  734,   66,   66,   66,  734,  325,   66,   66,   66,
       66,   66,  734,   66,   66,   66,  734,  734,   66,   66,
      734,  324,   66,  734,   66,   66,  734,  734,  734,  327,
       66,  734,  326,   66,   66,   66,  734,  734,  328,  734,
       66,  734,  734,   66,  329,  330,   66,   66,  734,  734,
       66,   66,   66,  734,  331,   66,   66,  734,  734,   66,
       66,   66,  332,  734,   66,   66,   66,  734,  734,   66,
       66,   66,   66,   66,  734,   66,   66,   66,  734,  734,
       66,   66,   66,   66,  334,  734,  734,  333,   66,   66,

       66,   66,  734,   66,   66,   66,  734,  734,   66,   66,
      734,  335,   66,   66,   66,   66,   66,   66,   66,   66,
      734,   66,   66,   66,   66,  734,   66,  734,   66,   66,
      338,   66,  337,  336,   66,  734,   66,   66,  734,   66,
       66,   66,   66,   66,  339,  734,   66,  734,   66,   66,
      734,  340,   66,   66,   66,   66,  734,  734,   66,  734,
       66,   66,  342,   66,   66,   66,   66,   66,  341,  734,
       66,  734,   66,   66,  734,   66,   66,   66,  734,  734,
       66,   66,   66,  734,  734,   66,   66,  343,  345,   66,
       66,   66,  734,  344,  734,  734,   66,  734,  346,   66,

       66,   66,   66,   66,  347,  734,   66,  734,   66,   66,
      348,   66,   66,   66,   66,   66,  352,  353,   66,  350,
       66,  349,  734,   66,   66,   66,  734,  351,   66,   66,
       66,  734,  734,   66,   66,   66,   66,   66,  734,  734,
      734,   66,   66,   66,   66,  734,  734,  355,   66,  734,
      356,   66,   66,   66,   66,   66,   66,   66,   66,  734,
       66,   66,   66,   66,  734,   66,  734,  734,  357,   66,
       66,  734,  359,   66,   66,   66,  734,  734,   66,   66,
       66,   66,   66,  734,   66,   66,   66,  734,  361,   66,
       66,   66,   66,   66,  734,   66,   66,   66,  360,  363,

       66,   66,  734,  365,   66,   66,   66,  734,  364,   66,
       66,   66,  734,  366,   66,   66,   66,   66,   66,  734,
       66,   66,   66,  734,  368,   66,   66,  367,  734,   66,
      734,   66,   66,  375,  734,   66,   66,   66,  369,  370,
       66,   66,   66,   66,   66,  734,   66,  373,   66,  374,
      734,   66,   66,  371,  734,   66,  377,   66,   66,  378,
      372,   66,   66,   66,  734,  734,   66,   66,  379,  734,
       66,  380,  376,  734,   66,   66,   66,   66,  734,  734,
       66,  734,   66,   66,  734,   66,   66,   66,  734,  734,
      734,  734,   66,  734,  734,   66,   66,   66,  734,  381,

       66,   66,   66,  734,  734,   66,   66,  382,  734,   66,
       66,   66,  734,  383,  384,  734,   66,  385,  734,   66,
      386,   66,   66,  734,  388,   66,   66,   66,  734,  734,
       66,   66,  734,  387,   66,   66,   66,   66,   66,   66,
       66,   66,  734,   66,   66,   66,  390,  734,   66,   66,
       66,   66,   66,  389,  734,   66,  734,   66,   66,  734,
       66,  734,  391,  393,   66,   66,  734,  734,   66,   66,
       66,  395,  392,   66,   66,  734,  734,   66,   66,   66,
      734,  394,   66,   66,   66,  734,  734,   66,   66,  396,
      734,   66,   66,   66,  734,  397,  398,  734,   66,   66,

       66,   66,  734,   66,   66,   66,  734,  734,   66,   66,
      734,  734,   66,  734,  734,  400,  399,  401,   66,   66,
      734,  402,   66,   66,   66,  734,  734,   66,   66,   66,
       66,   66,  734,   66,   66,   66,  734,  734,   66,   66,
       66,   66,   66,  403,  734,  404,   66,   66,   66,   66,
      734,  734,  734,   66,  734,  734,   66,  734,  405,   66,
       66,  407,  734,   66,   66,   66,  734,  734,   66,   66,
      406,  734,   66,  734,   66,   66,   66,   66,  409,  408,
       66,  734,   66,   66,  734,   66,   66,   66,   66,  411,
      410,  734,   66,  734,   66,   66,  734,   66,   66,   66,

       66,   66,  413,  734,   66,  734,   66,   66,  734,   66,
      734,  412,   66,   66,   66,   66,  734,  734,   66,  734,
       66,   66,  414,   66,   66,   66,  734,  734,  416,  734,
       66,  734,  415,   66,   66,   66,   66,   66,  734,  734,
       66,  734,   66,   66,  734,   66,  418,   66,   66,  734,
      734,   66,   66,   66,  417,  419,   66,   66,   66,   66,
       66,  734,  734,  734,   66,   66,   66,   66,  420,  734,
      734,  421,  734,  734,   66,   66,   66,  422,  734,   66,
       66,   66,  734,  734,   66,   66,   66,   66,   66,  423,
       66,   66,   66,  734,  427,   66,   66,  424,  425,   66,

      426,   66,   66,  428,  734,  734,  734,   66,  734,  734,
       66,   66,   66,  734,  734,  430,   66,   66,  734,  734,
       66,   66,   66,   66,   66,  734,   66,   66,   66,  734,
      734,   66,   66,   66,   66,   66,  734,  734,  431,   66,
       66,   66,   66,  734,  433,  734,   66,  734,  734,   66,
       66,   66,  734,  432,  434,  734,   66,   66,  435,   66,
      734,   66,   66,   66,  437,  734,   66,   66,   66,   66,
       66,  734,  438,  734,   66,   66,   66,   66,  734,  734,
      734,   66,   66,   66,   66,  439,   66,   66,  440,  734,
      734,   66,   66,   66,   66,   66,  734,  734,  734,   66,

       66,   66,   66,  441,  734,  734,   66,  734,  734,   66,
      734,   66,   66,  443,  734,   66,   66,   66,  734,  442,
       66,   66,   66,   66,   66,  734,   66,   66,   66,  734,
      734,   66,   66,  445,  734,   66,  446,   66,  449,  444,
       66,   66,   66,  734,  450,   66,   66,  734,  734,   66,
      734,  734,  451,  448,  734,  734,  452,   66,   66,   66,
       66,   66,   66,   66,  453,   66,   66,   66,   66,  734,
       66,   66,   66,   66,   66,  734,  734,   66,  734,   66,
       66,  734,   66,   66,   66,   66,   66,  454,  734,   66,
      734,   66,   66,  734,   66,  456,   66,  455,  734,   66,

       66,   66,  734,  734,   66,   66,  457,  734,   66,   66,
       66,   66,   66,  734,  734,   66,  734,   66,   66,  734,
       66,  734,  458,  734,   66,  460,  734,  734,  734,  459,
      461,  734,  734,   66,  734,   66,   66,  734,  734,  734,
      462,   66,  463,  734,   66,  464,   66,   66,  734,  465,
       66,   66,   66,  734,  734,   66,   66,  734,  734,   66,
      466,   66,   66,  468,   66,  734,  467,   66,  734,   66,
       66,  734,   66,   66,   66,  734,  734,   66,   66,   66,
      734,  469,   66,   66,  470,   66,   66,  734,  471,   66,
       66,  734,  734,   66,   66,  734,  734,   66,   66,   66,

      472,  734,   66,   66,   66,  734,  734,   66,   66,  474,
       66,   66,  734,   66,   66,   66,  734,  734,   66,   66,
      475,  473,   66,   66,  476,   66,   66,  734,  734,  477,
      734,   66,   66,  734,   66,  734,   66,   66,  734,  478,
      480,  734,   66,  479,  734,   66,   66,   66,  734,  734,
       66,   66,   66,  734,  481,   66,   66,   66,   66,  482,
      734,  734,  734,   66,  734,  734,   66,  484,   66,   66,
      483,  486,   66,   66,   66,  734,  734,   66,   66,  734,
      734,   66,   66,   66,  734,  485,   66,   66,   66,  734,
      734,   66,   66,  734,  734,   66,  734,   66,   66,  488,

      734,   66,   66,   66,  734,  487,   66,   66,  734,  734,
       66,  734,   66,   66,  489,  734,   66,   66,   66,  734,
      490,   66,   66,   66,   66,   66,  734,   66,   66,   66,
      734,  734,   66,   66,  734,  492,   66,  734,  734,   66,
       66,  734,  734,   66,   66,   66,  491,  493,   66,   66,
       66,   66,   66,  494,  495,  734,   66,   66,   66,   66,
      734,   66,   66,   66,  734,  734,   66,   66,  734,  496,
       66,   66,   66,  734,  734,  498,  734,   66,  734,  497,
       66,   66,   66,   66,   66,  734,  734,   66,  734,   66,
       66,  734,   66,  500,  499,   66,  501,   66,   66,   66,

       66,   66,  734,   66,   66,   66,   66,  734,   66,   66,
       66,   66,   66,  734,  734,   66,  734,  504,   66,  503,
       66,   66,   66,   66,   66,  505,  734,   66,  734,   66,
       66,  734,   66,   66,   66,   66,   66,   66,   66,   66,
      734,   66,   66,   66,   66,  734,   66,  734,  507,  506,
       66,   66,  734,  734,  734,  734,   66,   66,   66,   66,
      509,  510,  734,   66,   66,   66,   66,  734,   66,   66,
       66,  734,  512,   66,   66,  734,  511,   66,   66,   66,
       66,   66,   66,   66,   66,  734,   66,   66,   66,   66,
      734,   66,  513,   66,   66,  514,  734,   66,   66,   66,

      734,  734,   66,   66,   66,   66,   66,  517,   66,   66,
       66,  734,  734,   66,   66,  515,  734,   66,   66,   66,
       66,   66,   66,   66,   66,  734,   66,   66,   66,   66,
      734,   66,   66,   66,  734,  734,   66,   66,   66,  734,
      518,   66,   66,   66,   66,   66,  734,  734,  519,   66,
       66,   66,   66,  520,  522,   66,   66,  734,  734,   66,
       66,  734,  734,   66,  734,  734,  521,   66,   66,  523,
      734,   66,   66,   66,  734,  734,   66,   66,  734,  524,
       66,   66,   66,   66,   66,  734,  734,   66,  734,   66,
       66,  525,   66,  734,   66,   66,  734,  734,  527,  526,

       66,   66,   66,   66,  528,   66,   66,   66,  734,  734,
      529,   66,   66,   66,   66,  734,   66,   66,   66,  734,
      734,  530,   66,  734,  531,   66,   66,   66,  734,  734,
       66,   66,   66,  734,  532,   66,   66,   66,   66,   66,
      734,   66,   66,   66,  734,  734,   66,  535,  533,  734,
       66,  734,   66,   66,  734,  536,  734,  534,   66,   66,
       66,   66,  734,   66,   66,   66,  734,  734,   66,   66,
       66,   66,   66,  734,  538,  734,   66,  537,  734,   66,
      540,   66,  734,  734,   66,   66,   66,  734,  539,   66,
       66,   66,   66,   66,  541,   66,   66,   66,  734,  543,

       66,   66,   66,   66,   66,  734,  734,  542,   66,  734,
      544,   66,   66,   66,   66,   66,  734,  734,   66,  734,
       66,   66,  734,   66,  734,   66,   66,  546,  734,  547,
      545,   66,   66,   66,   66,  734,  549,   66,   66,  734,
      734,   66,   66,  734,  548,   66,   66,   66,  734,  734,
      734,  734,   66,  734,  550,   66,   66,   66,   66,   66,
      551,  734,   66,  734,   66,   66,  734,   66,   66,   66,
       66,   66,  734,  734,   66,  734,   66,   66,  734,   66,
      734,  552,  734,   66,   66,   66,   66,  734,  553,   66,
      734,   66,   66,  734,   66,   66,   66,  734,  734,  554,

      734,   66,  734,  734,   66,   66,   66,  734,  555,   66,
       66,   66,  734,  557,   66,   66,  556,  734,   66,   66,
       66,   66,   66,  734,  734,   66,  734,   66,   66,  734,
       66,   66,   66,   66,   66,  558,  734,   66,  734,   66,
       66,  734,   66,   66,   66,  734,  559,   66,   66,   66,
      734,  560,   66,   66,   66,   66,   66,  734,   66,   66,
       66,  561,  734,   66,   66,   66,   66,   66,  734,  734,
      734,   66,   66,   66,   66,  563,   66,   66,   66,  734,
      734,   66,   66,   66,   66,   66,  734,  734,  734,   66,
      734,  734,   66,   66,   66,  734,  564,  566,  734,   66,

       66,   66,   66,  734,  567,   66,   66,  734,  734,   66,
       66,   66,   66,   66,  734,   66,   66,   66,  734,  734,
       66,   66,   66,   66,   66,  734,  569,   66,   66,  734,
      734,   66,   66,  734,  568,   66,   66,   66,   66,   66,
      571,  734,   66,  734,   66,   66,  734,   66,  572,   66,
       66,   66,   66,  575,   66,   66,  576,   66,   66,   66,
       66,  734,   66,   66,   66,  734,  734,  573,  734,   66,
      734,  734,  577,  734,  574,   66,   66,   66,   66,  578,
      734,   66,  734,   66,   66,  734,   66,   66,   66,   66,
       66,   66,   66,   66,  581,   66,  579,   66,   66,  734,

       66,   66,   66,  734,  734,  582,  734,   66,  734,  734,
       66,  734,  580,   66,   66,  734,  734,  583,  734,   66,
       66,   66,   66,  734,  584,  734,   66,   66,   66,   66,
      734,   66,   66,   66,  734,  734,   66,   66,  734,  734,
       66,  586,   66,   66,   66,   66,  734,  585,   66,  734,
       66,   66,  588,   66,   66,   66,  734,  734,  589,  734,
       66,  587,  734,   66,   66,   66,   66,   66,  590,  734,
       66,  734,   66,   66,  734,   66,   66,   66,  734,  591,
       66,   66,   66,  734,  734,   66,   66,  734,  592,   66,
       66,   66,   66,   66,   66,   66,   66,  734,   66,   66,

       66,  594,  593,   66,   66,   66,  734,  596,  734,  734,
       66,  734,  734,   66,   66,   66,  734,  595,  734,  734,
       66,  734,  734,   66,   66,   66,  734,  597,   66,   66,
       66,  734,  734,   66,   66,   66,   66,   66,  734,  734,
      598,   66,   66,   66,   66,  734,  734,  600,   66,  734,
      734,   66,  734,   66,   66,   66,   66,  734,  599,   66,
      734,  602,   66,  734,   66,   66,   66,   66,   66,  605,
       66,   66,  601,   66,   66,   66,   66,  603,   66,  734,
       66,   66,   66,   66,  606,  604,   66,  734,   66,   66,
      734,   66,  608,   66,  607,  734,  734,  734,   66,  734,

      734,   66,   66,   66,  609,  734,   66,   66,   66,  610,
      734,   66,   66,   66,   66,   66,  734,  611,  734,   66,
       66,   66,   66,  734,   66,   66,   66,  734,  734,   66,
       66,   66,   66,   66,  734,  613,  734,   66,   66,   66,
       66,  734,  734,  734,   66,  734,  734,   66,   66,   66,
      616,  734,   66,   66,   66,  734,  614,   66,   66,   66,
       66,   66,  734,  618,  734,   66,   66,   66,   66,  734,
      617,  734,   66,   66,   66,   66,  734,   66,   66,   66,
      734,  620,   66,   66,   66,   66,   66,  734,   66,   66,
       66,  734,  734,   66,   66,   66,   66,   66,  622,   66,

       66,   66,  734,  734,   66,   66,  621,  734,   66,   66,
       66,  624,   66,  734,  734,   66,  734,   66,   66,  734,
       66,  625,   66,   66,  734,  734,  623,  734,   66,  734,
      734,   66,  626,   66,   66,  734,  627,   66,   66,   66,
      734,  734,   66,   66,   66,   66,   66,  734,   66,   66,
       66,  734,  734,   66,   66,  734,  628,   66,   66,   66,
       66,   66,  734,  734,   66,  734,   66,   66,  734,   66,
      734,  629,  734,   66,   66,  734,  734,  631,  734,   66,
      734,  630,   66,   66,   66,   66,   66,  633,  734,   66,
      734,   66,   66,  734,   66,   66,   66,   66,   66,  632,

      734,   66,  734,   66,   66,  734,   66,  734,   66,   66,
       66,   66,  734,  634,   66,  734,   66,   66,  734,   66,
      638,   66,   66,  636,  635,   66,   66,   66,  637,  734,
       66,   66,  734,  734,   66,  639,   66,   66,  734,  640,
       66,   66,   66,  734,  734,   66,   66,   66,   66,   66,
      642,   66,   66,   66,  734,  734,   66,   66,  734,  641,
       66,   66,   66,   66,   66,  734,  734,   66,  734,   66,
       66,  643,   66,   66,   66,   66,   66,   66,   66,   66,
      734,   66,   66,   66,   66,  734,   66,  645,   66,   66,
      646,  644,   66,   66,   66,  734,  734,   66,   66,  734,

      734,   66,  734,   66,   66,  734,  734,  734,  647,   66,
       66,   66,   66,  648,   66,   66,  649,  734,  734,   66,
       66,   66,   66,   66,  734,   66,   66,   66,  734,  734,
       66,   66,   66,   66,   66,  734,   66,   66,   66,  650,
      734,   66,   66,   66,   66,   66,  734,   66,   66,   66,
      734,  734,   66,   66,   66,   66,   66,  734,   66,   66,
       66,  734,  734,   66,   66,  652,  734,   66,   66,   66,
       66,   66,  734,  653,   66,  734,   66,   66,  734,   66,
       66,   66,   66,   66,  656,  734,   66,  655,   66,   66,
      734,   66,   66,   66,   66,   66,   66,   66,   66,  734,

       66,   66,   66,  658,  734,  659,   66,   66,  661,   66,
      657,  734,   66,  734,   66,  660,  734,   66,   66,   66,
       66,   66,   66,   66,   66,  734,   66,   66,   66,   66,
      734,   66,   66,   66,  734,  734,  662,  734,   66,   66,
       66,   66,  734,  663,  734,   66,   66,   66,   66,  734,
       66,   66,   66,  734,  734,   66,   66,   66,   66,   66,
      734,  734,  734,   66,   66,   66,   66,  664,  734,  665,
       66,  734,  734,   66,   66,   66,  734,  666,   66,   66,
       66,  734,  734,  667,   66,   66,   66,  668,  734,   66,
       66,   66,  734,  734,  669,   66,   66,   66,   66,  734,

      734,  734,   66,   66,   66,   66,  670,   66,   66,  671,
      734,  734,   66,   66,  672,  734,   66,  673,   66,   66,
       66,   66,   66,   66,  734,   66,   66,   66,   66,  734,
       66,   66,   66,  734,  734,  674,  734,   66,  734,  675,
       66,   66,   66,  734,  676,  677,  734,   66,   66,   66,
       66,  734,   66,   66,   66,  734,  734,   66,   66,   66,
       66,   66,  734,   66,   66,   66,  734,  734,   66,   66,
       66,   66,   66,  734,  734,  679,   66,   66,   66,   66,
      734,  734,  680,   66,  734,  681,   66,   66,   66,  734,
      734,  682,  734,   66,   66,   66,   66,  734,  683,  734,

       66,   66,   66,   66,  734,  684,  734,   66,   66,  685,
       66,  734,   66,   66,   66,  734,  734,   66,   66,   66,
       66,   66,  734,   66,   66,   66,  734,  734,   66,   66,
      734,  734,   66,  686,   66,   66,   66,   66,  734,  734,
       66,  687,   66,   66,  734,   66,   66,   66,  734,  734,
      688,  734,   66,   66,   66,   66,  734,  689,  734,   66,
       66,   66,   66,  734,  690,  734,   66,   66,   66,   66,
      734,  691,  734,   66,   66,   66,   66,  734,   66,   66,
       66,  734,  734,   66,   66,   66,   66,   66,  734,   66,
       66,   66,  734,  734,   66,   66,   66,   66,   66,  734,

       66,   66,   66,  692,  734,   66,   66,   66,   66,   66,
      734,  734,  693,   66,   66,   66,   66,  734,  695,  734,
       66,  694,  734,   66,  696,   66,   66,   66,   66,   66,
       66,  734,   66,   66,   66,   66,  734,   66,  734,  697,
       66,   66,  734,  734,   66,   66,   66,  734,  734,   66,
       66,  698,  734,   66,  734,   66,   66,  734,  734,  734,
      734,   66,  734,  699,   66,  701,  734,  700,   66,   66,
      702,  703,  734,  734,   66,   66,   66,   66,  734,  734,
      704,   66,   66,   66,   66,  734,   66,   66,   66,  734,
      734,   66,   66,   66,   66,   66,  734,   66,   66,   66,

      734,  734,   66,   66,  734,  705,   66,  734,  734,  706,
      734,  734,   66,   66,   66,   66,  707,  708,   66,  734,
       66,   66,  734,   66,   66,   66,   66,   66,  710,  734,
       66,  709,   66,   66,  734,   66,  711,   66,  712,   66,
       66,   66,   66,   66,  734,   66,   66,   66,   66,  734,
       66,  713,   66,   66,   66,   66,  734,  734,   66,  734,
       66,   66,  734,   66,   66,   66,   66,   66,  714,  734,
       66,  734,   66,   66,  734,   66,  734,   66,   66,  734,
      715,  716,  734,   66,   66,   66,   66,  734,   66,   66,
       66,  734,  734,   66,   66,   66,   66,   66,  734,   66,

       66,   66,  734,  734,   66,   66,   66,   66,   66,  734,
      717,  734,   66,   66,   66,   66,  734,   66,   66,   66,
      734,  734,   66,   66,   66,   66,   66,  734,  720,  718,
       66,   66,   66,   66,  734,  719,  734,   66,   66,   66,
       66,  721,   66,   66,   66,  734,  734,   66,   66,   66,
       66,   66,  734,   66,   66,   66,  734,  734,   66,   66,
       66,   66,   66,  734,  734,  734,   66,  734,  722,   66,
      724,   66,   66,  723,  734,  725,  734,   66,   66,   66,
       66,  734,   66,   66,   66,  734,  726,   66,   66,  734,
      734,   66,  734,   66,   66,   66,   66,  728,  727,   66,

      734,   66,   66,  734,   66,   66,   66,  734,  734,   66,
       66,   66,  734,  729,   66,   66,   66,   66,   66,  734,
       66,   66,   66,  734,  734,   66,   66,  734,  734,   66,
       66,   66,  734,  730,   66,   66,   66,  734,  734,   66,
       66,  734,  734,   66,   66,   66,  731,  734,   66,   66,
       66,  734,  734,   66,   66,   66,   66,   66,  734,  733,
      732,   66,   66,   66,   66,  734,   66,   66,   66,  734,
      734,   66,   66,  734,  734,   66,   58,  734,   58,   66,
       66,   57,   57,   57,  136,  136,  136,  136,  136,  134,
      134,  134,  134,  134,    3,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734
    } ;

static yyconst flex_int16_t yy_chk[4762] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,   18,   20,    5,
        8,   55,   18,   58,   55,   67,  736,    8,  651,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
      619,  612,   58,   67,   62,  570,   20,  565,  133,    8,

      562,  516,    8,   19,   19,   19,   19,   19,   19,   19,
       19,   26,  508,   26,   26,   26,  133,   30,   19,   30,
       30,   30,   62,  502,   26,  147,  147,  447,   34,  436,
       30,  147,  429,   26,  147,   32,  190,  190,  375,   30,
      155,  155,  155,  155,  362,   33,   19,   31,   34,   31,
       31,   31,   32,  354,   34,   32,   38,   31,   32,   32,
       31,   32,  283,   34,   32,   33,  277,  190,   33,   31,
       32,   33,  272,   35,   33,   38,   38,   31,  212,  195,
       33,  134,   38,   31,   38,   57,   36,   56,   25,   35,
       37,   38,   31,   35,   35,   23,    6,   39,   40,   35,

        3,   35,   36,    0,    0,    0,   36,   35,   35,    0,
       37,   35,   36,   36,   37,   42,   37,   39,   40,   36,
       41,   36,   43,   39,   40,   37,    0,   40,  148,  148,
      148,   42,   39,   40,  148,   42,   45,  148,   41,   41,
       41,   42,   43,   43,   42,    0,   41,   41,   43,   41,
       42,    0,   43,   48,    0,   41,   45,   43,    0,   43,
       44,    0,   45,   46,    0,    0,  146,  146,    0,   45,
        0,   45,  146,   48,  146,  146,   44,   50,   44,   48,
       44,    0,    0,   46,   44,   48,   44,   44,   48,   46,
       44,   49,   44,   44,    0,   44,   46,   50,   46,   47,

        0,   50,    0,   50,  213,  213,  213,  213,   49,    0,
       49,   49,   50,    0,    0,   47,    0,   49,   47,   47,
        0,    0,   47,    0,   49,   47,   49,    0,    0,   47,
        0,    0,   47,   47,   47,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   66,   61,    0,   66,
        0,   68,    0,   68,   69,    0,   68,   69,    0,   61,
       61,   61,   61,   61,    0,    0,   66,   61,    0,   61,
       61,    0,   66,   68,   69,    0,  149,  149,    0,   68,
       69,   66,  149,    0,    0,  149,    0,   69,   68,   69,
        0,   68,    0,   70,  149,    0,   70,   61,   61,   61,

       61,   63,   63,   63,   63,   63,   63,   63,   63,   71,
        0,    0,   71,   70,   63,    0,    0,   70,    0,   70,
        0,    0,   63,   63,   63,   63,   63,   63,   70,   71,
       72,   73,    0,   72,   73,   71,  150,  150,  150,    0,
        0,    0,  150,   71,   71,  150,   73,    0,    0,   74,
       72,   73,   74,    0,    0,    0,   72,   73,    0,    0,
       75,    0,   72,   75,   73,   72,   73,   76,   77,   74,
       76,   77,    0,    0,    0,   74,    0,   74,   78,   79,
       75,   78,   79,    0,   74,    0,   75,   76,   77,   75,
        0,    0,    0,   76,   77,   75,   76,   80,   78,   79,

       80,    0,   76,   77,   78,   79,    0,   82,   81,    0,
       78,   81,   79,   78,   79,   82,    0,   80,   82,   83,
        0,    0,   83,   80,  215,  215,  215,  215,   81,   80,
        0,    0,   80,   84,   81,   82,   84,   83,    0,   83,
        0,   82,    0,   81,   85,   83,   86,   85,    0,   86,
       82,    0,    0,   84,   83,    0,   84,   87,   88,   84,
       87,   88,   85,    0,   85,    0,   86,    0,   84,    0,
       85,    0,   86,   86,    0,   88,    0,   87,   88,   85,
        0,   86,   89,   87,   88,   89,   90,    0,    0,   90,
        0,   87,   87,   88,   91,    0,    0,   91,   89,    0,

        0,    0,   89,    0,   92,    0,   90,   92,   89,    0,
        0,    0,   90,    0,   91,   93,   94,   89,   93,   94,
       91,   90,   90,   96,   92,    0,   96,    0,   92,   91,
       92,    0,    0,    0,    0,   93,   94,   95,    0,   92,
       95,   93,   94,   96,   97,    0,   94,   97,    0,   96,
       93,   94,    0,   95,   93,    0,   96,   95,   96,    0,
        0,    0,   98,   95,   97,   98,   99,    0,    0,   99,
       97,    0,   95,  100,  101,    0,  100,  101,    0,   97,
       98,    0,   98,    0,    0,   99,   99,  102,   98,    0,
      102,    0,   99,  100,  101,    0,    0,   98,    0,  100,

      101,   99,  101,  102,    0,    0,    0,  102,  100,  101,
        0,  103,    0,  102,  103,  102,    0,    0,  104,  102,
        0,  104,  102,  105,    0,    0,  105,    0,    0,    0,
      106,  103,  103,  106,    0,    0,    0,  103,  104,  156,
      156,    0,    0,  105,  104,  156,  103,    0,  156,  105,
      106,  105,  104,  104,  107,  156,  106,  107,  105,    0,
        0,    0,  106,    0,  108,  106,  109,  108,  110,  109,
        0,  110,    0,    0,  107,    0,    0,    0,  107,    0,
      107,    0,  111,  108,  108,  111,  109,    0,  110,  107,
      108,    0,  109,  112,  110,  113,  112,    0,  113,  108,

        0,  109,  111,  110,    0,    0,  114,  111,  111,  114,
        0,    0,    0,  112,    0,  113,    0,  111,    0,  112,
      113,  113,  112,    0,    0,  116,  114,  114,  112,    0,
      113,  115,  114,  116,  115,    0,  116,    0,    0,    0,
        0,  114,    0,  117,  118,    0,  117,  118,  116,    0,
        0,  115,    0,  116,    0,  119,    0,  115,  119,  116,
      118,  115,    0,  117,  118,    0,  115,    0,  116,  117,
      118,    0,    0,    0,  121,  119,  117,  121,  117,  118,
      120,  119,    0,  120,  120,    0,    0,    0,  120,  119,
      119,  120,  121,    0,  121,  122,  123,    0,  122,  123,

      121,    0,    0,    0,    0,    0,    0,  124,  120,  121,
      124,  122,  123,    0,  120,  122,  123,    0,    0,    0,
        0,  122,  123,  120,    0,  125,    0,  124,  125,    0,
      122,  123,  124,  124,    0,  127,  126,  128,  127,  126,
      128,    0,  124,    0,    0,  125,    0,    0,    0,    0,
      125,  125,  126,    0,    0,  127,  126,  128,    0,    0,
      125,  127,  126,  128,  129,    0,  128,  129,    0,    0,
      127,  126,  128,    0,  130,  131,    0,  130,  131,    0,
      152,  152,    0,    0,  129,  129,  152,  153,  153,  152,
      129,  130,    0,  153,  130,  131,  153,  153,  152,  129,

      130,  131,    0,    0,    0,  131,    0,    0,    0,  130,
      131,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  141,  136,    0,  141,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  136,  136,  136,  136,  136,
        0,    0,  141,  136,  139,  136,  136,  141,  141,    0,
      159,  159,  139,    0,  140,  139,  159,  141,  159,  159,
        0,    0,  140,  142,    0,  140,  142,  139,    0,    0,
        0,    0,  139,  136,  136,  136,  136,  140,  139,    0,
        0,  143,  140,  142,  143,  142,    0,  139,  140,  142,
      151,  151,  144,    0,  151,  144,  151,  140,  142,  151,

        0,  143,    0,  145,  143,    0,  145,  143,  144,    0,
        0,    0,  144,    0,    0,    0,  143,    0,  144,  145,
      145,    0,    0,  145,    0,  145,    0,  144,  145,  145,
      154,  154,    0,    0,    0,    0,  154,    0,  145,  154,
      157,  157,    0,    0,  157,    0,  157,  154,    0,  157,
      158,  158,  160,  160,  158,    0,  158,    0,  160,  158,
        0,  160,  161,  161,  162,  162,    0,  162,  161,    0,
      162,  161,  161,  162,  163,  163,  164,  164,  163,    0,
      163,    0,  164,  163,    0,  164,  165,  165,    0,  166,
      166,  166,  165,    0,  164,  165,  166,    0,    0,  166,

        0,  167,  167,  165,  167,  168,  168,  167,    0,    0,
      167,  168,  169,  169,  168,    0,  170,  170,  169,    0,
        0,  169,  170,  171,  171,  170,    0,  171,    0,  171,
      172,  172,  171,    0,  173,  173,  172,  173,    0,  172,
      173,  174,  174,  173,    0,  175,  175,  174,  172,  175,
      174,  175,  176,  176,  175,    0,    0,    0,  176,    0,
      174,  176,  175,  176,  177,  177,    0,  178,  178,  178,
      177,    0,    0,  177,  178,    0,    0,  178,  179,  179,
        0,  177,  179,    0,  179,  180,  180,  179,    0,  181,
      181,  180,    0,  181,  180,  181,  182,  182,  181,    0,

        0,    0,  182,  180,    0,  182,  183,  183,    0,    0,
        0,  183,  183,    0,    0,  183,  184,  184,  184,  185,
      185,    0,  184,  184,    0,  185,  184,    0,  185,  186,
      186,    0,    0,  188,    0,  186,  185,    0,  186,  187,
      187,    0,    0,    0,  187,  187,    0,  186,  187,  188,
      188,  188,  189,  189,    0,    0,  188,  188,  189,  188,
      189,  189,  191,  191,    0,  191,  192,  192,  191,    0,
      192,  191,  192,    0,    0,  192,  193,  193,    0,  191,
      194,  194,  193,  199,  199,  193,  194,  196,  196,  194,
        0,  197,  197,  196,    0,    0,  196,  197,  198,  198,

      197,  202,  199,  199,  198,    0,    0,  198,  199,  200,
      200,  199,    0,  201,  201,  200,    0,  198,  200,  201,
        0,    0,  201,    0,  202,  202,  202,  200,    0,    0,
      202,  202,    0,  201,  202,  203,  203,    0,    0,    0,
        0,  203,  202,  203,  203,  204,  204,  205,  205,    0,
      204,  204,    0,  205,  204,    0,  205,    0,  206,  206,
      207,  207,    0,  205,  206,  205,  207,  206,    0,  207,
      208,  208,  208,  207,    0,  206,    0,  208,  209,  209,
      208,    0,  210,  210,  209,    0,    0,  209,  210,    0,
        0,  210,  211,  211,  211,  214,  214,    0,  210,  211,

        0,  214,  211,    0,  214,  216,  216,    0,    0,  217,
      217,  216,    0,  217,  216,  217,    0,  214,  217,  218,
      218,    0,    0,    0,    0,  218,    0,  216,  218,  220,
      220,  218,  219,  219,  219,  220,    0,  219,  220,  219,
      220,    0,  219,  221,  221,  222,  222,  223,  223,  221,
        0,  222,  221,  223,  222,  222,  223,    0,    0,    0,
      224,  224,  221,  223,  224,    0,  224,  225,  225,  224,
        0,  226,  226,  225,    0,    0,  225,  226,  228,  228,
      226,  227,  227,  227,  228,    0,    0,  228,  227,    0,
      227,  227,  227,    0,  229,  229,    0,    0,  230,  230,

      229,    0,  227,  229,  230,    0,  230,  230,  231,  231,
        0,    0,  232,  232,  231,    0,  232,  231,  232,  237,
      237,  232,    0,  238,  238,  237,    0,    0,  237,  238,
        0,  231,  238,    0,  239,  239,    0,    0,    0,  238,
      239,    0,  237,  239,  240,  240,    0,    0,  239,    0,
      240,    0,    0,  240,  240,  241,  241,  241,    0,    0,
      242,  242,  241,    0,  242,  241,  242,    0,    0,  242,
      243,  243,  243,    0,  244,  244,  243,    0,    0,  243,
      244,  245,  245,  244,    0,  246,  246,  245,    0,    0,
      245,  246,  247,  247,  246,    0,    0,  245,  247,  248,

      248,  247,    0,  249,  249,  248,    0,    0,  248,  249,
        0,  249,  249,  250,  250,  251,  251,  252,  252,  250,
        0,  251,  250,  252,  251,    0,  252,    0,  253,  253,
      254,  254,  253,  251,  253,    0,  254,  253,    0,  254,
      255,  255,  256,  256,  255,    0,  255,    0,  256,  255,
        0,  256,  257,  257,  258,  258,    0,    0,  257,    0,
      258,  257,  258,  258,  259,  259,  260,  260,  257,    0,
      259,    0,  260,  259,    0,  260,  261,  261,    0,    0,
      262,  262,  261,    0,    0,  261,  262,  260,  262,  262,
      263,  263,    0,  261,    0,    0,  263,    0,  263,  263,

      264,  264,  265,  265,  264,    0,  264,    0,  265,  264,
      265,  265,  266,  266,  267,  267,  269,  269,  266,  267,
      267,  266,    0,  267,  268,  268,    0,  268,  273,  273,
      268,    0,    0,  268,  273,  269,  269,  273,    0,    0,
        0,  269,  274,  274,  269,    0,    0,  273,  274,    0,
      274,  274,  275,  275,  276,  276,  278,  278,  275,    0,
      276,  275,  278,  276,    0,  278,    0,    0,  275,  279,
      279,    0,  278,  280,  280,  279,    0,    0,  279,  280,
      281,  281,  280,    0,  282,  282,  281,    0,  282,  281,
      282,  284,  284,  282,    0,  285,  285,  284,  281,  284,

      284,  285,    0,  285,  285,  286,  286,    0,  284,  287,
      287,  286,    0,  286,  286,  287,  288,  288,  287,    0,
      289,  289,  288,    0,  288,  288,  289,  287,    0,  289,
        0,  290,  290,  294,    0,  291,  291,  290,  289,  290,
      290,  291,  292,  292,  291,    0,  293,  293,  292,  293,
        0,  292,  293,  291,    0,  293,  300,  294,  294,  300,
      292,  295,  295,  294,    0,    0,  294,  295,  305,    0,
      295,  305,  295,    0,  300,  300,  306,  306,    0,    0,
      300,    0,  306,  300,    0,  306,  305,  305,    0,    0,
        0,    0,  305,    0,    0,  305,  307,  307,    0,  306,

      308,  308,  307,    0,    0,  307,  308,  307,    0,  308,
      309,  309,    0,  308,  308,    0,  309,  308,    0,  309,
      309,  310,  310,    0,  311,  311,  311,  310,    0,    0,
      310,  311,    0,  310,  311,  312,  312,  313,  313,  314,
      314,  312,    0,  313,  312,  314,  313,    0,  314,  315,
      315,  316,  316,  312,    0,  315,    0,  316,  315,    0,
      316,    0,  314,  316,  317,  317,    0,    0,  318,  318,
      317,  318,  315,  317,  318,    0,    0,  318,  319,  319,
        0,  317,  320,  320,  319,    0,    0,  319,  320,  319,
        0,  320,  321,  321,    0,  320,  321,    0,  321,  322,

      322,  321,    0,  323,  323,  322,    0,    0,  322,  323,
        0,    0,  323,    0,    0,  323,  322,  324,  324,  324,
        0,  325,  325,  325,  324,    0,    0,  324,  325,  326,
      326,  325,    0,  327,  327,  326,    0,    0,  326,  327,
      328,  328,  327,  326,    0,  327,  328,  329,  329,  328,
        0,    0,    0,  329,    0,    0,  329,    0,  328,  330,
      330,  330,    0,  331,  331,  330,    0,    0,  330,  331,
      329,    0,  331,    0,  332,  332,  333,  333,  333,  331,
      332,    0,  333,  332,    0,  333,  334,  334,  335,  335,
      334,    0,  334,    0,  335,  334,    0,  335,  336,  336,

      337,  337,  337,    0,  336,    0,  337,  336,    0,  337,
        0,  336,  338,  338,  339,  339,    0,    0,  338,    0,
      339,  338,  338,  339,  340,  340,    0,    0,  340,    0,
      340,    0,  339,  340,  341,  341,  342,  342,    0,    0,
      341,    0,  342,  341,    0,  342,  343,  343,  343,    0,
        0,  344,  344,  343,  342,  344,  343,  344,  345,  345,
      344,    0,    0,    0,  345,  346,  346,  345,  345,    0,
        0,  346,    0,    0,  346,  347,  347,  347,    0,  348,
      348,  347,    0,    0,  347,  348,  349,  349,  348,  348,
      350,  350,  349,    0,  352,  349,  350,  349,  350,  350,

      351,  351,  351,  353,    0,    0,    0,  351,    0,    0,
      351,  352,  352,    0,    0,  355,  355,  352,    0,    0,
      352,  355,  353,  353,  355,    0,  356,  356,  353,    0,
        0,  353,  356,  357,  357,  356,    0,    0,  356,  357,
      359,  359,  357,    0,  359,    0,  359,    0,    0,  359,
      360,  360,    0,  357,  360,    0,  360,  361,  361,  360,
        0,  363,  363,  361,  363,    0,  361,  363,  364,  364,
      363,    0,  364,    0,  364,  365,  365,  364,    0,    0,
        0,  365,  366,  366,  365,  365,  367,  367,  366,    0,
        0,  366,  367,  368,  368,  367,    0,    0,    0,  368,

      369,  369,  368,  368,    0,    0,  369,    0,    0,  369,
        0,  370,  370,  370,    0,  371,  371,  370,    0,  369,
      370,  371,  372,  372,  371,    0,  373,  373,  372,    0,
        0,  372,  373,  373,    0,  373,  374,  374,  377,  371,
      376,  376,  374,    0,  378,  374,  376,    0,    0,  376,
        0,    0,  379,  376,    0,    0,  380,  377,  377,  381,
      381,  378,  378,  377,  381,  381,  377,  378,  381,    0,
      378,  379,  379,  380,  380,    0,    0,  379,    0,  380,
      379,    0,  380,  382,  382,  383,  383,  382,    0,  382,
        0,  383,  382,    0,  383,  384,  384,  383,    0,  385,

      385,  384,    0,    0,  384,  385,  385,    0,  385,  386,
      386,  387,  387,    0,    0,  386,    0,  387,  386,    0,
      387,    0,  386,    0,  388,  388,    0,    0,    0,  387,
      388,    0,    0,  388,    0,  389,  389,    0,    0,    0,
      388,  389,  389,    0,  389,  390,  390,  390,    0,  391,
      391,  391,  390,    0,    0,  390,  391,    0,    0,  391,
      392,  392,  392,  393,  393,    0,  392,  392,    0,  393,
      392,    0,  393,  394,  394,    0,    0,  395,  395,  394,
        0,  395,  394,  395,  396,  396,  395,    0,  397,  397,
      396,    0,    0,  396,  397,    0,    0,  397,  398,  398,

      398,    0,  399,  399,  398,    0,    0,  398,  399,  400,
      400,  399,    0,  401,  401,  400,    0,    0,  400,  401,
      401,  399,  401,  402,  402,  403,  403,    0,    0,  402,
        0,  403,  402,    0,  403,    0,  404,  404,    0,  402,
      404,    0,  404,  403,    0,  404,  405,  405,    0,    0,
      406,  406,  405,    0,  405,  405,  406,  407,  407,  406,
        0,    0,    0,  407,    0,    0,  407,  408,  408,  408,
      407,  409,  409,  409,  408,    0,    0,  408,  409,    0,
        0,  409,  410,  410,    0,  408,  411,  411,  410,    0,
        0,  410,  411,    0,    0,  411,    0,  412,  412,  411,

        0,  413,  413,  412,    0,  410,  412,  413,    0,    0,
      413,    0,  414,  414,  412,    0,  415,  415,  414,    0,
      413,  414,  415,  416,  416,  415,    0,  417,  417,  416,
        0,    0,  416,  417,    0,  417,  417,    0,    0,  418,
      418,    0,    0,  419,  419,  418,  416,  418,  418,  419,
      420,  420,  419,  419,  420,    0,  420,  421,  421,  420,
        0,  422,  422,  421,    0,    0,  421,  422,    0,  421,
      422,  423,  423,    0,    0,  423,    0,  423,    0,  422,
      423,  424,  424,  425,  425,    0,    0,  424,    0,  425,
      424,    0,  425,  425,  424,  426,  426,  427,  427,  428,

      428,  426,    0,  427,  426,  428,  427,    0,  428,  430,
      430,  431,  431,    0,    0,  430,    0,  431,  430,  430,
      431,  432,  432,  433,  433,  432,    0,  432,    0,  433,
      432,    0,  433,  434,  434,  435,  435,  437,  437,  434,
        0,  435,  434,  437,  435,    0,  437,    0,  435,  434,
      438,  438,    0,    0,    0,    0,  438,  439,  439,  438,
      438,  439,    0,  439,  440,  440,  439,    0,  441,  441,
      440,    0,  441,  440,  441,    0,  440,  441,  442,  442,
      443,  443,  444,  444,  442,    0,  443,  442,  444,  443,
        0,  444,  442,  445,  445,  444,    0,  446,  446,  445,

        0,    0,  445,  446,  448,  448,  446,  448,  449,  449,
      448,    0,    0,  448,  449,  446,    0,  449,  450,  450,
      451,  451,  452,  452,  450,    0,  451,  450,  452,  451,
        0,  452,  453,  453,    0,    0,  454,  454,  453,    0,
      453,  453,  454,  455,  455,  454,    0,    0,  454,  455,
      456,  456,  455,  455,  457,  457,  456,    0,    0,  456,
      457,    0,    0,  457,    0,    0,  456,  458,  458,  458,
        0,  459,  459,  458,    0,    0,  458,  459,    0,  459,
      459,  460,  460,  461,  461,    0,    0,  460,    0,  461,
      460,  460,  461,    0,  462,  462,    0,    0,  462,  461,

      462,  464,  464,  462,  463,  463,  463,  464,    0,    0,
      464,  463,  465,  465,  463,    0,  466,  466,  465,    0,
        0,  465,  466,    0,  466,  466,  467,  467,    0,    0,
      468,  468,  467,    0,  467,  467,  468,  469,  469,  468,
        0,  470,  470,  469,    0,    0,  469,  470,  468,    0,
      470,    0,  471,  471,    0,  471,    0,  469,  471,  472,
      472,  471,    0,  473,  473,  472,    0,    0,  472,  473,
      474,  474,  473,    0,  473,    0,  474,  472,    0,  474,
      475,  475,    0,    0,  476,  476,  475,    0,  474,  475,
      476,  477,  477,  476,  476,  478,  478,  477,    0,  478,

      477,  478,  479,  479,  478,    0,    0,  477,  479,    0,
      479,  479,  480,  480,  481,  481,    0,    0,  480,    0,
      481,  480,    0,  481,    0,  482,  482,  481,    0,  482,
      480,  482,  483,  483,  482,    0,  484,  484,  483,    0,
        0,  483,  484,    0,  483,  484,  485,  485,    0,    0,
        0,    0,  485,    0,  485,  485,  486,  486,  487,  487,
      486,    0,  486,    0,  487,  486,    0,  487,  488,  488,
      489,  489,    0,    0,  488,    0,  489,  488,    0,  489,
        0,  488,    0,  490,  490,  491,  491,    0,  489,  490,
        0,  491,  490,    0,  491,  492,  492,    0,    0,  490,

        0,  492,    0,    0,  492,  493,  493,    0,  492,  494,
      494,  493,    0,  494,  493,  494,  493,    0,  494,  495,
      495,  496,  496,    0,    0,  495,    0,  496,  495,    0,
      496,  497,  497,  498,  498,  497,    0,  497,    0,  498,
      497,    0,  498,  499,  499,    0,  499,  500,  500,  499,
        0,  500,  499,  500,  501,  501,  500,    0,  503,  503,
      501,  501,    0,  501,  503,  504,  504,  503,    0,    0,
        0,  504,  505,  505,  504,  504,  506,  506,  505,    0,
        0,  505,  506,  507,  507,  506,    0,    0,    0,  507,
        0,    0,  507,  509,  509,    0,  507,  509,    0,  509,

      510,  510,  509,    0,  511,  511,  510,    0,    0,  510,
      511,  512,  512,  511,    0,  513,  513,  512,    0,    0,
      512,  513,  514,  514,  513,    0,  515,  515,  514,    0,
        0,  514,  515,    0,  514,  515,  517,  517,  518,  518,
      517,    0,  517,    0,  518,  517,    0,  518,  518,  519,
      519,  520,  520,  521,  521,  519,  522,  520,  519,  521,
      520,    0,  521,  523,  523,    0,    0,  519,    0,  523,
        0,    0,  523,    0,  520,  522,  522,  524,  524,  524,
        0,  522,    0,  524,  522,    0,  524,  525,  525,  526,
      526,  527,  527,  525,  527,  526,  525,  527,  526,    0,

      527,  528,  528,    0,    0,  528,    0,  528,    0,    0,
      528,    0,  526,  529,  529,    0,    0,  529,    0,  529,
      530,  530,  529,    0,  530,    0,  530,  531,  531,  530,
        0,  532,  532,  531,    0,    0,  531,  532,    0,    0,
      532,  532,  533,  533,  534,  534,    0,  531,  533,    0,
      534,  533,  534,  534,  535,  535,    0,    0,  535,    0,
      535,  533,    0,  535,  536,  536,  537,  537,  536,    0,
      536,    0,  537,  536,    0,  537,  538,  538,    0,  537,
      539,  539,  538,    0,    0,  538,  539,    0,  539,  539,
      540,  540,  541,  541,  542,  542,  540,    0,  541,  540,

      542,  541,  540,  542,  543,  543,    0,  543,    0,    0,
      543,    0,    0,  543,  544,  544,    0,  542,    0,    0,
      544,    0,    0,  544,  545,  545,    0,  544,  546,  546,
      545,    0,    0,  545,  546,  547,  547,  546,    0,    0,
      546,  547,  548,  548,  547,    0,    0,  548,  548,    0,
        0,  548,    0,  549,  549,  550,  550,    0,  547,  549,
        0,  550,  549,    0,  550,  551,  551,  552,  552,  553,
      553,  551,  549,  552,  551,  553,  552,  551,  553,    0,
      554,  554,  555,  555,  554,  552,  554,    0,  555,  554,
        0,  555,  556,  556,  555,    0,    0,    0,  556,    0,

        0,  556,  557,  557,  557,    0,  558,  558,  557,  558,
        0,  557,  558,  559,  559,  558,    0,  559,    0,  559,
      560,  560,  559,    0,  561,  561,  560,    0,    0,  560,
      561,  563,  563,  561,    0,  563,    0,  563,  564,  564,
      563,    0,    0,    0,  564,    0,    0,  564,  566,  566,
      566,    0,  567,  567,  566,    0,  564,  566,  567,  568,
      568,  567,    0,  568,    0,  568,  569,  569,  568,    0,
      567,    0,  569,  571,  571,  569,    0,  572,  572,  571,
        0,  572,  571,  572,  573,  573,  572,    0,  574,  574,
      573,    0,    0,  573,  574,  575,  575,  574,  576,  576,

      576,  575,    0,    0,  575,  576,  575,    0,  576,  577,
      577,  578,  578,    0,    0,  577,    0,  578,  577,    0,
      578,  579,  579,  579,    0,    0,  577,    0,  579,    0,
        0,  579,  580,  580,  580,    0,  581,  581,  581,  580,
        0,    0,  580,  581,  582,  582,  581,    0,  583,  583,
      582,    0,    0,  582,  583,    0,  582,  583,  584,  584,
      585,  585,    0,    0,  584,    0,  585,  584,    0,  585,
        0,  583,    0,  586,  586,    0,    0,  586,    0,  586,
        0,  584,  586,  587,  587,  588,  588,  588,    0,  587,
        0,  588,  587,    0,  588,  589,  589,  590,  590,  587,

        0,  589,    0,  590,  589,    0,  590,    0,  591,  591,
      592,  592,    0,  590,  591,    0,  592,  591,    0,  592,
      594,  594,  594,  592,  591,  593,  593,  594,  593,    0,
      594,  593,    0,    0,  593,  595,  595,  595,    0,  596,
      596,  596,  595,    0,    0,  595,  596,  597,  597,  596,
      598,  598,  598,  597,    0,    0,  597,  598,    0,  597,
      598,  599,  599,  600,  600,    0,    0,  599,    0,  600,
      599,  600,  600,  601,  601,  602,  602,  604,  604,  601,
        0,  602,  601,  604,  602,    0,  604,  602,  603,  603,
      603,  601,  605,  605,  603,    0,    0,  603,  605,    0,

        0,  605,    0,  606,  606,    0,    0,    0,  605,  606,
      608,  608,  606,  607,  607,  607,  608,    0,    0,  608,
      607,  609,  609,  607,    0,  610,  610,  609,    0,    0,
      609,  610,  611,  611,  610,    0,  613,  613,  611,  609,
        0,  611,  613,  614,  614,  613,    0,  616,  616,  614,
        0,    0,  614,  616,  617,  617,  616,    0,  618,  618,
      617,    0,    0,  617,  618,  616,    0,  618,  620,  620,
      621,  621,    0,  617,  620,    0,  621,  620,    0,  621,
      622,  622,  623,  623,  622,    0,  622,  621,  623,  622,
        0,  623,  624,  624,  625,  625,  626,  626,  624,    0,

      625,  624,  626,  625,    0,  626,  627,  627,  628,  628,
      624,    0,  627,    0,  628,  627,    0,  628,  629,  629,
      630,  630,  631,  631,  629,    0,  630,  629,  631,  630,
        0,  631,  632,  632,    0,    0,  632,    0,  632,  633,
      633,  632,    0,  633,    0,  633,  634,  634,  633,    0,
      635,  635,  634,    0,    0,  634,  635,  636,  636,  635,
        0,    0,    0,  636,  637,  637,  636,  635,    0,  636,
      637,    0,    0,  637,  638,  638,    0,  637,  639,  639,
      638,    0,    0,  638,  639,  640,  640,  639,    0,  641,
      641,  640,    0,    0,  640,  641,  642,  642,  641,    0,

        0,    0,  642,  643,  643,  642,  642,  644,  644,  643,
        0,    0,  643,  644,  644,    0,  644,  645,  645,  646,
      646,  647,  647,  645,    0,  646,  645,  647,  646,    0,
      647,  648,  648,    0,    0,  646,    0,  648,    0,  647,
      648,  649,  649,    0,  648,  649,    0,  649,  650,  650,
      649,    0,  652,  652,  650,    0,    0,  650,  652,  653,
      653,  652,    0,  655,  655,  653,    0,    0,  653,  655,
      656,  656,  655,    0,    0,  653,  656,  657,  657,  656,
        0,    0,  656,  657,    0,  657,  657,  658,  658,    0,
        0,  658,    0,  658,  659,  659,  658,    0,  659,    0,

      659,  660,  660,  659,    0,  660,    0,  660,  661,  661,
      660,    0,  662,  662,  661,    0,    0,  661,  662,  663,
      663,  662,    0,  664,  664,  663,    0,    0,  663,  664,
        0,    0,  664,  665,  665,  665,  666,  666,    0,    0,
      665,  666,  666,  665,    0,  666,  667,  667,    0,    0,
      667,    0,  667,  668,  668,  667,    0,  668,    0,  668,
      669,  669,  668,    0,  669,    0,  669,  670,  670,  669,
        0,  670,    0,  670,  671,  671,  670,    0,  672,  672,
      671,    0,    0,  671,  672,  673,  673,  672,    0,  674,
      674,  673,    0,    0,  673,  674,  675,  675,  674,    0,

      676,  676,  675,  673,    0,  675,  676,  677,  677,  676,
        0,    0,  674,  677,  679,  679,  677,    0,  679,    0,
      679,  676,    0,  679,  680,  680,  681,  681,  682,  682,
      680,    0,  681,  680,  682,  681,    0,  682,    0,  681,
      683,  683,    0,    0,  684,  684,  683,    0,    0,  683,
      684,  682,    0,  684,    0,  685,  685,    0,    0,    0,
        0,  685,    0,  683,  685,  685,    0,  684,  686,  686,
      686,  686,    0,    0,  686,  687,  687,  686,    0,    0,
      687,  687,  688,  688,  687,    0,  689,  689,  688,    0,
        0,  688,  689,  690,  690,  689,    0,  691,  691,  690,

        0,    0,  690,  691,    0,  688,  691,    0,    0,  689,
        0,    0,  692,  692,  693,  693,  690,  691,  692,    0,
      693,  692,    0,  693,  694,  694,  695,  695,  693,    0,
      694,  692,  695,  694,    0,  695,  694,  696,  696,  697,
      697,  698,  698,  696,    0,  697,  696,  698,  697,    0,
      698,  697,  699,  699,  700,  700,    0,    0,  699,    0,
      700,  699,    0,  700,  701,  701,  702,  702,  701,    0,
      701,    0,  702,  701,    0,  702,    0,  703,  703,    0,
      702,  703,    0,  703,  704,  704,  703,    0,  705,  705,
      704,    0,    0,  704,  705,  706,  706,  705,    0,  707,

      707,  706,    0,    0,  706,  707,  708,  708,  707,    0,
      708,    0,  708,  709,  709,  708,    0,  710,  710,  709,
        0,    0,  709,  710,  711,  711,  710,    0,  711,  709,
      711,  712,  712,  711,    0,  710,    0,  712,  713,  713,
      712,  712,  714,  714,  713,    0,    0,  713,  714,  715,
      715,  714,    0,  716,  716,  715,    0,    0,  715,  716,
      717,  717,  716,    0,    0,    0,  717,    0,  715,  717,
      717,  718,  718,  716,    0,  718,    0,  718,  719,  719,
      718,    0,  720,  720,  719,    0,  719,  719,  720,    0,
        0,  720,    0,  721,  721,  722,  722,  721,  720,  721,

        0,  722,  721,    0,  722,  723,  723,    0,    0,  724,
      724,  723,    0,  723,  723,  724,  725,  725,  724,    0,
      726,  726,  725,    0,    0,  725,  726,    0,    0,  726,
      727,  727,    0,  726,  728,  728,  727,    0,    0,  727,
      728,    0,    0,  728,  729,  729,  729,    0,  730,  730,
      729,    0,    0,  729,  730,  731,  731,  730,    0,  731,
      730,  731,  732,  732,  731,    0,  733,  733,  732,    0,
        0,  732,  733,    0,    0,  733,  735,    0,  735,  737,
      737,  738,  738,  738,  739,  739,  739,  739,  739,  740,
      740,  740,  740,  740,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734
    } ;

static yyconst flex_int16_t yy_rule_linenum[165] =
    {   0,
       44,   45,   47,   49,   51,   53,   55,   57,   59,   61,
       63,   65,   67,   69,   71,   73,   75,   77,   79,   81,
       83,   85,   87,   89,   91,   93,   95,   97,   99,  101,
      103,  105,  107,  109,  111,  113,  115,  117,  119,  121,
      123,  124,  125,  127,  128,  130,  131,  132,  133,  135,
      136,  137,  138,  140,  141,  142,  143,  144,  145,  146,
      147,  148,  149,  150,  151,  153,  154,  155,  156,  157,
      158,  159,  160,  161,  162,  163,  164,  165,  166,  168,
      169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
      179,  181,  182,  183,  184,  185,  186,  187,  188,  189,

      190,  191,  192,  193,  194,  196,  197,  198,  199,  200,
      202,  203,  204,  205,  206,  207,  209,  210,  211,  214,
      215,  216,  217,  218,  219,  220,  222,  223,  224,  225,
      226,  227,  228,  231,  232,  233,  234,  235,  236,  237,
      238,  239,  240,  241,  242,  243,  245,  246,  247,  248,
      249,  250,  251,  252,  253,  254,  255,  258,  259,  260,
      262,  263,  264,  265
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/bif.l"
/******************************************************************************
* Copyright 2015-2019 Xilinx, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the BIF file */
/* Run the bif.y file first through bison to generate the bif.tab.h file, which is included herein */
/* Then run this file through flex to generate the bif.yy.c source code */
#line 22 "../s/bif.l"
 #include <stdio.h>
 #include "bifscanner.h"
 #include "bif.tab.hpp"
 #include "authentication.h"
 #include "encryption.h"
 typedef BIF::BisonParser::token tok;
/* see http://www.lysator.liu.se/c/ANSI-C-grammar-l.html */
#line 35 "../s/bif.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 1831 "../bisonflex/bif.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 38 "../s/bif.l"



   yylloc->step ();


#line 1995 "../bisonflex/bif.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 735 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 734 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 165 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 165 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 166 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "../s/bif.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 45 "../s/bif.l"
yylloc->lines (1); yylloc->step ();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "../s/bif.l"
return tok::BOOTLOADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "../s/bif.l"
return tok::PRESIGN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 51 "../s/bif.l"
return tok::UDF_DATA;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 53 "../s/bif.l"
return tok::XIP_MODE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 55 "../s/bif.l"
return tok::BOOT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 57 "../s/bif.l"
return tok::USER;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 59 "../s/bif.l"
return tok::STATIC;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 61 "../s/bif.l"
return tok::NOAUTOSTART;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 63 "../s/bif.l"
return tok::MULTIBOOT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "../s/bif.l"
return tok::PROTECTED;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "../s/bif.l"
return tok::ALIGNMENT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 69 "../s/bif.l"
return tok::EARLY_HANDOFF;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "../s/bif.l"
return tok::HIVEC;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "../s/bif.l"
return tok::BLOCKS;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 75 "../s/bif.l"
return tok::AUTHBLOCKS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "../s/bif.l"
yylval->number = tok::OFFSET;                   return tok::OFFSET;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "../s/bif.l"
yylval->number = tok::RESERVE;                  return tok::RESERVE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "../s/bif.l"
yylval->number = tok::LOAD;                     return tok::LOAD;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "../s/bif.l"
yylval->number = tok::STARTUP;                  return tok::STARTUP;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 85 "../s/bif.l"
yylval->number = tok::PARTITION_NUM;            return tok::PARTITION_NUM;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 87 "../s/bif.l"
yylval->number = tok::INIT;                     return tok::INIT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 89 "../s/bif.l"
yylval->number = tok::UDF_BH;                   return tok::UDF_BH;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 91 "../s/bif.l"
yylval->number = tok::AES_KEY_FILE;             return tok::AES_KEY_FILE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 93 "../s/bif.l"
yylval->number = tok::PPK_FILE;                 return tok::PPK_FILE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "../s/bif.l"
yylval->number = tok::PSK_FILE;				    return tok::PSK_FILE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 97 "../s/bif.l"
yylval->number = tok::SPK_FILE;                 return tok::SPK_FILE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 99 "../s/bif.l"
yylval->number = tok::SSK_FILE;                 return tok::SSK_FILE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 101 "../s/bif.l"
yylval->number = tok::SPK_SIGNATURE_FILE;       return tok::SPK_SIGNATURE_FILE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 103 "../s/bif.l"
yylval->number = tok::BH_SIGNATURE_FILE;        return tok::BH_SIGNATURE_FILE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 105 "../s/bif.l"
yylval->number = tok::HEADER_SIGNATURE_FILE;    return tok::HEADER_SIGNATURE_FILE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "../s/bif.l"
yylval->number = tok::BOOTVECTORS;              return tok::BOOTVECTORS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "../s/bif.l"
yylval->number = tok::BOOTIMAGE;                return tok::BOOTIMAGE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 111 "../s/bif.l"
yylval->number = tok::ID;                       return tok::ID; 
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 113 "../s/bif.l"
yylval->number = tok::BH_KEY_FILE;              return tok::BH_KEY_FILE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 115 "../s/bif.l"
yylval->number = tok::PUF_HELPER_FILE;          return tok::PUF_HELPER_FILE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 117 "../s/bif.l"
yylval->number = tok::PMUFW_IMAGE;              return tok::PMUFW_IMAGE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 119 "../s/bif.l"
yylval->number = tok::BH_KEY_IV;                return tok::BH_KEY_IV;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 121 "../s/bif.l"
yylval->number = tok::FAMILY_KEY;                return tok::FAMILY_KEY;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 123 "../s/bif.l"
return tok::ENCRYPTION;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 124 "../s/bif.l"
yylval->number = 0;                             return tok::NONE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 125 "../s/bif.l"
yylval->number = Encryption::AES;               return tok::ENCRVALUE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 127 "../s/bif.l"
return tok::AUTHENTICATION;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 128 "../s/bif.l"
yylval->number = Authentication::RSA;           return tok::AUTHVALUE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "../s/bif.l"
return tok::CHECKSUM;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 131 "../s/bif.l"
yylval->number = Checksum::MD5;                 return tok::CHECKSUMVALUE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 132 "../s/bif.l"
yylval->number = Checksum::SHA2;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 133 "../s/bif.l"
yylval->number = Checksum::SHA3;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 135 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 136 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 137 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 138 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 140 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 141 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 142 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 143 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 144 "../s/bif.l"
yylval->number = KeySource::EfuseBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 145 "../s/bif.l"
yylval->number = KeySource::EfuseGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 146 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 147 "../s/bif.l"
yylval->number = KeySource::BbramBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 148 "../s/bif.l"
yylval->number = KeySource::BbramGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 149 "../s/bif.l"
yylval->number = KeySource::BhGryKey;           return tok::KEY_SRC;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 150 "../s/bif.l"
yylval->number = KeySource::BhBlkKey;           return tok::KEY_SRC;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 151 "../s/bif.l"
yylval->number = KeySource::BhKupKey;           return tok::KEY_SRC;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 153 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 154 "../s/bif.l"
yylval->number = Core::R5Single;                return tok::CORE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 155 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 156 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 157 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 158 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 159 "../s/bif.l"
yylval->number = Core::R5Dual;                  return tok::CORE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 160 "../s/bif.l"
yylval->number = BhRsa::BhRsaEnable;            return tok::BH_RSA;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 161 "../s/bif.l"
yylval->number = AuthHash::Sha2;               return tok::AUTH_HASH;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 162 "../s/bif.l"
yylval->number = PufHdLoc::PUFinBH;             return tok::PUFHD_LOC;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 163 "../s/bif.l"
yylval->number = AuthOnly::Enabled;             return tok::AUTH_ONLY;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 164 "../s/bif.l"
yylval->number = OptKey::OptKeyinSecHdr;        return tok::OPT_KEY;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 165 "../s/bif.l"
yylval->number = PufMode::PUF4K;                return tok::PUF4KMODE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 166 "../s/bif.l"
yylval->number = tok::SHUTTER;                  return tok::SHUTTER;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 168 "../s/bif.l"
return tok::BOOT_DEVICE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 169 "../s/bif.l"
yylval->number = BootDevice::QSPI32;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 170 "../s/bif.l"
yylval->number = BootDevice::QSPI24;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 171 "../s/bif.l"
yylval->number = BootDevice::NAND;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 172 "../s/bif.l"
yylval->number = BootDevice::SD0;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 173 "../s/bif.l"
yylval->number = BootDevice::SD1;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 174 "../s/bif.l"
yylval->number = BootDevice::SDLS;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 175 "../s/bif.l"
yylval->number = BootDevice::MMC;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 176 "../s/bif.l"
yylval->number = BootDevice::USB;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 177 "../s/bif.l"
yylval->number = BootDevice::ETHERNET;          return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 178 "../s/bif.l"
yylval->number = BootDevice::PCIE;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 179 "../s/bif.l"
yylval->number = BootDevice::SATA;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 181 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 182 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 183 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 184 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 185 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 186 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 187 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 188 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 189 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 190 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 191 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 192 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 193 "../s/bif.l"
yylval->number = DestinationCPU::R5_lockstep;   return tok::DEST_CPU_TYPE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 194 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 196 "../s/bif.l"
return tok::DEST_DEVICE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 197 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PS;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 198 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PL;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 199 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PMU;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 200 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_XIP;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 202 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 203 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 204 "../s/bif.l"
yylval->number = ExceptionLevel::EL0;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 205 "../s/bif.l"
yylval->number = ExceptionLevel::EL1;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 206 "../s/bif.l"
yylval->number = ExceptionLevel::EL2;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 207 "../s/bif.l"
yylval->number = ExceptionLevel::EL3;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 209 "../s/bif.l"
return tok::TRUSTZONE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 210 "../s/bif.l"
yylval->number = TrustZone::Secure;             return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 211 "../s/bif.l"
yylval->number = TrustZone::NonSecure;          return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 214 "../s/bif.l"
yylval->number = tok::AUTH_PARAMS;          return tok::AUTH_PARAMS;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 215 "../s/bif.l"
yylval->number = tok::PPK_SELECT;           return tok::PPK_SELECT;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 216 "../s/bif.l"
yylval->number = tok::SPK_SELECT;           return tok::SPK_SELECT;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 217 "../s/bif.l"
yylval->number = SpkSelect::SPK_eFUSE;      return tok::SPKSELECT;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 218 "../s/bif.l"
yylval->number = SpkSelect::USER_eFUSE;     return tok::SPKSELECT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 219 "../s/bif.l"
yylval->number = tok::SPK_ID;               return tok::SPK_ID; 
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 220 "../s/bif.l"
return tok::HEADER_AUTH;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 222 "../s/bif.l"
yylval->number = tok::SPLIT;                return tok::SPLIT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 223 "../s/bif.l"
yylval->number = tok::SPLIT_MODE;           return tok::SPLIT_MODE;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 224 "../s/bif.l"
yylval->number = SplitMode::SlaveMode;      return tok::SPLITMODE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 225 "../s/bif.l"
yylval->number = SplitMode::Normal;         return tok::SPLITMODE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 226 "../s/bif.l"
yylval->number = tok::SPLIT_FMT;            return tok::SPLIT_FMT; 
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 227 "../s/bif.l"
return tok::MCS;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 228 "../s/bif.l"
return tok::BIN;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 231 "../s/bif.l"
yylval->number=atoi(yytext);                return tok::DECVALUE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 232 "../s/bif.l"
yylval->number=strtoul(yytext+2,NULL,16);   return tok::HEXVALUE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 233 "../s/bif.l"
return tok::COLON;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 234 "../s/bif.l"
return tok::SEMICOLON;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 235 "../s/bif.l"
return tok::EQUAL;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 236 "../s/bif.l"
return tok::COMMA;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 237 "../s/bif.l"
return tok::OBRACKET;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 238 "../s/bif.l"
return tok::EBRACKET;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 239 "../s/bif.l"
return tok::OBRACE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 240 "../s/bif.l"
return tok::EBRACE;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 241 "../s/bif.l"
return tok::LPAREN;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 242 "../s/bif.l"
return tok::RPAREN;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 243 "../s/bif.l"
return tok::ASTERISK;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 245 "../s/bif.l"
return tok::PLUS;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 246 "../s/bif.l"
return tok::MINUS;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 247 "../s/bif.l"
return tok::LSHIFT;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 248 "../s/bif.l"
return tok::RSHIFT;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 249 "../s/bif.l"
return tok::MULT;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 250 "../s/bif.l"
return tok::DIVIDE;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 251 "../s/bif.l"
return tok::MODULO;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 252 "../s/bif.l"
return tok::NEGATION;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 253 "../s/bif.l"
return tok::AND;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 254 "../s/bif.l"
return tok::OR;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 255 "../s/bif.l"
return tok::XOR;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 258 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::WORD;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 259 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::FILENAME;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 260 "../s/bif.l"
yylval->string=strdup(yytext+1); yylval->string[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 262 "../s/bif.l"
yylloc->step ();
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 263 "../s/bif.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 264 "../s/bif.l"
/* ignore (Linux only) */
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 265 "../s/bif.l"
printf("WARNING: bad character! '%s' (0x%02X)\n",yytext,yytext[0]);
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 266 "../s/bif.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2931 "../bisonflex/bif.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	biffree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	biffree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					bifrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) bifrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 735 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 735 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 734);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) bifalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) bifalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		biffree((void *) b->yy_ch_buf  );

	biffree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) bifalloc(new_size  );

		else
			(yy_start_stack) = (int *) bifrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *bifalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *bifrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void biffree (void * ptr )
{
	free( (char *) ptr );	/* see bifrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 266 "../s/bif.l"




void BIF::FlexScanner::comment()
{
    char c, c1;
loop:
    while ((c = yyinput()) != '*' && c != 0) 
    {
        // putchar(c);
        if (c == '\n') yylloc->lines (1);
    }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

