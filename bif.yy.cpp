#line 2 "../bisonflex/bif.yy.cpp"

#line 4 "../bisonflex/bif.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer bifFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *bifalloc (yy_size_t  );
void *bifrealloc (void *,yy_size_t  );
void biffree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 167
#define YY_END_OF_BUFFER 168
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[754] =
    {   0,
        0,    0,  168,  166,  163,  164,  165,  166,  155,  157,
      146,  147,  148,  149,  141,  150,  161,  154,  136,  136,
      138,  139,  166,  140,  166,  160,  142,  143,  159,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      144,  158,  145,  156,  163,  164,    0,    0,  161,    1,
      161,  136,  161,  151,  152,  160,    0,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  113,  160,  160,  160,  160,  160,  160,  160,
      160,   37,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  160,  160,  160,  110,
      160,  160,  160,  109,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  162,    0,    0,    2,  161,  137,    0,  160,
      160,  160,   45,  160,  160,  160,  160,  160,  160,  135,
      160,  160,  160,  160,  160,  160,  160,  161,  160,  160,
      160,  160,  133,  160,  160,  160,  160,  160,  160,  160,
      134,   49,   89,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,   24,  107,  160,  160,  160,  160,
      160,  160,  161,  160,  160,   47,  160,  161,   86,   87,

      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,   90,  160,  112,    0,  161,  160,  161,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,    7,  160,   95,  160,  160,  160,  115,  116,  117,
      118,  160,  160,  160,  160,   54,  160,  160,   25,  160,
      160,   22,  130,  160,   85,  160,   44,  160,  160,  160,
      160,  160,  160,   92,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  104,  105,  161,  160,  160,  160,
       93,  161,  160,   50,   51,  160,  160,  161,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,    8,  160,

       96,   98,  100,  102,  160,   97,   99,  101,  103,  160,
      160,  160,  160,  160,  160,  160,   58,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,   57,  160,  160,  160,  160,  160,  160,   15,  160,
      160,  160,  160,  160,  160,  160,  160,   53,  160,  111,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      161,  160,  160,  160,   88,  160,  160,  160,  161,  160,
      160,  160,  160,  129,  160,  160,  160,  160,   55,  160,
      160,  161,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,   16,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  132,   20,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,   84,   83,  161,  160,  160,
      160,  120,  160,  160,  161,  127,  160,  160,  160,  160,
      160,    9,  160,   26,  160,  161,  160,   70,   72,   71,
       73,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,   67,  160,  160,

      160,   79,  160,  160,  160,   28,    4,  160,   29,  160,
      160,  160,  161,   74,  160,   21,   81,  160,  161,  160,
       30,  160,   31,   23,  160,  160,  161,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
       48,  160,  160,  160,  160,  160,  160,   91,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,   39,   77,  161,  160,  160,  161,  160,  160,
      160,    5,  161,    6,  160,  160,   13,   78,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,   41,  160,

      160,  160,  160,   36,  160,  160,  160,  160,  160,  160,
      160,  160,  160,   42,  160,  160,  160,  160,   11,  160,
      121,  160,  160,  160,   12,   80,  161,   69,  131,  125,
      160,  160,  119,  161,  160,   27,  160,  160,   17,  160,
      160,  160,  160,  160,   66,   65,   38,  160,   18,  160,
        3,  160,  160,  160,  160,  160,  160,   43,  160,  160,
      160,  160,  160,  160,  160,  160,  123,  161,  124,  160,
      126,  160,  122,  160,  160,  160,  160,  160,  160,   33,
       82,   35,  160,  160,  160,  160,  160,  160,   68,  128,
      160,  160,   10,  160,   40,  106,  160,   19,  160,  160,

      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,   32,  160,  160,   63,   64,   62,  160,
      160,  160,   14,   60,   61,   59,  160,  160,  160,  160,
      160,   46,   75,  160,  160,  160,  160,  160,  160,  160,
       94,  160,  114,   34,  160,   52,   76,  160,  160,  160,
       56,  108,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    1,    1,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   24,   24,   25,   26,   27,
       28,   29,    1,    1,   30,   30,   30,   30,   30,   30,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   32,   31,   31,
       33,   34,   35,   36,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   31,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    1,    1,    2,    3,    1,    1,    1,    1,
        1,    4,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    5,    1,    1,    1,    1,    4,
        4,    4,    1,    4,    1,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[760] =
    {   0,
        0,    0,  228, 4837,   65,  222, 4837,   66, 4837, 4837,
     4837, 4837, 4837,    0, 4837,    0,    0,   57,   87,   37,
     4837, 4837,  197, 4837,  194,  100, 4837, 4837, 4837,  106,
      136,  134,   78,  111,  159,  172,  184,  195,  196,   91,
      209,  223,  144,  237,  114,  225,  273,  259,  283,  254,
     4837, 4837, 4837, 4837,   70,  210,  206,   68,    0, 4837,
      340,   67,  390, 4837, 4837,  332,   60,  376,  398,  347,
      409,  417,  433,  446,  461,  471,  479,  498,  506,  520,
      528,  542,  577,  410,  549,  573,  576,  580,  593,  618,
      620,  625,  640,  644,  655,  671,  689,  700,  683,  710,

      714,  738,  743,  765,  767,  779,  803,  787,  812,  815,
      833,  840,  837,  858,  870,  877,  834,  594,  898,  900,
      935,  933,  937,  939,  961,  973,  975,  997,  985, 1006,
     1002, 1026, 4837,   61,  208, 4837, 1083,    0,    0,  929,
     1088, 1080, 1103, 1115, 1031, 1120, 1145,  316,  161,  265,
      350, 1135,  494,  451, 1156,  682, 1014,  126, 1160,  731,
      772, 1088,  534, 1171, 1182, 1186, 1193, 1197, 1028, 1204,
     1215, 1217, 1219, 1229, 1231, 1241, 1245, 1252, 1259, 1266,
     1278, 1285, 1292, 1296, 1303, 1313, 1324, 1326, 1336, 1346,
     1357, 1359,   84, 1369, 1373, 1383, 1387,  156, 1394, 1398,

     1405, 1409, 1416, 1420, 1432, 1442, 1452, 1454, 1465, 1467,
     1478, 1485, 1489, 1500,  182,  399, 1502,  421, 1512, 1516,
     1526, 1536, 1540, 1550, 1554, 1565, 1576, 1580, 1587, 1594,
     1601, 1605, 1617, 1621, 1628, 1632, 1639,    0,    0,    0,
        0, 1650, 1652, 1663, 1665, 1679, 1683, 1693, 1697, 1704,
     1708, 1715, 1722, 1726, 1736, 1738, 1740, 1751, 1753, 1763,
     1765, 1775, 1777, 1787, 1789, 1799, 1803, 1813, 1823, 1825,
     1835, 1837, 1847, 1858,    0,    0,  135, 1851, 1865, 1875,
     1877,  122, 1879, 1892, 1896, 1903, 1907,  133, 1914, 1918,
     1928, 1932, 1939, 1943, 1954, 1958, 1965, 1969, 1980, 1984,

        0,    0,    0,    0, 1997,    0,    0,    0,    0, 2009,
     2019, 1999, 2023, 2030, 2040, 2051, 2055, 2065, 2067, 2069,
     2079, 2081, 2094, 2098, 2108, 2112, 2119, 2129, 2136, 2140,
     2155, 2159, 2166, 2170, 2177, 2184, 2196, 2200, 2211, 2213,
     2223, 2225, 2235, 2237, 2249, 2251, 2261, 2271, 2273, 2284,
     2288, 2295, 2302, 2312, 2316, 2323, 2327, 2338, 2348, 2359,
      127, 2352, 2363, 2370,    0, 2377, 2387, 2394,  123, 2398,
     2405, 2412, 2419, 2423, 2430, 2437, 2448, 2452, 2459, 2463,
     2473,  122, 2477, 2494, 2498, 2508, 2510, 2520, 2522, 2532,
     2534, 2496, 2544, 2548, 2558, 2562, 2573, 2584, 2588, 2599,

     2601, 2611, 2615, 2622, 2629, 2633, 2643, 2647, 2654, 2658,
     2668, 2670, 2681, 2691, 2695, 2702, 2713, 2717, 2727, 2731,
     2742, 2746, 2757, 2761, 2768, 2772, 2784, 2788, 2795, 2802,
     2806, 2816, 2826, 2828, 2840, 2842, 2844,  115, 2854, 2856,
     2866, 2868, 2878, 2880,  103, 2882, 2895, 2902, 2909, 2913,
     2923, 2925, 2927, 2938, 2942,  114, 2949, 2953, 2963, 2965,
     2967, 2978, 2980, 2990, 2994, 2992, 3005, 3015, 3019, 3029,
     3031, 3042, 3053, 3049, 3060, 3064, 3074, 3078, 3085, 3089,
     3099, 3101, 3111, 3113, 3125, 3127, 3138, 3140, 3151, 3153,
     3163, 3165, 3176, 3183, 3187, 3197, 3207, 3209, 3219, 3221,

     3234, 3236, 3246, 3256, 3260, 3270, 3272, 3282, 3284, 3294,
     3298, 3305,   86, 3309, 3316, 3323, 3327, 3334,   83, 3344,
     3351, 3355, 3362, 3366, 3373, 3377,   78, 3387, 3389, 3401,
     3403, 3413, 3417, 3424, 3428, 3438, 3442, 3449, 3453, 3460,
     3467, 3474, 3481, 3485, 3496, 3498, 3508, 3518, 3525, 3532,
     3542, 3546, 3556, 3558, 3560, 3570, 3580, 3590, 3594, 3601,
     3608, 3619, 3621, 3631, 3633, 3635, 3646, 3648, 3658, 3668,
     3672, 3679, 3686, 3690,   72, 3697, 3704,   71, 3714, 3718,
     3725, 3732,   43, 3739, 3743, 3753, 3760, 3764, 3771, 3775,
     3785, 3787, 3798, 3809, 3813, 3820, 3824, 3834, 3836, 3849,

     3859, 3861, 3876, 3863, 3880, 3891, 3893, 3908, 3904, 3919,
     3923, 3930, 3934, 3944, 3946, 3956, 3958, 3971, 3960, 3975,
     3986, 3997, 3993, 4004, 4008, 4015,   54, 4019, 4026,    0,
     4030, 4037, 4041,   50, 4051, 4058, 4062, 4069, 4076, 4080,
     4087, 4091, 4101, 4103, 4105, 4115, 4117, 4127, 4129, 4139,
     4141, 4151, 4153, 4163, 4173, 4177, 4184, 4188, 4195, 4202,
     4206, 4216, 4218, 4220, 4230, 4240, 4247,   39, 4251, 4258,
        0, 4262, 4269, 4276, 4283, 4293, 4300, 4307, 4314, 4318,
     4325, 4329, 4340, 4342, 4352, 4359, 4366, 4373, 4380, 4384,
     4391, 4395, 4402, 4406, 4413,    0, 4420, 4430, 4432, 4434,

     4444, 4448, 4455, 4459, 4473, 4480, 4487, 4491, 4498, 4502,
     4517, 4519, 4529, 4531, 4542, 4544, 4546, 4557, 4559, 4569,
     4571, 4582, 4589, 4593, 4600, 4604, 4611, 4618, 4622, 4629,
     4636, 4643, 4647, 4654, 4658, 4665, 4676, 4683, 4687, 4698,
     4700, 4710, 4714, 4721, 4725, 4735, 4739, 4749, 4753, 4760,
     4767, 4771, 4837, 4817,   75, 4818, 4822, 4826, 4831
    } ;

static yyconst flex_int16_t yy_def[760] =
    {   0,
      753,    1,  753,  753,  753,  753,  753,  754,  753,  753,
      753,  753,  753,  755,  753,  755,  755,  755,  755,   19,
      753,  753,  753,  753,  753,  756,  753,  753,  753,  756,
      756,   31,   32,   31,   31,   31,   31,   31,   31,   32,
       32,   32,   32,   41,   41,   31,   31,   31,   41,   32,
      753,  753,  753,  753,  753,  753,  757,  757,  755,  753,
      758,   19,  755,  753,  753,   32,  753,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   31,   31,   31,
       31,   31,  756,   41,   32,   41,   41,   41,   32,   31,
       31,   31,   32,   32,   32,   31,   31,   31,   41,   41,

       31,   31,   31,   31,   31,   31,   31,   32,   41,   41,
       41,   41,   41,   41,   41,   41,  756,  756,   31,   31,
      756,   41,   31,   31,   31,   31,   31,   31,   41,   41,
       31,   31,  753,  753,  759,  753,  758,   63,  755,  756,
      756,   41,   41,   41,   32,   31,   31,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  755,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  755,  147,  147,  147,  147,  755,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  757,  755,  147,  755,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  755,  755,  755,
      755,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  755,  755,  755,  147,  147,  147,
      147,  755,  147,  147,  147,  147,  147,  755,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      755,  755,  755,  755,  147,  755,  755,  755,  755,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      755,  147,  147,  147,  755,  147,  147,  147,  755,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  755,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  755,  147,  147,
      147,  147,  147,  147,  755,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  755,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  755,  147,  147,  147,  147,  147,  755,  147,
      147,  147,  147,  147,  147,  147,  755,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  755,  147,  147,  755,  147,  147,
      147,  147,  755,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  755,  147,  147,  755,
      147,  147,  147,  755,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  755,  147,  147,
      755,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  755,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,    0,  753,  753,  753,  753,  753,  753
    } ;

static yyconst flex_int16_t yy_nxt[4904] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   21,   22,   23,   24,   25,   26,
       26,   26,   27,   17,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   26,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   26,   26,   50,
       26,   26,   51,   52,   53,   54,   55,   60,   59,   55,
       57,   55,   61,  133,   55,  139,  215,   57,   59,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      696,  671,  134,  139,  215,  668,   59,  634,   59,   57,

      275,  276,   57,   62,   62,   62,   62,   62,   62,   62,
       62,   59,  630,   59,   59,   59,   66,   59,   63,   59,
       59,   59,   78,   66,   67,   66,   59,  627,   79,   66,
      753,  277,   66,   59,  583,   66,   66,  578,   66,   59,
      575,   96,  238,  239,  240,  241,   63,   59,   66,   59,
       59,   59,   80,   66,   66,   66,  527,   68,   66,  519,
       67,  513,   66,  456,   66,  445,  438,   66,  116,   59,
       66,   66,   73,   69,  369,   66,  365,   70,   74,   75,
       66,   76,   66,   71,   77,  361,  104,  753,   66,   66,
       66,   66,   72,   66,   66,  105,   81,  230,   66,   66,

       66,   82,  106,  282,   66,   66,   83,   66,   84,   87,
      136,  133,   56,   66,   85,   66,   66,   66,   86,   66,
       88,   66,   65,   64,   56,   90,   89,  753,   66,   91,
      753,   66,   66,   66,  753,   92,   66,   94,  753,  753,
       66,  753,   66,   66,   93,  753,  117,   66,   97,   98,
      753,   66,   95,   66,   66,  753,   66,   99,  753,  100,
      102,   66,   66,  753,  753,  101,  118,   66,   66,  753,
       66,  753,   66,  103,  107,  753,  108,   66,  753,  119,
       66,   66,  109,  753,  110,  111,  753,   66,  112,  753,
      113,  114,   66,  115,   66,  753,   66,  753,   66,  132,

       66,   66,   66,   66,   66,  753,   66,  753,   66,  753,
      120,   66,  128,  121,  122,   66,  753,  123,  753,  753,
      124,  129,   66,  130,  125,  753,  753,  126,  127,   66,
      753,   66,  753,   66,  753,  753,  753,  131,  753,   66,
      135,  135,  136,  135,  135,  135,  135,  135,  135,  135,
      135,  753,  135,   66,   66,  753,  753,  753,  753,   66,
      753,  229,   66,  753,  135,  135,  135,  135,  135,  753,
       66,  753,  135,  753,  135,  135,   66,   66,  753,   66,
      753,  753,   66,  753,  753,   66,  753,   66,   66,  231,
      753,   66,   66,   66,   66,  140,   66,   66,  753,  753,

      753,  143,  135,  135,  135,  135,  138,  138,  138,  138,
      138,  138,  138,  138,   66,  301,  302,  303,  304,  138,
       66,   66,  753,   66,  753,  753,   66,  138,  138,  138,
      138,  138,  138,  753,  753,  141,   66,  306,  307,  308,
      309,  753,   66,   66,  753,   66,  753,   66,   66,  159,
       66,  142,  753,   66,  144,   66,   66,  753,   66,   66,
       66,   66,   66,  753,   66,  753,   66,   66,  753,  753,
      753,   66,  145,  753,  753,  753,  753,   66,   66,  753,
       66,  753,  147,   66,   66,  753,  146,  753,   66,   66,
       66,   66,  234,   66,   66,  753,   66,   66,  753,   66,

      148,  753,  753,  753,  149,   66,   66,  753,   66,   66,
      150,   66,  753,  753,  753,   66,   66,   66,   66,   66,
      753,  151,  753,   66,   66,  753,   66,   66,  753,  152,
      753,   66,   66,  233,  753,   66,  753,   66,  753,  153,
       66,   66,  753,   66,  753,   66,  753,   66,  753,   66,
      753,  753,  753,   66,   66,  753,  753,   66,  753,  154,
      753,   66,   66,   66,  753,   66,  753,   66,  753,   66,
      753,   66,   66,  753,  155,   66,   66,   66,  753,   66,
       66,  156,  753,   66,   66,  753,  753,   66,   59,   66,
      158,   59,   59,  160,   66,  753,   66,  753,  157,   66,

      753,  753,  753,  753,  753,   59,  753,   59,   59,   59,
       59,  753,  161,   66,  753,   66,   66,  753,  753,   66,
       66,   66,  753,   66,  162,  753,   66,   59,   66,   66,
       66,  164,   66,  753,  753,  163,   66,   66,   66,   66,
       66,   66,  753,   66,  753,  753,   66,  753,  195,  753,
      753,  753,  753,  753,  753,  165,  753,   66,  753,   66,
      753,   66,   66,  753,  753,   66,   66,   66,  753,  753,
      753,  753,   66,  753,   66,  753,   66,  166,   66,  753,
      753,   66,   66,  753,   66,  167,  753,   66,   66,   66,
       66,   66,   66,   66,   66,  753,  753,  753,  753,   66,

       66,  753,   66,  753,  168,   66,  169,  753,  170,  753,
       66,  753,   66,  753,  753,  753,  753,  753,   66,   66,
       66,  172,  173,   66,  753,   66,   66,   66,   66,  236,
       66,   66,  753,   66,  753,   66,   66,   66,  753,   66,
      753,   66,  753,  171,  753,   66,  753,   66,  753,   66,
      174,   66,  753,  753,  753,   66,   66,  753,   66,   66,
       66,  175,  753,  753,   66,  753,   66,  753,   66,   66,
       66,  753,  243,  753,   66,   66,  753,   66,  753,   66,
      177,  753,  753,  753,   66,   66,   66,  176,   66,  753,
       66,  753,  178,  753,   66,  753,  179,  753,  753,   66,

       66,  753,   66,  753,   66,  753,   66,  180,   66,   66,
       66,  753,   66,  244,   66,   66,   66,  753,   66,  753,
       66,   66,  181,   66,   66,   66,   66,  753,  182,  753,
      753,   66,  184,  753,   66,   66,  753,   66,  753,  753,
       66,  753,  753,  753,   66,   59,  753,  193,   59,   59,
       66,   66,  185,  753,   66,   66,  183,  753,  753,   66,
       66,  753,   66,   66,  753,   66,  753,   59,   66,  753,
      194,   66,   66,   66,  753,  753,   66,   66,  188,   66,
       66,   66,  753,   66,  753,   66,  187,  189,   66,  186,
       66,  753,  753,   66,  753,  753,   66,   66,   66,  753,

      753,  753,  753,  753,  190,  753,   66,  753,   66,   66,
       66,  753,  191,  753,   66,  753,   66,   66,   66,   66,
       66,   66,  753,  753,  753,   66,   66,   66,  192,  753,
      753,  753,  753,   66,  753,  196,  753,   66,  753,   66,
       59,   66,  216,   59,   59,   66,   59,   66,  198,   59,
       59,  199,  200,  753,   66,  197,   66,  753,   66,  753,
       66,  753,   59,  753,  753,  217,  753,  753,   59,  753,
      753,  753,  201,   66,  202,  753,  204,  753,   66,  753,
       66,   66,   66,   66,   66,  753,   66,  753,  753,   66,
      753,  753,  753,  203,   66,   66,   66,  753,   66,  753,

      753,  753,   66,  753,  753,  753,  753,  205,  206,  753,
       66,  753,  208,  753,   66,  753,   66,   66,   66,  207,
       66,  753,   66,   66,   66,   66,  753,  753,  753,   66,
      753,   66,  753,   66,   66,  210,  753,  753,   66,   66,
      212,   66,  753,  213,   66,   66,   66,   66,  211,   66,
      753,   66,   66,  209,   66,  753,   66,   66,   66,  753,
       66,  753,   66,   66,  251,   66,   66,   66,  237,   66,
      753,   66,  753,   66,   66,  223,   66,  214,   66,  753,
      753,   66,   66,  135,  135,  136,  135,  135,  135,  135,
      135,  135,  135,  135,  753,  135,  753,  753,  753,   59,

      753,  218,   59,   59,  753,  753,  753,  135,  135,  135,
      135,  135,  753,  753,  753,  135,  753,  135,  135,  220,
       66,   59,  753,  753,  219,   66,   66,  753,   66,  753,
       66,   66,  753,  245,   66,  753,   66,  753,  753,  753,
      753,   66,   66,   66,  753,  135,  135,  135,  135,  221,
      753,   66,  753,   66,   66,   66,  753,  224,  222,   66,
      753,   66,  753,   66,  753,   66,   66,   66,  753,  753,
      753,   66,   66,   66,  753,  753,   66,  753,   66,  753,
      753,   66,  225,  226,  753,  753,   66,  753,  227,  753,
      232,  228,   66,   66,   66,  753,  753,   66,   66,   66,

      753,   66,   66,   66,  753,  753,   66,  753,   66,   66,
      753,  235,  753,  242,   66,  753,  753,   66,  246,   66,
       66,  753,  247,   66,   66,   66,  753,  248,   66,   66,
       66,   66,   66,  753,   66,   66,   66,  753,  753,   66,
       66,   66,   66,   66,  252,  753,  753,   66,  249,  753,
       66,  250,   66,   66,   66,   66,   66,   66,   66,  753,
       66,   66,   66,   66,  753,   66,   66,   66,   66,   66,
      253,  753,   66,  753,   66,   66,  753,   66,   66,   66,
      753,  255,   66,   66,   66,  753,  254,   66,   66,   66,
       66,   66,  753,  257,  753,   66,   66,   66,   66,  753,

      753,  256,   66,   66,   66,   66,  258,  259,  753,   66,
      753,  753,   66,  753,  261,   66,   66,  753,  753,  753,
      260,   66,   66,   66,   66,  753,  262,  753,   66,   66,
       66,   66,  753,   66,   66,   66,  753,  264,   66,   66,
       66,   66,   66,  753,  753,  753,   66,  263,  753,   66,
       66,   66,  753,  753,  753,  265,   66,  753,  753,   66,
      266,   66,   66,   66,   66,  753,  267,   66,  753,   66,
       66,  753,   66,   66,   66,  753,  753,  271,  753,   66,
      268,  753,   66,   66,   66,  753,  753,  753,  270,   66,
      753,  269,   66,  272,   66,   66,   66,   66,  753,  753,

       66,  273,   66,   66,  274,   66,   66,   66,  753,  278,
       66,   66,   66,  753,  280,   66,   66,  753,  753,   66,
       66,   66,  753,  279,  281,   66,   66,  284,  285,   66,
       66,   66,   66,   66,  753,   66,   66,   66,  753,  753,
       66,   66,   66,   66,   66,  288,   66,   66,   66,  753,
      753,   66,   66,   66,   66,   66,  753,   66,   66,   66,
      753,  283,   66,   66,  753,  753,   66,  753,  289,   66,
       66,  286,  753,  753,  290,   66,  753,  287,   66,   66,
       66,  753,  753,  753,  753,   66,  291,  292,   66,   66,
       66,   66,   66,  753,  293,   66,  753,   66,   66,  753,

       66,  753,   66,   66,   66,   66,  753,  294,   66,  295,
       66,   66,  753,   66,  298,   66,   66,  297,  753,  296,
      753,   66,   66,   66,   66,  753,   66,   66,   66,  753,
      753,   66,   66,  753,  753,   66,  300,   66,   66,   66,
       66,  753,  299,   66,  753,   66,   66,  753,   66,   66,
       66,  753,  753,   66,   66,   66,  753,  753,   66,   66,
      311,  305,   66,   66,   66,  753,  753,  312,  753,   66,
      753,  310,   66,   66,   66,  753,  314,   66,  315,   66,
      753,  316,   66,   66,  753,  313,   66,   66,   66,  753,
      753,   66,   66,   66,  753,  753,   66,   66,  317,  753,

       66,  753,   66,   66,  753,  753,  753,  753,   66,  753,
      318,   66,  319,   66,   66,  753,  753,   66,   66,   66,
      753,  321,   66,   66,   66,   66,   66,  753,  753,  320,
      322,   66,   66,   66,  753,  323,  753,   66,   66,   66,
       66,  325,   66,   66,   66,  753,  753,  324,   66,  753,
      326,   66,  327,  753,   66,   66,  753,  753,   66,   66,
       66,  753,  328,  329,   66,   66,   66,   66,  753,   66,
       66,   66,  753,  330,   66,   66,   66,   66,   66,  753,
      332,  753,   66,  753,  753,   66,  753,   66,   66,   66,
       66,  753,  331,   66,  753,   66,   66,  753,   66,  753,

       66,   66,   66,   66,  753,  334,   66,  753,   66,   66,
      333,   66,  336,  753,  335,  337,   66,   66,  753,  753,
       66,   66,   66,  753,  338,   66,   66,  753,  753,   66,
       66,   66,  339,  753,   66,   66,   66,  753,  753,   66,
       66,   66,   66,   66,  753,   66,   66,   66,  753,  753,
       66,   66,   66,   66,  341,  753,  753,  340,   66,   66,
       66,   66,  753,   66,   66,   66,  753,  753,   66,   66,
      753,  342,   66,   66,   66,   66,   66,   66,   66,   66,
      753,   66,   66,   66,   66,  753,   66,  753,   66,   66,
      345,   66,  344,  343,   66,  753,   66,   66,  753,   66,

       66,   66,   66,   66,  346,  753,   66,  753,   66,   66,
      753,  347,   66,   66,   66,   66,  753,  753,   66,  753,
       66,   66,  349,   66,   66,   66,   66,   66,  348,  753,
       66,  753,   66,   66,  753,   66,   66,   66,  753,  753,
       66,   66,   66,  753,  753,   66,   66,  350,  352,   66,
       66,   66,  753,  351,  753,  753,   66,  753,  353,   66,
       66,   66,   66,   66,  354,  753,   66,  753,   66,   66,
      355,   66,   66,   66,   66,   66,  359,  360,   66,  357,
       66,  356,  753,   66,   66,   66,  753,  358,   66,   66,
       66,  753,  753,   66,   66,   66,   66,   66,  753,  753,

      753,   66,   66,   66,   66,  753,  753,  362,   66,  753,
      363,   66,   66,   66,   66,   66,   66,   66,   66,  753,
       66,   66,   66,   66,  753,   66,  753,  753,  364,   66,
       66,  753,  366,   66,   66,   66,  753,  753,   66,   66,
       66,   66,   66,  753,   66,   66,   66,  753,  368,   66,
       66,   66,   66,   66,  753,   66,   66,   66,  367,  370,
       66,   66,  753,  372,   66,   66,   66,  753,  371,   66,
       66,   66,  753,  373,   66,   66,   66,   66,   66,  753,
       66,   66,   66,  753,  375,   66,   66,  374,  753,   66,
      753,   66,   66,  382,  753,   66,   66,   66,  376,  377,

       66,   66,   66,   66,   66,  753,   66,  380,   66,  381,
      753,   66,   66,  378,  753,   66,  384,   66,   66,  385,
      379,   66,   66,   66,  753,  753,   66,   66,  386,  753,
       66,  387,  383,  753,   66,   66,   66,   66,  388,  753,
       66,  753,   66,   66,  753,   66,   66,   66,  753,  753,
      753,  753,   66,  753,  753,   66,   66,   66,  753,  389,
       66,   66,   66,  753,  753,   66,   66,   66,   66,   66,
      753,  390,  753,   66,  753,  753,   66,   66,   66,  753,
      391,  392,  753,   66,  393,  753,   66,  394,   66,   66,
      753,  396,   66,   66,   66,  753,  753,   66,   66,  753,

      395,   66,   66,   66,   66,   66,   66,   66,   66,  753,
       66,   66,   66,  398,  753,   66,   66,   66,   66,   66,
      397,  753,   66,  753,   66,   66,  753,   66,  753,  399,
      401,   66,   66,  753,  753,   66,   66,   66,  753,  400,
       66,   66,  753,  402,   66,   66,   66,  753,  404,   66,
       66,   66,  403,  753,   66,   66,   66,   66,   66,  753,
      405,  753,   66,  753,  753,   66,   66,   66,  753,  406,
      407,  753,   66,   66,   66,   66,  753,   66,   66,   66,
      753,  753,   66,   66,  753,  753,   66,  753,  753,  409,
      408,  410,   66,   66,  753,  411,   66,   66,   66,  753,

      753,   66,   66,   66,   66,   66,  753,   66,   66,   66,
      753,  753,   66,   66,   66,   66,   66,  412,  753,  413,
       66,   66,   66,   66,  753,  753,  753,   66,  753,  753,
       66,  753,  414,   66,   66,  416,  753,   66,   66,   66,
      753,  753,   66,   66,  415,  753,   66,  753,   66,   66,
       66,   66,  418,  417,   66,  753,   66,   66,  753,   66,
       66,   66,   66,  420,  419,  753,   66,  753,   66,   66,
      753,   66,   66,   66,   66,   66,  422,  753,   66,  753,
       66,   66,  753,   66,  753,  421,   66,   66,   66,   66,
      753,  753,   66,  753,   66,   66,  423,   66,   66,   66,

      753,  753,  425,  753,   66,  753,  424,   66,   66,   66,
       66,   66,  753,  753,   66,  753,   66,   66,  753,   66,
      427,   66,   66,  753,  753,   66,   66,   66,  426,  428,
       66,   66,   66,   66,   66,  753,  753,  753,   66,   66,
       66,   66,  429,  753,  753,  430,  753,  753,   66,   66,
       66,  431,  753,   66,   66,   66,  753,  753,   66,   66,
       66,   66,   66,  432,   66,   66,   66,  753,  436,   66,
       66,  433,  434,   66,  435,   66,   66,  437,  753,  753,
      753,   66,  753,  753,   66,   66,   66,  753,  753,  439,
       66,   66,  753,  753,   66,   66,   66,   66,   66,  753,

       66,   66,   66,  753,  753,   66,   66,   66,   66,   66,
      753,  753,  440,   66,   66,   66,   66,  753,  442,  753,
       66,  753,  753,   66,   66,   66,  753,  441,  443,  753,
       66,   66,  444,   66,  753,   66,   66,   66,  446,  753,
       66,   66,   66,   66,   66,  753,  447,  753,   66,   66,
       66,   66,  753,  753,  753,   66,   66,   66,   66,  448,
       66,   66,  449,  753,  753,   66,   66,   66,   66,   66,
      753,  753,  753,   66,   66,   66,   66,  450,  753,  753,
       66,  753,  753,   66,  753,   66,   66,  452,  753,   66,
       66,   66,  753,  451,   66,   66,   66,   66,   66,  753,

       66,   66,   66,  753,  753,   66,   66,  454,  753,   66,
      455,   66,  458,  453,   66,   66,   66,  753,  459,   66,
       66,  753,  753,   66,  753,  753,  460,  457,  753,  753,
      461,   66,   66,  466,   66,   66,   66,   66,  462,   66,
       66,   66,   66,  753,   66,   66,   66,   66,   66,  753,
      753,   66,  753,   66,   66,  753,   66,   66,   66,   66,
       66,  753,  753,   66,  463,   66,   66,  753,   66,   66,
       66,   66,   66,  464,  753,   66,  753,   66,   66,  753,
       66,   66,   66,  465,  753,   66,   66,   66,  467,  753,
       66,   66,  753,  753,   66,   66,   66,  753,  468,   66,

      470,   66,  753,  753,   66,  471,  753,  753,   66,  753,
       66,   66,  753,  469,  753,  472,   66,  473,  753,   66,
      474,   66,   66,  753,  475,   66,   66,   66,  753,  753,
       66,   66,  753,  753,   66,  476,   66,   66,  478,   66,
      753,  477,   66,  753,   66,   66,  753,   66,   66,   66,
      753,  479,   66,   66,   66,  753,  753,   66,   66,   66,
       66,   66,  753,  480,  753,   66,  481,   66,   66,  753,
      482,   66,   66,  753,  753,   66,   66,  753,  753,   66,
       66,   66,  483,  753,   66,   66,   66,  753,  753,   66,
       66,  485,   66,   66,  753,   66,   66,   66,  753,  753,

       66,   66,  486,  484,   66,   66,  487,   66,   66,  753,
      753,  488,  753,   66,   66,  753,   66,  753,   66,   66,
      753,  489,  491,  753,   66,  490,  753,   66,   66,   66,
      753,  753,   66,   66,   66,  753,  492,   66,   66,   66,
       66,  493,  753,  753,  753,   66,  753,  753,   66,  495,
       66,   66,  494,  497,   66,   66,   66,  753,  753,   66,
       66,  753,  753,   66,   66,   66,  753,  496,   66,   66,
       66,  753,  753,   66,   66,  753,  753,   66,  753,   66,
       66,  499,  753,   66,   66,   66,  753,  498,   66,   66,
      753,  753,   66,  753,   66,   66,  500,  753,   66,   66,

       66,  753,  501,   66,   66,   66,   66,   66,  753,   66,
       66,   66,  753,  753,   66,   66,  753,  503,   66,  753,
      753,   66,   66,  753,  753,   66,   66,   66,  502,  504,
       66,   66,   66,   66,   66,  505,  506,  753,   66,   66,
       66,   66,  753,   66,   66,   66,  753,  753,   66,   66,
      753,  507,   66,   66,   66,  753,  753,  509,  753,   66,
      753,  508,   66,   66,   66,   66,   66,  753,  753,   66,
      753,   66,   66,  753,   66,  511,  510,   66,  512,   66,
       66,   66,   66,   66,  753,   66,   66,   66,   66,  753,
       66,   66,   66,   66,   66,  753,  753,   66,  753,  515,

       66,  514,   66,   66,   66,   66,   66,  516,  753,   66,
      753,   66,   66,  753,   66,   66,   66,   66,   66,   66,
       66,   66,  753,   66,   66,   66,   66,  753,   66,  753,
      518,  517,   66,   66,  753,  753,  753,  753,   66,   66,
       66,   66,  520,  521,  753,   66,   66,   66,   66,  753,
       66,   66,   66,  753,  523,   66,   66,  753,  522,   66,
       66,   66,   66,   66,   66,   66,   66,  753,   66,   66,
       66,   66,  753,   66,  524,   66,   66,  525,  753,   66,
       66,   66,  753,  753,   66,   66,   66,   66,   66,  528,
       66,   66,   66,  753,  753,   66,   66,  526,  753,   66,

       66,   66,   66,   66,   66,   66,   66,  753,   66,   66,
       66,   66,  753,   66,  529,   66,   66,   66,   66,  753,
      753,   66,  753,   66,   66,  530,   66,   66,   66,   66,
       66,   66,   66,   66,  753,   66,   66,   66,   66,  531,
       66,  532,  534,   66,  753,  533,  753,  753,   66,  753,
      753,   66,   66,   66,  535,  753,   66,   66,   66,  753,
      753,   66,   66,  753,  536,   66,   66,   66,   66,   66,
      753,  753,   66,  753,   66,   66,  537,   66,  753,   66,
       66,  753,  753,  539,  538,   66,   66,   66,   66,  540,
       66,   66,   66,  753,  753,  541,   66,   66,   66,   66,

      753,   66,   66,   66,  753,  753,  542,   66,  753,  543,
       66,   66,   66,  753,  753,   66,   66,   66,  753,  544,
       66,   66,   66,   66,   66,  753,   66,   66,   66,  753,
      546,   66,   66,  545,  753,   66,   66,   66,   66,   66,
      753,  549,  548,  753,   66,   66,  547,   66,   66,   66,
       66,   66,  753,  753,   66,  753,   66,   66,  753,   66,
      753,  551,   66,   66,  553,   66,  550,  753,   66,  753,
       66,   66,  753,   66,  753,   66,   66,   66,   66,  753,
      552,   66,  753,   66,   66,  554,   66,  753,   66,   66,
       66,   66,  556,  555,   66,  753,   66,   66,  557,   66,

       66,   66,   66,   66,  753,  753,   66,  753,   66,   66,
      753,   66,  753,   66,   66,  559,  753,  560,  558,   66,
       66,   66,   66,  753,  562,   66,   66,  753,  753,   66,
       66,  753,  561,   66,   66,   66,  753,  753,  753,  753,
       66,  753,  563,   66,   66,   66,   66,   66,  564,  753,
       66,  753,   66,   66,  753,   66,   66,   66,   66,   66,
      753,  753,   66,  753,   66,   66,  753,   66,  753,  565,
      753,   66,   66,   66,   66,  753,  566,   66,  753,   66,
       66,  753,   66,   66,   66,  753,  753,  567,  753,   66,
      753,  753,   66,   66,   66,  753,  568,   66,   66,   66,

      753,  570,   66,   66,  569,  753,   66,   66,   66,   66,
       66,  753,  753,   66,  753,   66,   66,  753,   66,   66,
       66,   66,   66,  571,  753,   66,  753,   66,   66,  753,
       66,   66,   66,  753,  572,   66,   66,   66,  753,  573,
       66,   66,   66,   66,   66,  753,   66,   66,   66,  574,
      753,   66,   66,   66,   66,   66,  753,  753,  753,   66,
       66,   66,   66,  576,   66,   66,   66,  753,  753,   66,
       66,   66,   66,   66,  753,  753,  753,   66,  753,  753,
       66,   66,   66,  753,  577,  579,  753,   66,   66,   66,
       66,  753,  580,   66,   66,  753,  753,   66,   66,   66,

       66,   66,  753,   66,   66,   66,  753,  753,   66,   66,
       66,   66,   66,  753,  582,   66,   66,  753,  753,   66,
       66,  753,  581,   66,   66,   66,   66,   66,  584,  753,
       66,  753,   66,   66,  753,   66,  753,  585,   66,   66,
       66,   66,  590,  753,   66,  753,   66,   66,  586,   66,
       66,   66,  753,  753,  589,   66,   66,  753,  587,   66,
       66,   66,   66,   66,  753,   66,   66,   66,  753,  753,
       66,   66,  753,  588,  591,   66,   66,  592,  753,   66,
       66,   66,  753,  753,   66,   66,   66,   66,  593,  753,
       66,   66,   66,  595,  753,   66,   66,   66,   66,   66,

      753,  596,  753,   66,   66,   66,   66,  753,  597,  594,
       66,   66,   66,   66,  753,  598,  753,   66,   66,   66,
       66,  753,   66,   66,   66,  753,  753,   66,   66,  753,
      753,   66,  600,   66,   66,  602,   66,  753,  599,   66,
      753,   66,   66,  753,   66,   66,   66,  753,  753,  753,
      753,   66,  601,  603,   66,   66,   66,  753,  753,  604,
      753,   66,   66,   66,   66,  753,  605,  753,   66,   66,
       66,   66,  753,  753,  753,   66,  753,  753,   66,   66,
       66,  753,  606,   66,   66,   66,  753,  753,   66,   66,
      753,  607,   66,   66,   66,   66,   66,   66,   66,   66,

      753,   66,   66,   66,  609,  608,   66,   66,   66,  753,
      611,  753,  753,   66,  753,  753,   66,   66,   66,  753,
      610,  753,  753,   66,  753,  753,   66,   66,   66,  753,
      612,   66,   66,   66,  753,  753,   66,   66,   66,   66,
       66,  753,  753,  613,   66,   66,   66,   66,  753,  753,
      615,   66,  753,  753,   66,  753,   66,   66,   66,   66,
      753,  614,   66,  753,  617,   66,  753,   66,   66,   66,
       66,   66,  620,   66,   66,  616,   66,   66,   66,   66,
      618,   66,  753,   66,   66,   66,   66,  621,  619,   66,
      753,   66,   66,  753,   66,  623,   66,  622,  753,  753,

      753,   66,  753,  753,   66,   66,   66,  624,  753,   66,
       66,   66,  625,  753,   66,   66,   66,   66,   66,  753,
      626,  753,   66,   66,   66,   66,  753,   66,   66,   66,
      753,  753,   66,   66,   66,   66,   66,  753,  628,  753,
       66,   66,   66,   66,  753,  753,  753,   66,  753,  753,
       66,   66,   66,  631,  753,   66,   66,   66,  753,  629,
       66,   66,   66,   66,   66,  753,  633,  753,   66,   66,
       66,   66,  753,  632,  753,   66,   66,   66,   66,  753,
       66,   66,   66,  753,  753,   66,   66,  753,  753,   66,
       66,   66,  753,  635,  636,  753,   66,   66,   66,   66,

      753,   66,   66,   66,  753,  753,   66,   66,   66,   66,
       66,  638,   66,   66,   66,  753,  753,   66,   66,  637,
      753,   66,   66,   66,  640,   66,  753,  753,   66,  753,
       66,   66,  753,   66,  641,   66,   66,  753,  753,  639,
      753,   66,  753,  753,   66,  642,   66,   66,  753,  643,
       66,   66,   66,  753,  753,   66,   66,   66,   66,   66,
      753,   66,   66,   66,  753,  753,   66,   66,  753,  644,
       66,   66,   66,   66,   66,  753,  753,   66,  753,   66,
       66,  753,   66,  753,  645,  753,   66,   66,  753,  753,
      647,  753,   66,  753,  646,   66,   66,   66,   66,   66,

       66,   66,   66,  753,   66,   66,   66,   66,  753,   66,
      649,  753,  648,   66,   66,  650,  753,   66,   66,   66,
      753,  753,   66,   66,  753,  753,   66,  753,   66,   66,
       66,   66,  753,  651,   66,  753,   66,   66,  753,   66,
      655,   66,   66,  653,  652,   66,   66,   66,  654,  753,
       66,   66,  753,  753,   66,  656,   66,   66,  753,  657,
       66,   66,   66,  753,  753,   66,   66,   66,   66,   66,
      659,   66,   66,   66,  753,  753,   66,   66,  753,  658,
       66,   66,   66,   66,   66,  753,  753,   66,  753,   66,
       66,  660,   66,   66,   66,   66,   66,   66,   66,   66,

      753,   66,   66,   66,   66,  753,   66,  662,   66,   66,
      663,  661,   66,   66,   66,  753,  753,   66,   66,  753,
      753,   66,  753,   66,   66,  753,  753,  753,  664,   66,
       66,   66,   66,  665,   66,   66,  666,  753,  753,   66,
       66,   66,   66,   66,  753,   66,   66,   66,  753,  753,
       66,   66,   66,   66,   66,  753,   66,   66,   66,  667,
      753,   66,   66,   66,   66,   66,  753,   66,   66,   66,
      753,  753,   66,   66,   66,   66,   66,  753,   66,   66,
       66,  753,  753,   66,   66,  669,  753,   66,   66,   66,
      753,  672,  753,  670,   66,   66,   66,   66,  753,   66,

       66,   66,  753,  753,   66,   66,   66,   66,   66,  753,
      674,  753,   66,   66,   66,   66,  673,   66,   66,   66,
      753,  753,   66,   66,   66,   66,   66,  753,   66,   66,
       66,  753,  753,  676,   66,  675,  753,  677,   66,   66,
      679,   66,   66,   66,   66,  753,   66,  678,   66,   66,
      753,   66,   66,   66,   66,   66,  753,  753,   66,  753,
       66,   66,  753,   66,   66,   66,   66,   66,  680,  753,
       66,  753,   66,   66,  753,   66,   66,   66,   66,   66,
      681,  753,   66,  753,   66,   66,  753,   66,   66,   66,
       66,   66,  753,  753,   66,  753,   66,   66,  753,   66,

       66,   66,  683,  753,  753,  682,   66,  753,  753,   66,
       66,   66,  753,  684,   66,   66,   66,  753,  753,  685,
       66,   66,   66,  686,  753,   66,   66,   66,  753,  753,
      687,   66,   66,   66,   66,  753,  753,  753,   66,   66,
       66,   66,  688,   66,   66,  689,  753,  753,   66,   66,
      690,  753,   66,  691,   66,   66,   66,   66,   66,   66,
      753,   66,   66,   66,   66,  753,   66,   66,   66,  753,
      753,  692,  753,   66,  753,  693,   66,   66,   66,  753,
      694,  695,  753,   66,   66,   66,   66,  753,   66,   66,
       66,  753,  753,   66,   66,   66,   66,   66,  753,   66,

       66,   66,  753,  698,   66,   66,   66,   66,   66,  753,
      753,  697,   66,   66,   66,   66,  753,  753,  753,   66,
       66,   66,   66,  753,  753,  699,   66,  753,  700,   66,
       66,   66,  753,  753,  701,  753,   66,   66,   66,   66,
      753,  702,  753,   66,   66,   66,   66,  753,  703,  753,
       66,   66,  704,   66,  753,   66,   66,   66,  753,  753,
       66,   66,   66,   66,   66,  753,   66,   66,   66,  753,
      753,   66,   66,  753,  753,   66,  705,   66,   66,   66,
       66,  753,  753,   66,  706,   66,   66,  753,   66,   66,
       66,  753,  753,  707,  753,   66,   66,   66,   66,  753,

      708,  753,   66,   66,   66,   66,  753,  709,  753,   66,
       66,   66,   66,  753,  710,  753,   66,   66,   66,   66,
      753,   66,   66,   66,  753,  753,   66,   66,   66,   66,
       66,  753,   66,   66,   66,  753,  753,   66,   66,   66,
       66,   66,  753,   66,   66,   66,  711,  753,   66,   66,
       66,   66,   66,  753,  753,  712,   66,   66,   66,   66,
      753,  714,  753,   66,  713,  753,   66,   66,   66,  715,
       66,   66,   66,   66,  753,   66,   66,   66,   66,  753,
       66,   66,   66,  753,  716,   66,   66,   66,  753,  753,
       66,   66,   66,   66,   66,  753,   66,   66,   66,  753,

      753,   66,   66,  753,  717,   66,  720,  753,  718,  753,
       66,   66,  721,  722,  753,  719,   66,   66,   66,   66,
      753,  753,  723,   66,   66,   66,   66,  753,   66,   66,
       66,  753,  753,   66,   66,   66,   66,   66,  753,   66,
       66,   66,  753,  753,   66,   66,  753,  724,   66,  753,
      753,  725,  753,  753,   66,   66,   66,   66,  726,  727,
       66,  753,   66,   66,  753,   66,   66,   66,   66,   66,
      729,  753,   66,  728,   66,   66,  753,   66,  730,   66,
      731,   66,   66,   66,   66,   66,  753,   66,   66,   66,
       66,  753,   66,  732,   66,   66,   66,   66,  753,  753,

       66,  753,   66,   66,  753,   66,   66,   66,   66,   66,
      733,  753,   66,  753,   66,   66,  753,   66,  753,   66,
       66,  753,  734,  735,  753,   66,   66,   66,   66,  753,
       66,   66,   66,  753,  753,   66,   66,   66,   66,   66,
      753,   66,   66,   66,  753,  753,   66,   66,   66,   66,
       66,  753,  736,  753,   66,   66,   66,   66,  753,   66,
       66,   66,  753,  753,   66,   66,   66,   66,   66,  753,
      739,  737,   66,   66,   66,   66,  753,  738,  753,   66,
       66,   66,   66,  740,   66,   66,   66,  753,  753,   66,
       66,   66,   66,   66,  753,   66,   66,   66,  753,  753,

       66,   66,   66,   66,   66,  753,  753,  753,   66,  753,
      741,   66,  743,   66,   66,  742,  753,  744,  753,   66,
       66,   66,   66,  753,   66,   66,   66,  753,  745,   66,
       66,  753,  753,   66,  753,   66,   66,   66,   66,  747,
      746,   66,  753,   66,   66,  753,   66,   66,   66,  753,
      753,   66,   66,   66,  753,  748,   66,   66,   66,   66,
       66,  753,   66,   66,   66,  753,  753,   66,   66,  753,
      753,   66,   66,   66,  753,  749,   66,   66,   66,  753,
      753,   66,   66,  753,  753,   66,   66,   66,  750,  753,
       66,   66,   66,  753,  753,   66,   66,   66,   66,   66,

      753,  752,  751,   66,   66,   66,   66,  753,   66,   66,
       66,  753,  753,   66,   66,  753,  753,   66,   58,  753,
       58,   66,   66,   57,   57,   57,  137,  137,  137,  137,
      137,  135,  135,  135,  135,  135,    3,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753
    } ;

static yyconst flex_int16_t yy_chk[4904] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,   18,   20,    5,
        8,   55,   18,   58,   55,   67,  134,    8,  755,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
      668,  634,   58,   67,  134,  627,   20,  583,   62,    8,

      193,  193,    8,   19,   19,   19,   19,   19,   19,   19,
       19,   26,  578,   26,   26,   26,   33,   30,   19,   30,
       30,   30,   33,   33,   26,   33,   62,  575,   33,   40,
       30,  193,   34,   26,  527,   40,   40,  519,   40,   30,
      513,   40,  158,  158,  158,  158,   19,   31,   34,   31,
       31,   31,   34,   45,   45,   32,  456,   31,   34,  445,
       31,  438,   45,  382,   45,  369,  361,   34,   45,   31,
       45,   32,   32,   31,  288,   32,  282,   31,   32,   32,
       35,   32,   43,   31,   32,  277,   43,  215,   43,   43,
       32,   43,   31,   36,   43,   43,   35,  149,  149,  149,

       35,   35,   43,  198,  149,   37,   35,  149,   35,   36,
      135,   57,   56,   36,   35,   35,   38,   39,   35,   36,
       36,   37,   25,   23,    6,   37,   36,    3,   36,   37,
        0,   37,   38,   39,    0,   38,   38,   39,    0,    0,
       37,    0,   38,   39,   38,    0,   46,   41,   41,   41,
        0,   38,   39,   41,   41,    0,   41,   41,    0,   41,
       42,   42,   46,    0,    0,   41,   46,   42,   42,    0,
       42,    0,   46,   42,   44,    0,   44,   44,    0,   46,
       48,   46,   44,    0,   44,   44,    0,   44,   44,    0,
       44,   44,   50,   44,   47,    0,   48,    0,   50,   50,

       48,   50,  150,  150,   50,    0,   48,    0,  150,    0,
       47,  150,   48,   47,   47,   48,    0,   47,    0,    0,
       47,   49,   49,   49,   47,    0,    0,   47,   47,   47,
        0,   49,    0,   49,    0,    0,    0,   49,    0,   49,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,    0,   61,  148,  148,    0,   66,    0,    0,  148,
        0,  148,  148,    0,   61,   61,   61,   61,   61,    0,
       66,   70,   61,    0,   61,   61,   66,   66,    0,   66,
        0,    0,   66,    0,    0,   70,    0,  151,  151,  151,
        0,   70,   70,  151,   70,   68,  151,   70,    0,    0,

       68,   70,   61,   61,   61,   61,   63,   63,   63,   63,
       63,   63,   63,   63,   68,  216,  216,  216,  216,   63,
       68,   68,   69,   68,    0,    0,   68,   63,   63,   63,
       63,   63,   63,   71,   84,   68,   69,  218,  218,  218,
      218,   72,   69,   69,    0,   69,    0,   71,   69,   84,
       84,   69,    0,   71,   71,   72,   71,   73,   84,   71,
       84,   72,   72,    0,   72,    0,   84,   72,    0,    0,
       74,   73,   72,    0,    0,    0,    0,   73,   73,    0,
       73,    0,   74,   73,   74,   75,   73,    0,  154,  154,
       74,   74,  154,   74,  154,   76,   74,  154,    0,   75,

       74,    0,    0,   77,   75,   75,   75,    0,   75,   76,
       75,   75,    0,    0,    0,   76,   76,   77,   76,   78,
        0,   76,   78,   77,   77,    0,   77,   79,    0,   77,
       79,  153,  153,  153,    0,   78,    0,  153,    0,   78,
      153,   80,    0,   79,   80,   78,    0,   79,    0,   81,
        0,    0,   81,   79,   78,    0,    0,   80,    0,   79,
        0,   80,   79,   82,    0,   81,   82,   80,    0,   81,
        0,  163,  163,   85,   80,   81,   80,  163,    0,   82,
      163,   81,    0,   82,   81,    0,    0,   85,   83,   82,
       83,   83,   83,   85,   85,    0,   85,   86,   82,   85,

       87,   83,    0,    0,   88,  118,    0,  118,  118,  118,
       83,    0,   86,   86,    0,   87,   87,   89,  118,   88,
       88,   86,    0,   86,   87,    0,   87,  118,   88,   86,
       88,   89,   87,    0,    0,   88,   88,   89,   89,   90,
       89,   91,   90,   89,   91,    0,   92,    0,  118,   92,
        0,    0,    0,    0,    0,   90,    0,   91,    0,   90,
        0,   91,   92,    0,   93,   90,   92,   91,   94,    0,
        0,    0,   92,    0,   90,    0,   91,   91,   93,   95,
        0,   92,   94,    0,   93,   93,    0,   93,   94,   94,
       93,   94,   96,   95,   94,   96,    0,    0,    0,   95,

       95,    0,   95,    0,   94,   95,   95,   99,   96,    0,
       97,    0,   96,   97,    0,    0,    0,    0,   96,  156,
      156,   98,   99,   99,   98,  156,   97,   96,  156,  156,
       97,   99,    0,   99,  100,  101,   97,   98,  101,   99,
        0,   98,    0,   97,    0,   97,    0,   98,    0,  100,
      100,  101,    0,    0,    0,  101,   98,    0,  100,  102,
      100,  101,  102,    0,  103,    0,  100,  103,  160,  160,
      101,    0,  160,    0,  160,  102,    0,  160,    0,  102,
      103,    0,    0,    0,  103,  102,  104,  102,  105,  104,
      103,  105,  103,    0,  102,    0,  103,    0,    0,  103,

      106,    0,  104,  106,  105,    0,  104,  104,  105,  161,
      161,  108,  104,  161,  105,  161,  106,    0,  161,    0,
      106,  104,  105,  105,  107,  108,  106,  107,  106,    0,
        0,  108,  108,    0,  108,  106,  109,  108,    0,  110,
      107,    0,    0,    0,  107,  117,    0,  117,  117,  117,
      107,  109,  109,    0,  110,  110,  107,  111,  117,  107,
      109,  113,  109,  110,  112,  110,    0,  117,  109,    0,
      117,  110,  111,  111,    0,    0,  113,  113,  113,  112,
      112,  111,  114,  111,    0,  113,  112,  113,  112,  111,
      112,    0,    0,  113,  115,    0,  112,  114,  114,    0,

        0,  116,    0,    0,  114,    0,  114,    0,  114,  115,
      115,    0,  115,    0,  114,    0,  116,  116,  115,  119,
      115,  120,  119,    0,  120,  116,  115,  116,  116,    0,
        0,    0,    0,  116,    0,  119,    0,  120,    0,  119,
      140,  120,  140,  140,  140,  119,  121,  120,  121,  121,
      121,  121,  121,  140,  119,  120,  120,  122,  123,  121,
      124,  123,  140,  124,    0,  140,    0,    0,  121,    0,
        0,    0,  122,  122,  123,    0,  124,    0,  123,    0,
      124,  122,  125,  122,  123,  125,  124,    0,    0,  122,
        0,    0,    0,  123,  126,  124,  127,  126,  125,  127,

        0,    0,  125,    0,    0,    0,    0,  125,  125,  129,
      126,    0,  127,    0,  126,    0,  127,  125,  128,  126,
      126,  128,  127,  131,  129,  129,  131,    0,    0,  126,
      130,  127,    0,  129,  128,  129,    0,    0,  128,  131,
      131,  129,    0,  131,  128,  130,  130,  132,  130,  131,
      132,  157,  157,  128,  130,  145,  130,  157,  131,    0,
      157,    0,  130,  132,  169,  169,  169,  132,  157,  145,
        0,  169,    0,  132,  169,  145,  145,  132,  145,    0,
        0,  145,  132,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,    0,  137,    0,    0,    0,  141,

        0,  141,  141,  141,  142,    0,    0,  137,  137,  137,
      137,  137,  141,    0,    0,  137,    0,  137,  137,  142,
      142,  141,    0,    0,  141,  162,  162,  143,  142,    0,
      142,  162,    0,  162,  162,    0,  142,    0,    0,  144,
        0,  146,  143,  143,  146,  137,  137,  137,  137,  143,
        0,  143,    0,  143,  144,  144,    0,  146,  144,  143,
        0,  146,    0,  144,    0,  144,  147,  146,    0,  147,
        0,  144,  152,  152,    0,    0,  146,    0,  152,    0,
        0,  152,  147,  147,    0,    0,  147,    0,  147,    0,
      152,  147,  147,  155,  155,    0,    0,  159,  159,  155,

        0,  147,  155,  159,    0,    0,  159,    0,  164,  164,
        0,  155,    0,  159,  164,    0,    0,  164,  164,  165,
      165,    0,  165,  166,  166,  165,    0,  166,  165,  166,
      167,  167,  166,    0,  168,  168,  167,    0,    0,  167,
      168,  170,  170,  168,  170,    0,    0,  170,  167,    0,
      170,  168,  171,  171,  172,  172,  173,  173,  171,    0,
      172,  171,  173,  172,    0,  173,  174,  174,  175,  175,
      174,    0,  174,    0,  175,  174,    0,  175,  176,  176,
        0,  176,  177,  177,  176,    0,  175,  176,  177,  178,
      178,  177,    0,  178,    0,  178,  179,  179,  178,    0,

        0,  177,  179,  180,  180,  179,  178,  179,    0,  180,
        0,    0,  180,    0,  181,  181,  181,    0,    0,    0,
      180,  181,  182,  182,  181,    0,  182,    0,  182,  183,
      183,  182,    0,  184,  184,  183,    0,  184,  183,  184,
      185,  185,  184,    0,    0,    0,  185,  183,    0,  185,
      186,  186,    0,    0,    0,  186,  186,    0,    0,  186,
      187,  187,  187,  188,  188,    0,  187,  187,    0,  188,
      187,    0,  188,  189,  189,    0,    0,  191,    0,  189,
      188,    0,  189,  190,  190,    0,    0,    0,  190,  190,
        0,  189,  190,  191,  191,  191,  192,  192,    0,    0,

      191,  191,  192,  191,  192,  192,  194,  194,    0,  194,
      195,  195,  194,    0,  195,  194,  195,    0,    0,  195,
      196,  196,    0,  194,  197,  197,  196,  202,  202,  196,
      197,  199,  199,  197,    0,  200,  200,  199,    0,    0,
      199,  200,  201,  201,  200,  205,  202,  202,  201,    0,
        0,  201,  202,  203,  203,  202,    0,  204,  204,  203,
        0,  201,  203,  204,    0,    0,  204,    0,  205,  205,
      205,  203,    0,    0,  205,  205,    0,  204,  205,  206,
      206,    0,    0,    0,    0,  206,  205,  206,  206,  207,
      207,  208,  208,    0,  207,  207,    0,  208,  207,    0,

      208,    0,  209,  209,  210,  210,    0,  208,  209,  208,
      210,  209,    0,  210,  211,  211,  211,  210,    0,  209,
        0,  211,  212,  212,  211,    0,  213,  213,  212,    0,
        0,  212,  213,    0,    0,  213,  214,  214,  214,  217,
      217,    0,  213,  214,    0,  217,  214,    0,  217,  219,
      219,    0,    0,  220,  220,  219,    0,    0,  219,  220,
      220,  217,  220,  221,  221,    0,    0,  221,    0,  221,
        0,  219,  221,  222,  222,    0,  223,  223,  223,  222,
        0,  223,  222,  223,    0,  222,  223,  224,  224,    0,
        0,  225,  225,  224,    0,    0,  224,  225,  224,    0,

      225,    0,  226,  226,    0,    0,    0,    0,  226,    0,
      225,  226,  226,  227,  227,    0,    0,  228,  228,  227,
        0,  228,  227,  228,  229,  229,  228,    0,    0,  227,
      229,  230,  230,  229,    0,  230,    0,  230,  231,  231,
      230,  232,  232,  232,  231,    0,    0,  231,  232,    0,
      232,  232,  232,    0,  233,  233,    0,    0,  234,  234,
      233,    0,  232,  233,  234,  235,  235,  234,    0,  236,
      236,  235,    0,  235,  235,  236,  237,  237,  236,    0,
      237,    0,  237,    0,    0,  237,    0,  242,  242,  243,
      243,    0,  236,  242,    0,  243,  242,    0,  243,    0,

      244,  244,  245,  245,    0,  243,  244,    0,  245,  244,
      242,  245,  245,    0,  244,  246,  246,  246,    0,    0,
      247,  247,  246,    0,  247,  246,  247,    0,    0,  247,
      248,  248,  248,    0,  249,  249,  248,    0,    0,  248,
      249,  250,  250,  249,    0,  251,  251,  250,    0,    0,
      250,  251,  252,  252,  251,    0,    0,  250,  252,  253,
      253,  252,    0,  254,  254,  253,    0,    0,  253,  254,
        0,  254,  254,  255,  255,  256,  256,  257,  257,  255,
        0,  256,  255,  257,  256,    0,  257,    0,  258,  258,
      259,  259,  258,  256,  258,    0,  259,  258,    0,  259,

      260,  260,  261,  261,  260,    0,  260,    0,  261,  260,
        0,  261,  262,  262,  263,  263,    0,    0,  262,    0,
      263,  262,  263,  263,  264,  264,  265,  265,  262,    0,
      264,    0,  265,  264,    0,  265,  266,  266,    0,    0,
      267,  267,  266,    0,    0,  266,  267,  265,  267,  267,
      268,  268,    0,  266,    0,    0,  268,    0,  268,  268,
      269,  269,  270,  270,  269,    0,  269,    0,  270,  269,
      270,  270,  271,  271,  272,  272,  274,  274,  271,  272,
      272,  271,    0,  272,  273,  273,    0,  273,  278,  278,
      273,    0,    0,  273,  278,  274,  274,  278,    0,    0,

        0,  274,  279,  279,  274,    0,    0,  278,  279,    0,
      279,  279,  280,  280,  281,  281,  283,  283,  280,    0,
      281,  280,  283,  281,    0,  283,    0,    0,  280,  284,
      284,    0,  283,  285,  285,  284,    0,    0,  284,  285,
      286,  286,  285,    0,  287,  287,  286,    0,  287,  286,
      287,  289,  289,  287,    0,  290,  290,  289,  286,  289,
      289,  290,    0,  290,  290,  291,  291,    0,  289,  292,
      292,  291,    0,  291,  291,  292,  293,  293,  292,    0,
      294,  294,  293,    0,  293,  293,  294,  292,    0,  294,
        0,  295,  295,  299,    0,  296,  296,  295,  294,  295,

      295,  296,  297,  297,  296,    0,  298,  298,  297,  298,
        0,  297,  298,  296,    0,  298,  305,  299,  299,  305,
      297,  300,  300,  299,    0,    0,  299,  300,  310,    0,
      300,  310,  300,    0,  305,  305,  312,  312,  311,    0,
      305,    0,  312,  305,    0,  312,  310,  310,    0,    0,
        0,    0,  310,    0,    0,  310,  311,  311,    0,  312,
      313,  313,  311,    0,    0,  311,  313,  314,  314,  313,
        0,  313,    0,  314,    0,    0,  314,  315,  315,    0,
      314,  314,    0,  315,  314,    0,  315,  315,  316,  316,
        0,  317,  317,  317,  316,    0,    0,  316,  317,    0,

      316,  317,  318,  318,  319,  319,  320,  320,  318,    0,
      319,  318,  320,  319,    0,  320,  321,  321,  322,  322,
      318,    0,  321,    0,  322,  321,    0,  322,    0,  320,
      322,  323,  323,    0,    0,  324,  324,  323,    0,  321,
      323,  324,    0,  323,  324,  325,  325,    0,  325,  326,
      326,  325,  324,    0,  325,  326,  327,  327,  326,    0,
      326,    0,  327,    0,    0,  327,  328,  328,    0,  327,
      328,    0,  328,  329,  329,  328,    0,  330,  330,  329,
        0,    0,  329,  330,    0,    0,  330,    0,    0,  330,
      329,  331,  331,  331,    0,  332,  332,  332,  331,    0,

        0,  331,  332,  333,  333,  332,    0,  334,  334,  333,
        0,    0,  333,  334,  335,  335,  334,  333,    0,  334,
      335,  336,  336,  335,    0,    0,    0,  336,    0,    0,
      336,    0,  335,  337,  337,  337,    0,  338,  338,  337,
        0,    0,  337,  338,  336,    0,  338,    0,  339,  339,
      340,  340,  340,  338,  339,    0,  340,  339,    0,  340,
      341,  341,  342,  342,  341,    0,  341,    0,  342,  341,
        0,  342,  343,  343,  344,  344,  344,    0,  343,    0,
      344,  343,    0,  344,    0,  343,  345,  345,  346,  346,
        0,    0,  345,    0,  346,  345,  345,  346,  347,  347,

        0,    0,  347,    0,  347,    0,  346,  347,  348,  348,
      349,  349,    0,    0,  348,    0,  349,  348,    0,  349,
      350,  350,  350,    0,    0,  351,  351,  350,  349,  351,
      350,  351,  352,  352,  351,    0,    0,    0,  352,  353,
      353,  352,  352,    0,    0,  353,    0,    0,  353,  354,
      354,  354,    0,  355,  355,  354,    0,    0,  354,  355,
      356,  356,  355,  355,  357,  357,  356,    0,  359,  356,
      357,  356,  357,  357,  358,  358,  358,  360,    0,    0,
        0,  358,    0,    0,  358,  359,  359,    0,    0,  362,
      362,  359,    0,    0,  359,  362,  360,  360,  362,    0,

      363,  363,  360,    0,    0,  360,  363,  364,  364,  363,
        0,    0,  363,  364,  366,  366,  364,    0,  366,    0,
      366,    0,    0,  366,  367,  367,    0,  364,  367,    0,
      367,  368,  368,  367,    0,  370,  370,  368,  370,    0,
      368,  370,  371,  371,  370,    0,  371,    0,  371,  372,
      372,  371,    0,    0,    0,  372,  373,  373,  372,  372,
      374,  374,  373,    0,    0,  373,  374,  375,  375,  374,
        0,    0,    0,  375,  376,  376,  375,  375,    0,    0,
      376,    0,    0,  376,    0,  377,  377,  377,    0,  378,
      378,  377,    0,  376,  377,  378,  379,  379,  378,    0,

      380,  380,  379,    0,    0,  379,  380,  380,    0,  380,
      381,  381,  384,  378,  383,  383,  381,    0,  385,  381,
      383,    0,    0,  383,    0,    0,  386,  383,    0,    0,
      387,  384,  384,  392,  392,  385,  385,  384,  388,  392,
      384,  385,  392,    0,  385,  386,  386,  387,  387,    0,
        0,  386,    0,  387,  386,    0,  387,  388,  388,  389,
      389,    0,    0,  388,  389,  389,  388,    0,  389,  390,
      390,  391,  391,  390,    0,  390,    0,  391,  390,    0,
      391,  393,  393,  391,    0,  394,  394,  393,  393,    0,
      393,  394,    0,    0,  394,  395,  395,    0,  394,  396,

      396,  395,    0,    0,  395,  396,    0,    0,  396,    0,
      397,  397,    0,  395,    0,  396,  397,  397,    0,  397,
      398,  398,  398,    0,  399,  399,  399,  398,    0,    0,
      398,  399,    0,    0,  399,  400,  400,  400,  401,  401,
        0,  400,  400,    0,  401,  400,    0,  401,  402,  402,
        0,  402,  403,  403,  402,    0,    0,  402,  403,  404,
      404,  403,    0,  404,    0,  404,  405,  405,  404,    0,
      406,  406,  405,    0,    0,  405,  406,    0,    0,  406,
      407,  407,  407,    0,  408,  408,  407,    0,    0,  407,
      408,  409,  409,  408,    0,  410,  410,  409,    0,    0,

      409,  410,  410,  408,  410,  411,  411,  412,  412,    0,
        0,  411,    0,  412,  411,    0,  412,    0,  413,  413,
        0,  411,  413,    0,  413,  412,    0,  413,  414,  414,
        0,    0,  415,  415,  414,    0,  414,  414,  415,  416,
      416,  415,    0,    0,    0,  416,    0,    0,  416,  417,
      417,  417,  416,  418,  418,  418,  417,    0,    0,  417,
      418,    0,    0,  418,  419,  419,    0,  417,  420,  420,
      419,    0,    0,  419,  420,    0,    0,  420,    0,  421,
      421,  420,    0,  422,  422,  421,    0,  419,  421,  422,
        0,    0,  422,    0,  423,  423,  421,    0,  424,  424,

      423,    0,  422,  423,  424,  425,  425,  424,    0,  426,
      426,  425,    0,    0,  425,  426,    0,  426,  426,    0,
        0,  427,  427,    0,    0,  428,  428,  427,  425,  427,
      427,  428,  429,  429,  428,  428,  429,    0,  429,  430,
      430,  429,    0,  431,  431,  430,    0,    0,  430,  431,
        0,  430,  431,  432,  432,    0,    0,  432,    0,  432,
        0,  431,  432,  433,  433,  434,  434,    0,    0,  433,
        0,  434,  433,    0,  434,  434,  433,  435,  435,  436,
      436,  437,  437,  435,    0,  436,  435,  437,  436,    0,
      437,  439,  439,  440,  440,    0,    0,  439,    0,  440,

      439,  439,  440,  441,  441,  442,  442,  441,    0,  441,
        0,  442,  441,    0,  442,  443,  443,  444,  444,  446,
      446,  443,    0,  444,  443,  446,  444,    0,  446,    0,
      444,  443,  447,  447,    0,    0,    0,    0,  447,  448,
      448,  447,  447,  448,    0,  448,  449,  449,  448,    0,
      450,  450,  449,    0,  450,  449,  450,    0,  449,  450,
      451,  451,  452,  452,  453,  453,  451,    0,  452,  451,
      453,  452,    0,  453,  451,  454,  454,  453,    0,  455,
      455,  454,    0,    0,  454,  455,  457,  457,  455,  457,
      458,  458,  457,    0,    0,  457,  458,  455,    0,  458,

      459,  459,  460,  460,  461,  461,  459,    0,  460,  459,
      461,  460,    0,  461,  462,  462,  462,  463,  463,    0,
        0,  462,    0,  463,  462,  463,  463,  464,  464,  466,
      466,  465,  465,  464,    0,  466,  464,  465,  466,  464,
      465,  465,  467,  467,    0,  466,    0,    0,  467,    0,
        0,  467,  468,  468,  468,    0,  469,  469,  468,    0,
        0,  468,  469,    0,  469,  469,  470,  470,  471,  471,
        0,    0,  470,    0,  471,  470,  470,  471,    0,  472,
      472,    0,    0,  472,  471,  472,  474,  474,  472,  473,
      473,  473,  474,    0,    0,  474,  473,  475,  475,  473,

        0,  476,  476,  475,    0,    0,  475,  476,    0,  476,
      476,  477,  477,    0,    0,  478,  478,  477,    0,  477,
      477,  478,  479,  479,  478,    0,  480,  480,  479,    0,
      479,  479,  480,  478,    0,  480,  481,  481,  482,  482,
        0,  482,  481,    0,  482,  481,  480,  482,  483,  483,
      484,  484,    0,    0,  483,    0,  484,  483,    0,  484,
        0,  484,  485,  485,  486,  486,  483,    0,  485,    0,
      486,  485,    0,  486,    0,  487,  487,  488,  488,    0,
      485,  487,    0,  488,  487,  487,  488,    0,  489,  489,
      490,  490,  489,  488,  489,    0,  490,  489,  490,  490,

      491,  491,  492,  492,    0,    0,  491,    0,  492,  491,
        0,  492,    0,  493,  493,  492,    0,  493,  491,  493,
      494,  494,  493,    0,  495,  495,  494,    0,    0,  494,
      495,    0,  494,  495,  496,  496,    0,    0,    0,    0,
      496,    0,  496,  496,  497,  497,  498,  498,  497,    0,
      497,    0,  498,  497,    0,  498,  499,  499,  500,  500,
        0,    0,  499,    0,  500,  499,    0,  500,    0,  499,
        0,  501,  501,  502,  502,    0,  500,  501,    0,  502,
      501,    0,  502,  503,  503,    0,    0,  501,    0,  503,
        0,    0,  503,  504,  504,    0,  503,  505,  505,  504,

        0,  505,  504,  505,  504,    0,  505,  506,  506,  507,
      507,    0,    0,  506,    0,  507,  506,    0,  507,  508,
      508,  509,  509,  508,    0,  508,    0,  509,  508,    0,
      509,  510,  510,    0,  510,  511,  511,  510,    0,  511,
      510,  511,  512,  512,  511,    0,  514,  514,  512,  512,
        0,  512,  514,  515,  515,  514,    0,    0,    0,  515,
      516,  516,  515,  515,  517,  517,  516,    0,    0,  516,
      517,  518,  518,  517,    0,    0,    0,  518,    0,    0,
      518,  520,  520,    0,  518,  520,    0,  520,  521,  521,
      520,    0,  522,  522,  521,    0,    0,  521,  522,  523,

      523,  522,    0,  524,  524,  523,    0,    0,  523,  524,
      525,  525,  524,    0,  526,  526,  525,    0,    0,  525,
      526,    0,  525,  526,  528,  528,  529,  529,  528,    0,
      528,    0,  529,  528,    0,  529,    0,  529,  530,  530,
      531,  531,  534,    0,  530,    0,  531,  530,  530,  531,
      532,  532,    0,    0,  533,  533,  532,    0,  531,  532,
      533,  534,  534,  533,    0,  535,  535,  534,    0,    0,
      534,  535,    0,  532,  535,  536,  536,  536,    0,  537,
      537,  536,    0,    0,  536,  537,  538,  538,  537,    0,
      539,  539,  538,  539,    0,  538,  539,  540,  540,  539,

        0,  540,    0,  540,  541,  541,  540,    0,  541,  538,
      541,  542,  542,  541,    0,  542,    0,  542,  543,  543,
      542,    0,  544,  544,  543,    0,    0,  543,  544,    0,
        0,  544,  544,  545,  545,  546,  546,    0,  543,  545,
        0,  546,  545,    0,  546,  547,  547,    0,    0,    0,
        0,  547,  545,  547,  547,  548,  548,    0,    0,  548,
        0,  548,  549,  549,  548,    0,  549,    0,  549,  550,
      550,  549,    0,    0,    0,  550,    0,    0,  550,  551,
      551,    0,  550,  552,  552,  551,    0,    0,  551,  552,
        0,  552,  552,  553,  553,  554,  554,  555,  555,  553,

        0,  554,  553,  555,  554,  553,  555,  556,  556,    0,
      556,    0,    0,  556,    0,    0,  556,  557,  557,    0,
      555,    0,    0,  557,    0,    0,  557,  558,  558,    0,
      557,  559,  559,  558,    0,    0,  558,  559,  560,  560,
      559,    0,    0,  559,  560,  561,  561,  560,    0,    0,
      561,  561,    0,    0,  561,    0,  562,  562,  563,  563,
        0,  560,  562,    0,  563,  562,    0,  563,  564,  564,
      565,  565,  566,  566,  564,  562,  565,  564,  566,  565,
      564,  566,    0,  567,  567,  568,  568,  567,  565,  567,
        0,  568,  567,    0,  568,  569,  569,  568,    0,    0,

        0,  569,    0,    0,  569,  570,  570,  570,    0,  571,
      571,  570,  571,    0,  570,  571,  572,  572,  571,    0,
      572,    0,  572,  573,  573,  572,    0,  574,  574,  573,
        0,    0,  573,  574,  576,  576,  574,    0,  576,    0,
      576,  577,  577,  576,    0,    0,    0,  577,    0,    0,
      577,  579,  579,  579,    0,  580,  580,  579,    0,  577,
      579,  580,  581,  581,  580,    0,  581,    0,  581,  582,
      582,  581,    0,  580,    0,  582,  584,  584,  582,    0,
      585,  585,  584,    0,    0,  584,  585,    0,    0,  585,
      586,  586,    0,  585,  586,    0,  586,  587,  587,  586,

        0,  588,  588,  587,    0,    0,  587,  588,  589,  589,
      588,  590,  590,  590,  589,    0,    0,  589,  590,  589,
        0,  590,  591,  591,  592,  592,    0,    0,  591,    0,
      592,  591,    0,  592,  593,  593,  593,    0,    0,  591,
        0,  593,    0,    0,  593,  594,  594,  594,    0,  595,
      595,  595,  594,    0,    0,  594,  595,  596,  596,  595,
        0,  597,  597,  596,    0,    0,  596,  597,    0,  596,
      597,  598,  598,  599,  599,    0,    0,  598,    0,  599,
      598,    0,  599,    0,  597,    0,  600,  600,    0,    0,
      600,    0,  600,    0,  598,  600,  601,  601,  602,  602,

      604,  604,  601,    0,  602,  601,  604,  602,    0,  604,
      602,    0,  601,  603,  603,  603,    0,  605,  605,  603,
        0,    0,  603,  605,    0,    0,  605,    0,  606,  606,
      607,  607,    0,  605,  606,    0,  607,  606,    0,  607,
      609,  609,  609,  607,  606,  608,  608,  609,  608,    0,
      609,  608,    0,    0,  608,  610,  610,  610,    0,  611,
      611,  611,  610,    0,    0,  610,  611,  612,  612,  611,
      613,  613,  613,  612,    0,    0,  612,  613,    0,  612,
      613,  614,  614,  615,  615,    0,    0,  614,    0,  615,
      614,  615,  615,  616,  616,  617,  617,  619,  619,  616,

        0,  617,  616,  619,  617,    0,  619,  617,  618,  618,
      618,  616,  620,  620,  618,    0,    0,  618,  620,    0,
        0,  620,    0,  621,  621,    0,    0,    0,  620,  621,
      623,  623,  621,  622,  622,  622,  623,    0,    0,  623,
      622,  624,  624,  622,    0,  625,  625,  624,    0,    0,
      624,  625,  626,  626,  625,    0,  628,  628,  626,  624,
        0,  626,  628,  629,  629,  628,    0,  631,  631,  629,
        0,    0,  629,  631,  632,  632,  631,    0,  633,  633,
      632,    0,    0,  632,  633,  631,    0,  633,  635,  635,
        0,  635,    0,  632,  635,  636,  636,  635,    0,  637,

      637,  636,    0,    0,  636,  637,  638,  638,  637,    0,
      638,    0,  638,  639,  639,  638,  637,  640,  640,  639,
        0,    0,  639,  640,  641,  641,  640,    0,  642,  642,
      641,    0,    0,  641,  642,  640,    0,  642,  643,  643,
      644,  644,  645,  645,  643,    0,  644,  643,  645,  644,
        0,  645,  646,  646,  647,  647,    0,    0,  646,    0,
      647,  646,    0,  647,  648,  648,  649,  649,  648,    0,
      648,    0,  649,  648,    0,  649,  650,  650,  651,  651,
      650,    0,  650,    0,  651,  650,    0,  651,  652,  652,
      653,  653,    0,    0,  652,    0,  653,  652,    0,  653,

      654,  654,  653,    0,    0,  652,  654,    0,    0,  654,
      655,  655,    0,  654,  656,  656,  655,    0,    0,  655,
      656,  657,  657,  656,    0,  658,  658,  657,    0,    0,
      657,  658,  659,  659,  658,    0,    0,    0,  659,  660,
      660,  659,  659,  661,  661,  660,    0,    0,  660,  661,
      661,    0,  661,  662,  662,  663,  663,  664,  664,  662,
        0,  663,  662,  664,  663,    0,  664,  665,  665,    0,
        0,  663,    0,  665,    0,  664,  665,  666,  666,    0,
      665,  666,    0,  666,  667,  667,  666,    0,  669,  669,
      667,    0,    0,  667,  669,  670,  670,  669,    0,  672,

      672,  670,    0,  672,  670,  672,  673,  673,  672,    0,
        0,  670,  673,  674,  674,  673,    0,    0,    0,  674,
      675,  675,  674,    0,    0,  674,  675,    0,  675,  675,
      676,  676,    0,    0,  676,    0,  676,  677,  677,  676,
        0,  677,    0,  677,  678,  678,  677,    0,  678,    0,
      678,  679,  679,  678,    0,  680,  680,  679,    0,    0,
      679,  680,  681,  681,  680,    0,  682,  682,  681,    0,
        0,  681,  682,    0,    0,  682,  683,  683,  683,  684,
      684,    0,    0,  683,  684,  684,  683,    0,  684,  685,
      685,    0,    0,  685,    0,  685,  686,  686,  685,    0,

      686,    0,  686,  687,  687,  686,    0,  687,    0,  687,
      688,  688,  687,    0,  688,    0,  688,  689,  689,  688,
        0,  690,  690,  689,    0,    0,  689,  690,  691,  691,
      690,    0,  692,  692,  691,    0,    0,  691,  692,  693,
      693,  692,    0,  694,  694,  693,  691,    0,  693,  694,
      695,  695,  694,    0,    0,  692,  695,  697,  697,  695,
        0,  697,    0,  697,  694,    0,  697,  698,  698,  699,
      699,  700,  700,  698,    0,  699,  698,  700,  699,    0,
      700,  701,  701,    0,  700,  702,  702,  701,    0,    0,
      701,  702,  703,  703,  702,    0,  704,  704,  703,    0,

        0,  703,  704,    0,  701,  704,  704,    0,  702,    0,
      705,  705,  705,  705,    0,  703,  705,  706,  706,  705,
        0,    0,  706,  706,  707,  707,  706,    0,  708,  708,
      707,    0,    0,  707,  708,  709,  709,  708,    0,  710,
      710,  709,    0,    0,  709,  710,    0,  707,  710,    0,
        0,  708,    0,    0,  711,  711,  712,  712,  709,  710,
      711,    0,  712,  711,    0,  712,  713,  713,  714,  714,
      712,    0,  713,  711,  714,  713,    0,  714,  713,  715,
      715,  716,  716,  717,  717,  715,    0,  716,  715,  717,
      716,    0,  717,  716,  718,  718,  719,  719,    0,    0,

      718,    0,  719,  718,    0,  719,  720,  720,  721,  721,
      720,    0,  720,    0,  721,  720,    0,  721,    0,  722,
      722,    0,  721,  722,    0,  722,  723,  723,  722,    0,
      724,  724,  723,    0,    0,  723,  724,  725,  725,  724,
        0,  726,  726,  725,    0,    0,  725,  726,  727,  727,
      726,    0,  727,    0,  727,  728,  728,  727,    0,  729,
      729,  728,    0,    0,  728,  729,  730,  730,  729,    0,
      730,  728,  730,  731,  731,  730,    0,  729,    0,  731,
      732,  732,  731,  731,  733,  733,  732,    0,    0,  732,
      733,  734,  734,  733,    0,  735,  735,  734,    0,    0,

      734,  735,  736,  736,  735,    0,    0,    0,  736,    0,
      734,  736,  736,  737,  737,  735,    0,  737,    0,  737,
      738,  738,  737,    0,  739,  739,  738,    0,  738,  738,
      739,    0,    0,  739,    0,  740,  740,  741,  741,  740,
      739,  740,    0,  741,  740,    0,  741,  742,  742,    0,
        0,  743,  743,  742,    0,  742,  742,  743,  744,  744,
      743,    0,  745,  745,  744,    0,    0,  744,  745,    0,
        0,  745,  746,  746,    0,  745,  747,  747,  746,    0,
        0,  746,  747,    0,    0,  747,  748,  748,  748,    0,
      749,  749,  748,    0,    0,  748,  749,  750,  750,  749,

        0,  750,  749,  750,  751,  751,  750,    0,  752,  752,
      751,    0,    0,  751,  752,    0,    0,  752,  754,    0,
      754,  756,  756,  757,  757,  757,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753
    } ;

static yyconst flex_int16_t yy_rule_linenum[167] =
    {   0,
       44,   45,   47,   49,   51,   53,   55,   57,   59,   61,
       63,   65,   67,   69,   71,   73,   75,   77,   79,   81,
       83,   85,   87,   89,   91,   93,   95,   97,   99,  101,
      103,  105,  107,  109,  111,  113,  115,  117,  119,  121,
      123,  125,  127,  128,  129,  131,  132,  134,  135,  136,
      137,  139,  140,  141,  142,  144,  145,  146,  147,  148,
      149,  150,  151,  152,  153,  154,  155,  157,  158,  159,
      160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
      170,  172,  173,  174,  175,  176,  177,  178,  179,  180,
      181,  182,  183,  185,  186,  187,  188,  189,  190,  191,

      192,  193,  194,  195,  196,  197,  198,  200,  201,  202,
      203,  204,  206,  207,  208,  209,  210,  211,  213,  214,
      215,  218,  219,  220,  221,  222,  223,  224,  226,  227,
      228,  229,  230,  231,  232,  235,  236,  238,  239,  240,
      241,  242,  243,  244,  245,  246,  247,  248,  250,  251,
      252,  253,  254,  255,  256,  257,  258,  259,  260,  263,
      264,  265,  267,  268,  269,  270
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/bif.l"
/******************************************************************************
* Copyright 2015-2019 Xilinx, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the BIF file */
/* Run the bif.y file first through bison to generate the bif.tab.h file, which is included herein */
/* Then run this file through flex to generate the bif.yy.c source code */
#line 22 "../s/bif.l"
 #include <stdio.h>
 #include "bifscanner.h"
 #include "bif.tab.hpp"
 #include "authentication.h"
 #include "encryption.h"
 typedef BIF::BisonParser::token tok;
/* see http://www.lysator.liu.se/c/ANSI-C-grammar-l.html */
#line 35 "../s/bif.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 1869 "../bisonflex/bif.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 38 "../s/bif.l"



   yylloc->step ();


#line 2033 "../bisonflex/bif.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 754 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 753 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 167 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 167 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 168 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "../s/bif.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 45 "../s/bif.l"
yylloc->lines (1); yylloc->step ();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "../s/bif.l"
return tok::BOOTLOADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "../s/bif.l"
return tok::PRESIGN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 51 "../s/bif.l"
return tok::UDF_DATA;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 53 "../s/bif.l"
return tok::XIP_MODE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 55 "../s/bif.l"
return tok::BOOT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 57 "../s/bif.l"
return tok::USER;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 59 "../s/bif.l"
return tok::STATIC;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 61 "../s/bif.l"
return tok::NOAUTOSTART;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 63 "../s/bif.l"
return tok::MULTIBOOT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "../s/bif.l"
return tok::PROTECTED;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "../s/bif.l"
return tok::ALIGNMENT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 69 "../s/bif.l"
return tok::EARLY_HANDOFF;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "../s/bif.l"
return tok::HIVEC;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "../s/bif.l"
return tok::BLOCKS;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 75 "../s/bif.l"
return tok::AUTHBLOCKS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "../s/bif.l"
return tok::BIGENDIAN;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "../s/bif.l"
return tok::A32_MODE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "../s/bif.l"
yylval->number = tok::OFFSET;                   return tok::OFFSET;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "../s/bif.l"
yylval->number = tok::RESERVE;                  return tok::RESERVE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 85 "../s/bif.l"
yylval->number = tok::LOAD;                     return tok::LOAD;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 87 "../s/bif.l"
yylval->number = tok::STARTUP;                  return tok::STARTUP;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 89 "../s/bif.l"
yylval->number = tok::PARTITION_NUM;            return tok::PARTITION_NUM;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 91 "../s/bif.l"
yylval->number = tok::INIT;                     return tok::INIT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 93 "../s/bif.l"
yylval->number = tok::UDF_BH;                   return tok::UDF_BH;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "../s/bif.l"
yylval->number = tok::AES_KEY_FILE;             return tok::AES_KEY_FILE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 97 "../s/bif.l"
yylval->number = tok::PPK_FILE;                 return tok::PPK_FILE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 99 "../s/bif.l"
yylval->number = tok::PSK_FILE;				    return tok::PSK_FILE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 101 "../s/bif.l"
yylval->number = tok::SPK_FILE;                 return tok::SPK_FILE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 103 "../s/bif.l"
yylval->number = tok::SSK_FILE;                 return tok::SSK_FILE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 105 "../s/bif.l"
yylval->number = tok::SPK_SIGNATURE_FILE;       return tok::SPK_SIGNATURE_FILE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "../s/bif.l"
yylval->number = tok::BH_SIGNATURE_FILE;        return tok::BH_SIGNATURE_FILE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "../s/bif.l"
yylval->number = tok::HEADER_SIGNATURE_FILE;    return tok::HEADER_SIGNATURE_FILE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 111 "../s/bif.l"
yylval->number = tok::BOOTVECTORS;              return tok::BOOTVECTORS;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 113 "../s/bif.l"
yylval->number = tok::BOOTIMAGE;                return tok::BOOTIMAGE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 115 "../s/bif.l"
yylval->number = tok::ID;                       return tok::ID; 
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 117 "../s/bif.l"
yylval->number = tok::BH_KEY_FILE;              return tok::BH_KEY_FILE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 119 "../s/bif.l"
yylval->number = tok::PUF_HELPER_FILE;          return tok::PUF_HELPER_FILE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 121 "../s/bif.l"
yylval->number = tok::PMUFW_IMAGE;              return tok::PMUFW_IMAGE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 123 "../s/bif.l"
yylval->number = tok::BH_KEY_IV;                return tok::BH_KEY_IV;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 125 "../s/bif.l"
yylval->number = tok::FAMILY_KEY;                return tok::FAMILY_KEY;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 127 "../s/bif.l"
return tok::ENCRYPTION;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 128 "../s/bif.l"
yylval->number = 0;                             return tok::NONE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "../s/bif.l"
yylval->number = Encryption::AES;               return tok::ENCRVALUE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 131 "../s/bif.l"
return tok::AUTHENTICATION;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 132 "../s/bif.l"
yylval->number = Authentication::RSA;           return tok::AUTHVALUE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 134 "../s/bif.l"
return tok::CHECKSUM;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 135 "../s/bif.l"
yylval->number = Checksum::MD5;                 return tok::CHECKSUMVALUE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 136 "../s/bif.l"
yylval->number = Checksum::SHA2;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 137 "../s/bif.l"
yylval->number = Checksum::SHA3;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 139 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 140 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 141 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 142 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 144 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 145 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 146 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 147 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 148 "../s/bif.l"
yylval->number = KeySource::EfuseBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 149 "../s/bif.l"
yylval->number = KeySource::EfuseGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 150 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 151 "../s/bif.l"
yylval->number = KeySource::BbramBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 152 "../s/bif.l"
yylval->number = KeySource::BbramGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 153 "../s/bif.l"
yylval->number = KeySource::BhGryKey;           return tok::KEY_SRC;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 154 "../s/bif.l"
yylval->number = KeySource::BhBlkKey;           return tok::KEY_SRC;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 155 "../s/bif.l"
yylval->number = KeySource::BhKupKey;           return tok::KEY_SRC;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 157 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 158 "../s/bif.l"
yylval->number = Core::R5Single;                return tok::CORE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 159 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 160 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 161 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 162 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 163 "../s/bif.l"
yylval->number = Core::R5Dual;                  return tok::CORE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 164 "../s/bif.l"
yylval->number = BhRsa::BhRsaEnable;            return tok::BH_RSA;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 165 "../s/bif.l"
yylval->number = AuthHash::Sha2;               return tok::AUTH_HASH;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 166 "../s/bif.l"
yylval->number = PufHdLoc::PUFinBH;             return tok::PUFHD_LOC;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 167 "../s/bif.l"
yylval->number = AuthOnly::Enabled;             return tok::AUTH_ONLY;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 168 "../s/bif.l"
yylval->number = OptKey::OptKeyinSecHdr;        return tok::OPT_KEY;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 169 "../s/bif.l"
yylval->number = PufMode::PUF4K;                return tok::PUF4KMODE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 170 "../s/bif.l"
yylval->number = tok::SHUTTER;                  return tok::SHUTTER;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 172 "../s/bif.l"
return tok::BOOT_DEVICE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 173 "../s/bif.l"
yylval->number = BootDevice::QSPI32;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 174 "../s/bif.l"
yylval->number = BootDevice::QSPI24;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 175 "../s/bif.l"
yylval->number = BootDevice::NAND;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 176 "../s/bif.l"
yylval->number = BootDevice::SD0;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 177 "../s/bif.l"
yylval->number = BootDevice::SD1;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 178 "../s/bif.l"
yylval->number = BootDevice::SDLS;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 179 "../s/bif.l"
yylval->number = BootDevice::MMC;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 180 "../s/bif.l"
yylval->number = BootDevice::USB;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 181 "../s/bif.l"
yylval->number = BootDevice::ETHERNET;          return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 182 "../s/bif.l"
yylval->number = BootDevice::PCIE;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 183 "../s/bif.l"
yylval->number = BootDevice::SATA;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 185 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 186 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 187 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 188 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 189 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 190 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 191 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 192 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 193 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 194 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 195 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 196 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 197 "../s/bif.l"
yylval->number = DestinationCPU::R5_lockstep;   return tok::DEST_CPU_TYPE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 198 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 200 "../s/bif.l"
return tok::DEST_DEVICE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 201 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PS;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 202 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PL;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 203 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PMU;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 204 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_XIP;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 206 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 207 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 208 "../s/bif.l"
yylval->number = ExceptionLevel::EL0;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 209 "../s/bif.l"
yylval->number = ExceptionLevel::EL1;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 210 "../s/bif.l"
yylval->number = ExceptionLevel::EL2;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 211 "../s/bif.l"
yylval->number = ExceptionLevel::EL3;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 213 "../s/bif.l"
return tok::TRUSTZONE;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 214 "../s/bif.l"
yylval->number = TrustZone::Secure;             return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 215 "../s/bif.l"
yylval->number = TrustZone::NonSecure;          return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 218 "../s/bif.l"
yylval->number = tok::AUTH_PARAMS;          return tok::AUTH_PARAMS;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 219 "../s/bif.l"
yylval->number = tok::PPK_SELECT;           return tok::PPK_SELECT;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 220 "../s/bif.l"
yylval->number = tok::SPK_SELECT;           return tok::SPK_SELECT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 221 "../s/bif.l"
yylval->number = SpkSelect::SPK_eFUSE;      return tok::SPKSELECT;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 222 "../s/bif.l"
yylval->number = SpkSelect::USER_eFUSE;     return tok::SPKSELECT;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 223 "../s/bif.l"
yylval->number = tok::SPK_ID;               return tok::SPK_ID; 
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 224 "../s/bif.l"
return tok::HEADER_AUTH;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 226 "../s/bif.l"
yylval->number = tok::SPLIT;                return tok::SPLIT;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 227 "../s/bif.l"
yylval->number = tok::SPLIT_MODE;           return tok::SPLIT_MODE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 228 "../s/bif.l"
yylval->number = SplitMode::SlaveMode;      return tok::SPLITMODE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 229 "../s/bif.l"
yylval->number = SplitMode::Normal;         return tok::SPLITMODE;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 230 "../s/bif.l"
yylval->number = tok::SPLIT_FMT;            return tok::SPLIT_FMT; 
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 231 "../s/bif.l"
return tok::MCS;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 232 "../s/bif.l"
return tok::BIN;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 235 "../s/bif.l"
yylval->number=atoi(yytext);                return tok::DECVALUE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 236 "../s/bif.l"
yylval->number=strtoull(yytext+2,NULL,16);  return tok::HEXVALUE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 238 "../s/bif.l"
return tok::COLON;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 239 "../s/bif.l"
return tok::SEMICOLON;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 240 "../s/bif.l"
return tok::EQUAL;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 241 "../s/bif.l"
return tok::COMMA;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 242 "../s/bif.l"
return tok::OBRACKET;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 243 "../s/bif.l"
return tok::EBRACKET;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 244 "../s/bif.l"
return tok::OBRACE;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 245 "../s/bif.l"
return tok::EBRACE;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 246 "../s/bif.l"
return tok::LPAREN;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 247 "../s/bif.l"
return tok::RPAREN;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 248 "../s/bif.l"
return tok::ASTERISK;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 250 "../s/bif.l"
return tok::PLUS;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 251 "../s/bif.l"
return tok::MINUS;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 252 "../s/bif.l"
return tok::LSHIFT;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 253 "../s/bif.l"
return tok::RSHIFT;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 254 "../s/bif.l"
return tok::MULT;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 255 "../s/bif.l"
return tok::DIVIDE;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 256 "../s/bif.l"
return tok::MODULO;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 257 "../s/bif.l"
return tok::NEGATION;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 258 "../s/bif.l"
return tok::AND;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 259 "../s/bif.l"
return tok::OR;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 260 "../s/bif.l"
return tok::XOR;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 263 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::WORD;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 264 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::FILENAME;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 265 "../s/bif.l"
yylval->string=strdup(yytext+1); yylval->string[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 267 "../s/bif.l"
yylloc->step ();
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 268 "../s/bif.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 269 "../s/bif.l"
/* ignore (Linux only) */
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 270 "../s/bif.l"
printf("WARNING: bad character! '%s' (0x%02X)\n",yytext,yytext[0]);
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 271 "../s/bif.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2979 "../bisonflex/bif.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	biffree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	biffree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					bifrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) bifrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 754 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 754 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 753);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) bifalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) bifalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		biffree((void *) b->yy_ch_buf  );

	biffree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) bifalloc(new_size  );

		else
			(yy_start_stack) = (int *) bifrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *bifalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *bifrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void biffree (void * ptr )
{
	free( (char *) ptr );	/* see bifrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 271 "../s/bif.l"




void BIF::FlexScanner::comment()
{
    char c, c1;
loop:
    while ((c = yyinput()) != '*' && c != 0) 
    {
        // putchar(c);
        if (c == '\n') yylloc->lines (1);
    }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

