#line 2 "../bisonflex/bif.yy.cpp"

#line 4 "../bisonflex/bif.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer bifFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *bifalloc (yy_size_t  );
void *bifrealloc (void *,yy_size_t  );
void biffree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 238
#define YY_END_OF_BUFFER 239
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1058] =
    {   0,
        0,    0,  239,  237,  234,  235,  236,  237,  226,  228,
      217,  218,  219,  220,  212,  221,  232,  225,  207,  207,
      209,  210,  237,  211,  237,  231,  213,  214,  230,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      215,  229,  216,  227,  234,  235,    0,    0,  232,    1,
      232,  207,  232,  222,  223,  231,    0,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,   47,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  180,  231,  231,  231,  179,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  233,    0,    0,    2,  232,  208,    0,  231,
      231,  231,  231,  231,  231,   66,  177,  231,  231,  231,
      231,  231,  231,  206,  231,  231,  231,   84,   86,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  232,  231,
      231,  231,  231,  231,  231,  204,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  205,   73,  231,  146,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,   31,   80,  175,  231,  231,  231,  231,
      176,  231,  231,  232,  231,   85,  231,  231,   68,  231,
      231,  153,  232,  143,  144,  231,  231,  231,  231,  191,
      231,  231,  231,  231,  231,  231,  231,  231,  231,   55,
      147,  231,  182,    0,  232,  231,  232,  231,  232,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,    7,  231,  232,  231,   29,  161,  231,
      231,  231,  231,  231,  231,  184,  185,  186,  187,  231,

      231,  231,  231,  231,   49,   78,  231,  231,  231,  231,
      231,   32,  231,  231,   28,  231,  232,  158,  201,  231,
       48,  142,  231,  232,   65,  231,  231,  231,  231,  151,
      231,  231,  231,  149,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  172,  173,  232,  231,  231,
      231,  231,  231,  150,  232,  232,  232,  231,  231,   74,
       75,  231,  231,  232,  152,  232,  231,  231,  231,  231,
      231,  231,  231,  231,   83,  231,  231,    8,  231,  162,
      165,  168,  170,  231,  164,  167,  169,  171,  231,  163,
      166,  231,  231,  231,  231,  231,  231,  231,  231,   93,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  232,  231,  231,  231,  231,  231,   69,   92,
      231,  231,  231,  231,  231,  231,  231,  231,   17,  231,
       23,  231,  231,  231,  232,  232,  231,  231,  232,  231,
      231,  231,  231,   77,  231,  231,  231,  181,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  232,  231,
      231,  231,  231,  231,  145,  232,  232,  231,  231,  231,
      231,  232,  232,  231,  232,  231,  231,  231,  231,  200,
      231,  231,  231,  231,   79,  231,  231,  232,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,   18,  231,  231,  231,  231,  231,  231,  232,
      231,  231,  231,  231,  231,  232,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,   91,  231,  231,
      232,  232,  231,  231,  232,  231,  203,   26,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  141,  140,  232,  231,  231,  231,  231,  231,  232,
      232,  232,  231,  189,  231,  231,  232,  232,  231,  232,
      197,  231,  231,  231,  231,  231,    9,  231,   33,  231,
      232,  231,  231,  121,  123,  122,  124,  136,  231,  139,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,   87,  231,  231,  231,  231,
      231,  231,  232,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,   45,  231,  231,
      116,  231,  157,  232,  231,  231,   81,  231,  130,  231,
      231,   53,  231,  231,   35,    4,  231,   36,  231,  231,
      231,  232,  125,  231,   27,  231,  137,  232,  154,  155,
       25,  132,  231,  232,  232,  231,  232,  231,   37,  231,
       38,   30,  231,  231,  232,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,   72,  231,  231,  231,  231,  231,  232,
      232,  231,  231,  231,  231,  231,  231,  148,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  159,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,   51,
      128,  232,  231,  231,  232,  231,   88,  232,  231,  232,
      231,  231,  231,    5,  232,  231,    6,  231,  231,   13,
      129,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,   59,   54,  231,  231,  231,  231,  231,   43,

      231,  231,  231,  231,  231,  231,  231,  231,  232,  232,
      231,  231,  231,  231,  231,  231,  231,  231,   63,  231,
      231,  231,  231,  231,  231,  231,   11,  231,  190,   44,
      231,   22,  231,  231,   12,  131,  232,  120,  199,  156,
      202,  232,  231,  195,  231,  231,  188,  232,  102,  103,
      104,  105,  106,  107,  108,  109,  231,   34,  231,  231,
       19,  231,  231,  231,  231,  231,  231,  101,  100,   50,
      231,   20,  231,  231,    3,  231,  231,  231,   16,  231,
      231,  231,   70,   71,  231,  231,  231,  231,  231,   64,
      231,  231,  231,  231,  231,  231,  231,  231,   24,  231,

       56,  231,  231,  193,  232,   89,  134,  194,  231,  196,
      231,  192,  231,  231,  231,  231,  231,  231,  231,   40,
      118,  138,   42,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  117,   57,  198,  231,  231,
      231,   10,  231,  231,   52,  174,  231,   21,  231,  231,
      231,  231,   58,  231,  231,  231,  231,  231,  133,  231,
      231,  231,   60,  231,  231,  231,  231,  231,  231,  231,
      119,  231,  231,  231,   39,  231,  231,   98,   99,   97,
      231,  231,   15,  231,  231,   14,   95,   96,   94,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,   67,

      126,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,   82,  231,  231,  160,  231,  231,  231,
      231,  231,  110,  113,  183,  231,   41,  231,   76,  127,
      231,  231,  231,  231,  231,  231,   46,  231,  231,  231,
      231,  231,  231,  231,   90,  231,  178,  231,  231,   61,
       62,  135,  111,  114,  112,  115,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    6,    6,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,    1,    6,   33,   33,   33,   33,   33,   33,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   35,   34,   34,
       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   34,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    1,    3,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    1,    1,
        1,    1,    3,    3,    3,    1,    3,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1063] =
    {   0,
        0,    0,  389, 6685,   68,  381, 6685,   69, 6685, 6685,
     6685, 6685, 6685,    0, 6685,    0,    0,   59,  117,   37,
     6685, 6685,  349, 6685,  344,  132, 6685, 6685, 6685,  138,
      168,  216,  128,  152,  240,  197,  211,  256,  227,  261,
      279,  286,  301,  300,  313,  325,  346,  351,  372,  371,
     6685, 6685, 6685, 6685,   96,  372,  365,  139,    0, 6685,
      432,  115,  484, 6685, 6685,  417,  151,  431,  492,  491,
      496,  514,  518,  519,  534,  541,  556,  563,  578,  568,
      583,  601,  606,  605,  634,  641,  656,  661,  676,  683,
      690,  365,  736,  741,  755,  733,  753,  758,  778,  793,

      798,  803,  826,  821,  831,  841,  857,  867,  872,  879,
      894,  906,  916,  920,  934,  949,  967,  963,  977,  989,
     1003, 1015, 1025, 1029, 1043, 1063,  182, 1068, 1078, 1088,
     1134, 1139, 1117, 1131, 1145, 1157, 1171, 1209, 1217, 1207,
     1212, 1222, 1227, 1234, 1260, 1261, 1275, 1287, 1265, 1309,
     1310, 1332, 6685,  178,  366, 6685, 1392,    0,    0, 1397,
     1425, 1435, 1451, 1458, 1465, 1481, 1491, 1499, 1517, 1498,
     1510,  115,  407,  432,  443,  626,  598,  630,  782, 1092,
      909, 1052,  998, 1249, 1333, 1385, 1307, 1442,  202, 1522,
     1197, 1533, 1540, 1547, 1557, 1140, 1559, 1570, 1574, 1581,

     1591, 1595, 1602, 1606, 1618, 1625, 1629, 1636, 1640, 1670,
     1650, 1657, 1668, 1680, 1684, 1691, 1698, 1705, 1717, 1719,
     1729, 1736, 1743, 1750, 1757, 1764, 1775, 1777, 1787, 1797,
     1807, 1811, 1821,  222, 1825, 1832, 1839, 1846, 1856, 1860,
     1867, 1871,  317, 1884, 1896, 1882, 1907, 1903, 1914, 1918,
     1929, 1948, 1931, 1950, 1960, 1962, 1980, 1982, 1993, 1997,
     2004, 2008, 2019,  360,  407, 2021,  495, 2031,  140, 2033,
     2045, 2055, 2062, 2035, 2073, 2069, 2083, 2085, 2087, 2100,
     2107, 2111, 2118, 2122, 2134,  317, 2138, 2148, 2152, 2159,
     2163, 2174, 2178, 2188, 2198,    0,    0,    0,    0, 2205,

     2209, 2220, 2230, 2237, 2244, 2255, 2251, 2262, 2272, 2276,
     2286, 2293, 2297, 2308, 2310, 2320,  288, 2322, 2324, 2334,
     2338, 2345, 2349,  281, 2356, 2360, 2370, 2374, 2381, 2385,
     2392, 2403, 2405, 2416, 2418, 2420, 2430, 2434, 2444, 2454,
     2456, 2466, 2468, 2478, 2491,    0,    0,  280, 2489, 2493,
     2503, 2505, 2515, 2517,  274,  273,  272, 2527, 2537, 2539,
     2541, 2551, 2555,  144, 2566,  281, 2562, 2576, 2580, 2590,
     2592, 2603, 2605, 2616, 2618, 2629, 2636, 2649, 2651,    0,
        0,    0,    0, 2663,    0,    0,    0,    0, 2673,    0,
        0, 2675, 2685, 2689, 2696, 2703, 2707, 2717, 2728, 2732,

     2742, 2744, 2746, 2756, 2758, 2771, 2775, 2785, 2789, 2796,
     2806, 2813,  267, 2817, 2832, 2836, 2850, 2854, 2861, 2865,
     2872, 2876, 2883, 2890, 2894, 2904, 2914, 2918, 2929, 2936,
     2947, 2949, 2959, 2966,  277,  260, 2973, 2977,  260, 2987,
     2991, 2998, 3002, 3009, 3013, 3020, 3024, 3035, 3039, 3046,
     3053, 3063, 3067, 3074, 3078, 3089, 3100, 3112,  268, 3093,
     3110, 3114, 3124, 3126,  292,  265,  260, 3136, 3146, 3153,
     3160,  244,  242, 3164,  249, 3171, 3175, 3182, 3189, 3193,
     3200, 3207, 3218, 3222, 3229, 3233, 3243,  247, 3247, 3254,
     3271, 3264, 3278, 3285, 3289, 3296, 3300, 3310, 3320, 3322,

     3332, 3336, 3346, 3348, 3361, 3372, 3383, 3387, 3398, 3409,
     3394, 3416, 3420, 3427, 3437, 3444, 3448, 3458, 3462,  247,
     3469, 3473, 3484, 3491, 3498,  229, 3502, 3513, 3523, 3533,
     3543, 3545, 3555, 3557, 3572, 3576, 3586, 3597, 3593, 3604,
      216,  236, 3608, 3618,  232, 3622, 3633, 3637, 3644, 3648,
     3655, 3659, 3669, 3673, 3680, 3687, 3691, 3701, 3711, 3713,
     3725, 3727, 3729,  224, 3739, 3741, 3751, 3762, 3758,  209,
      200,  197, 3769, 3773, 3783, 3785,  200,  197, 3787,  187,
     3800, 3802, 3813, 3815, 3825, 3832, 3836, 3843, 3853, 3857,
      197, 3864, 3871, 3878, 3882, 3889, 3893, 3900, 3904, 3911,

     3915, 3925, 3929, 3927, 3940, 3950, 3954, 3964, 3966, 3977,
     3984, 3995, 3991, 4002, 4006, 4016, 4020, 4030, 4032, 4043,
     4045, 4057, 4061, 4068, 4072,    0, 4082, 4089, 4096, 4106,
     4110, 4117,   60, 4127, 4129, 4140, 4147, 4154, 4158, 4168,
     4172, 4187, 4191, 4198, 4202, 4212, 4216, 4226, 4228, 4238,
     4245, 4249,    0,  175, 4256, 4266,    0, 4270, 4281, 4288,
     4292, 4302, 4309, 4313, 4323, 4325, 4335, 4337, 4347, 4351,
     4358,  177, 4362, 4369, 4376, 4380, 4390,  189,    0,    0,
     4392, 4394, 4404,  165,  172, 4406,  156, 4418, 4420, 4430,
     4432, 4434, 4444, 4446,  151, 4448, 4458, 4468, 4472, 4483,

     4485, 4487, 4497, 4504, 4514, 4518, 4525, 4529, 4536, 4540,
     4550, 4557, 4564, 4568, 4580, 4591, 4593, 4603, 4605, 4615,
     4622, 4629, 4640, 4644, 4651, 4655, 4665, 4669, 4676,  178,
      182, 4680, 4690, 4692, 4694, 4705, 4715, 4717, 4729, 4733,
     4743, 4745, 4756, 4758, 4769, 4773, 4780, 4787,    0, 4794,
     4798, 4805, 4815, 4819, 4829, 4831, 4842, 4846, 4853, 4860,
     4864,  140, 4871, 4878,  136, 4882,    0,  141, 4889,  144,
     4902, 4909, 4913, 4920,  115, 4953, 4938, 4942, 4957, 4940,
     4964, 4968, 4981, 4983, 4985, 4996, 5007, 5011, 5022, 5018,
     5032, 5034, 5036, 5047, 5058, 5060, 5071, 5073, 5084, 5088,

     5095, 5099, 5112, 5116, 5123, 5127, 5137, 5141,  149,  144,
     5152, 5156, 5167, 5171, 5178, 5189, 5182, 5196, 5206, 5208,
     5218, 5222, 5229, 5242, 5244, 5254, 5256, 5258, 5271, 5275,
     5282, 5293, 5289, 5300, 5304, 5311,  116, 5315, 5322,    0,
     5326,   60, 5333,    0, 5337, 5344, 5348,   60, 5358, 5360,
     5370, 5372, 5374, 5384, 5386, 5388, 5398, 5402, 5409, 5413,
     5423, 5427, 5434, 5438, 5448, 5452, 5459, 5463, 5470, 5474,
     5481, 5488, 5492, 5499, 5506, 5510, 5517, 5528, 5538, 5542,
     5549, 5556,    0,    0, 5566, 5570, 5577, 5581, 5592, 5588,
     5599, 5610, 5606, 5617, 5621, 5631, 5633, 5643, 5645, 5647,

     5657, 5661, 5671, 5681,   44,    0, 5683, 5685, 5695,    0,
     5699, 5706, 5713, 5720, 5730, 5737, 5744, 5748, 5759, 5761,
     5771, 5773, 5775, 5785, 5792, 5803, 5807, 5814, 5821, 5828,
     5835, 5839, 5850, 5857, 5868, 5864, 5875, 5879, 5886, 5890,
     5897, 5901, 5908, 5912, 5922,    0, 5932, 5939, 5943, 5950,
     5960, 5964, 5971, 5975, 5985, 5996, 6003, 6013, 6017, 6024,
     6031, 6035, 6042, 6046, 6056, 6067, 6071, 6078, 6088, 6095,
     6099, 6106, 6110, 6117, 6124, 6128, 6135, 6139, 6149, 6151,
     6161, 6172, 6168, 6179, 6183, 6190, 6194, 6201, 6205, 6212,
     6216, 6223, 6227, 6234, 6244, 6248, 6255, 6267, 6269, 6280,

     6282, 6292, 6296, 6303, 6307, 6318, 6333, 6343, 6331, 6345,
     6355, 6357, 6367, 6329, 6371, 6378, 6388, 6390, 6400, 6402,
     6413, 6417, 6424, 6428, 6435, 6439, 6446, 6450, 6460, 6464,
     6471, 6481, 6485, 6492, 6499, 6503, 6513, 6515, 6528, 6532,
     6517, 6542, 6544, 6546, 6561, 6568, 6572, 6579, 6598, 6583,
     6594, 6596, 6608, 6610, 6612, 6622, 6685,   94, 6670, 6673,
     6676, 6680
    } ;

static yyconst flex_int16_t yy_def[1063] =
    {   0,
     1057,    1, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1058, 1057, 1058, 1058, 1058, 1058,   19,
     1057, 1057, 1057, 1057, 1057, 1059, 1057, 1057, 1057, 1059,
     1059, 1059,   32,   32,   32,   32,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
     1057, 1057, 1057, 1057, 1057, 1057, 1060, 1060, 1058, 1057,
     1061,   19, 1058, 1057, 1057,   36, 1057,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36, 1059, 1059, 1059, 1059,   36,   36,   36,   36,   36,

       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   41,   36,   36,   36,
     1059, 1059,   36,   36,   36,   36,   36, 1059, 1059,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36, 1057, 1057, 1062, 1057, 1061,   63, 1058, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,   36,
       36,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171, 1058,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171, 1058,  171,  171,  171,  171,  171,  171,
      171,  171, 1058,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171, 1060, 1058,  171, 1058,  171, 1058,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171, 1058,  171,  171,  171,  171,
      171,  171,  171,  171,  171, 1058, 1058, 1058, 1058,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171, 1058,  171,  171,  171,
      171,  171,  171, 1058,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171, 1058, 1058, 1058,  171,  171,
      171,  171,  171,  171, 1058, 1058, 1058,  171,  171,  171,
      171,  171,  171, 1058,  171, 1058,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171, 1058,
     1058, 1058, 1058,  171, 1058, 1058, 1058, 1058,  171, 1058,
     1058,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171, 1058,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171, 1058, 1058,  171,  171, 1058,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171, 1058,  171,
      171,  171,  171,  171, 1058, 1058, 1058,  171,  171,  171,
      171, 1058, 1058,  171, 1058,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171, 1058,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171, 1058,
      171,  171,  171,  171,  171, 1058,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
     1058, 1058,  171,  171, 1058,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171, 1058,  171,  171,  171,  171,  171, 1058,
     1058, 1058,  171,  171,  171,  171, 1058, 1058,  171, 1058,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
     1058,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171, 1058,  171,  171,  171,  171,
      171,  171, 1058,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171, 1058, 1058,  171,  171, 1058,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171, 1058,  171,  171,  171,  171,  171, 1058, 1058, 1058,
      171,  171,  171, 1058, 1058,  171, 1058,  171,  171,  171,
      171,  171,  171,  171, 1058,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171, 1058,
     1058,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171, 1058,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171, 1058,  171,  171, 1058,  171, 1058, 1058,  171, 1058,
      171,  171,  171,  171, 1058,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171, 1058, 1058,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171, 1058,  171,  171, 1058,
      171, 1058,  171, 1058,  171,  171,  171, 1058,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171, 1058, 1058,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171, 1058, 1058,  171,  171,  171, 1058,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171, 1058,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,    0, 1057, 1057, 1057,
     1057, 1057
    } ;

static yyconst flex_int16_t yy_nxt[6755] =
    {   0,
        4,    5,    6,    7,    5,    4,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   26,   26,   27,   17,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   26,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       26,   26,   50,   26,   26,   51,   52,   53,   54,   55,
       60,   59,   55,   57,   57,   61,   57,   57,   57,   57,
      730,   57,  731,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   59,   55,  946,   59,

       55,   58,   58,   58,  910,   57,  906,   57,   57,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   59,  153,   59,   59,   59,   59,
       59,   63,   59,   59,   59,   66,   66,  390,  391,   67,
      905,   66,  884,  281,   66, 1057,  154,  159,   59,   66,
      883,   83,  848,   84,   59,   85,   66,   59,   66,   63,
       59,   86,   59,   59,   59,  472,  473,  159,  844,  842,
       68,   66,   69,   66,  264,   67,   87,  840,  837,   66,

       66,  810,   66,  809,   59,   66,   88,   70,   71, 1057,
      775,   72,   73,  770,  264,   66,   74,  768,   75,  296,
      297,  298,  299,  767,   66,   66,  228,   76,   59,  765,
       59,   59,   59,   66,  762,  229,  749,   96,   66,  346,
      347,   66,  695,   67,   66,   97,  687,   66,   98,  685,
       66,   66,   59,  684,   99,  101,  100,   77,  680,  102,
       66,  679,   66,   78,   79,  678,   80,   66,   66,   81,
       66,  106,  348,  672,  657,   66,  654,  653,   66,   82,
       89,   66,   90,  633,   66,   91,  107,   66,   66,  626,
       92,  591,   93,   66,  580,  578,   66,  577,   94,  103,

      572,   66,   95,   66,   66,  571,  570,  104,  105,   66,
      564,  545,   66,   66,  108,   66,  542,  541,   66,   66,
       66,  109,  110,  111,  520,  475,  115,   66,  467,  466,
      112,  465,  113,  459,   66,  439,   66,   66,  114,  116,
      121,   66,  122,   66,  435,   66,  117,  131,  123,   66,
      124,  125,   66,   66,  126,  118,  127,  128,  119,  129,
       66,   66,  120,  413,   66,  132, 1057,  355,  156,  133,
      130,  153,   66,   66,   56,   65,   66,   59,   64,  189,
       59,   59,  134,   56,   66,  135,  136,  137, 1057,  138,
      139,   66, 1057,  140,   66, 1057,  141,  142, 1057,   66,

      143,   59,   66,  144,  145,   66, 1057,  146,   66, 1057,
       66,   66,   66,  148,  147,  149, 1057, 1057, 1057,  152,
      150, 1057,   66,   66,  380,  381,  382,  383,   66,  151,
       66,   66,  155,  155,  156,  155,  155,  155,  155,  155,
      155,  155,  155,  155, 1057,  155,  282,   66,   66, 1057,
     1057,  160, 1057,   66, 1057, 1057,   66,   66, 1057,  155,
      155,  155,  155,  155, 1057,   66, 1057,  155,   66,  155,
      155,   66,   66,   66,   66, 1057,   66, 1057,   66,   66,
     1057,   66,   66,   66,   66,  283, 1057, 1057,   66,   66,
       66, 1057,   66,  161, 1057, 1057, 1057,  155,  155,  155,

      155,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  162,  385,  386,  387,  388,  158, 1057, 1057, 1057,
     1057, 1057, 1057, 1057,  158,  158,  158,  158,  158,  158,
     1057,   66,   66, 1057, 1057, 1057,   66, 1057,  163,   66,
       66, 1057,   66,   66,   66, 1057, 1057,   66,   66,   66,
       66,   66,  164,   66,   66,   66, 1057,  165,   66,   66,
     1057, 1057,   66,  167, 1057,   66,   66,   66, 1057,   66,
       66,   66, 1057,   66,   66,  166,   66,   66,   66, 1057,
     1057,   66,  168, 1057, 1057,   66, 1057, 1057, 1057,   66,
     1057,   66,   66,   66, 1057, 1057,   66, 1057,   66,  169,

       66, 1057,  171,   66,   66, 1057, 1057,   66,   66, 1057,
     1057,   66,  170,   66,   66,   66,   66, 1057,   66,   66,
      172,  175,   66,   66,  173,   66,   66,   66, 1057,   66,
      174,   66, 1057, 1057,   66,   66,  176,   66,  285,   66,
       66,   66,   66, 1057,   66,   66,   66,   66, 1057,   66,
     1057, 1057,   66,  179,   66,  177,   66,   66,   66,  178,
       66, 1057,   66,   66,   66,   66,   66,   66, 1057, 1057,
       66,   66,   66, 1057,   66,   66,   66, 1057,  180,   66,
     1057,   66,   66, 1057,  284,   66, 1057, 1057, 1057,   66,
     1057,   66,   66,   66, 1057,  181,   66,  182,   66, 1057,

       66,  185, 1057, 1057,   66, 1057,  183,   66, 1057,   66,
     1057, 1057,   66,  184, 1057,   66,   66, 1057,   66, 1057,
       66, 1057, 1057,   66,   66, 1057,  187,   66, 1057, 1057,
       66,   66,  186,   66,   66,   66, 1057, 1057,   66, 1057,
       66,   66,   66, 1057, 1057, 1057, 1057,   66,   59,  188,
       59,   59,   59,   59, 1057,   59,   59,   59, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057,   59, 1057,   59,
       59,   59,   59,   66, 1057, 1057, 1057,   59,  190, 1057,
     1057,   66, 1057, 1057,  194, 1057, 1057, 1057,  191, 1057,
       66,   59,   66,   66, 1057, 1057,  286,  192,   66, 1057,

     1057,   66, 1057,  195,   66, 1057,   66, 1057, 1057,   66,
       66, 1057,   66,  193, 1057,   66,  196,   66,   66,  197,
     1057, 1057,   66,   66, 1057, 1057,   66, 1057,   66,   66,
     1057,   66, 1057,   66, 1057,   66, 1057,   66,  199, 1057,
     1057,   66, 1057,   66,   66,  198,   66, 1057, 1057,   66,
       66,   66,   66, 1057,   66,   66, 1057,   66, 1057, 1057,
       66,  202,   66,  200, 1057,  201,   66, 1057, 1057,   66,
     1057,   66,   66, 1057,   66, 1057, 1057,   66,   66,  203,
       66,   66,   66,   66, 1057,   66, 1057, 1057,   66,   66,
       66, 1057,   66, 1057, 1057, 1057, 1057,   66,   66, 1057,

       66,  208, 1057, 1057,  204,   66, 1057,  206,   66, 1057,
     1057,  205,   66, 1057,   66,   66,   66, 1057,   66,   66,
       66, 1057, 1057,   66,   66, 1057,   66,   66, 1057,  207,
       66,   66, 1057, 1057,   66, 1057,   66, 1057,   66, 1057,
     1057, 1057,   66, 1057, 1057,   66,   66, 1057,  210,   66,
       66,   66,  209,   66,   66,   66,   66,   66,   66,  211,
       66, 1057, 1057,   66,   66,   66, 1057,   66,   66, 1057,
      212,   66,  288,   66,   66,   66, 1057,   66, 1057,   66,
     1057, 1057,   66, 1057, 1057,  213,  214, 1057, 1057,  215,
     1057,   66, 1057,   66, 1057, 1057, 1057,   66, 1057, 1057,

       66,  216, 1057,   66, 1057,  217,   66,   66,   66, 1057,
     1057,   66,  218, 1057,   66,   66, 1057,   66,   66, 1057,
       66,  219,   66, 1057,   66,   66,   66, 1057,   66,   66,
     1057,  220, 1057, 1057,   66, 1057,   66,   66,  290,   66,
       66,  221, 1057,   66,   66, 1057,   66,   66,   66, 1057,
     1057,   66, 1057, 1057,   66,   66, 1057, 1057, 1057,  222,
       66, 1057,   66,  223, 1057,   66,   66, 1057,  224,   66,
     1057, 1057,   66,   66,   66, 1057,   66,   66, 1057, 1057,
       66, 1057,   66,   66,   66,  225,   66, 1057,   66, 1057,
     1057,   66,   66,   66,   66, 1057,  289, 1057,   66, 1057,

       66,   66,  226,   66, 1057, 1057, 1057, 1057,   66, 1057,
     1057,   66,  227, 1057,   66, 1057,   66,  230,   66,  231,
       66, 1057,   66,  232, 1057,   66,   66,   66,   66,   66,
     1057, 1057,   66,   66,  287,   66,   66,   66,   66,   66,
     1057,   66,  233, 1057, 1057,   66,   59,   66,  234,   59,
       59,   59, 1057,   59,   59,   59, 1057,   66, 1057, 1057,
     1057, 1057, 1057, 1057, 1057,   66, 1057, 1057,   66, 1057,
       59,  239, 1057,  235,  237,   59,   66,  238, 1057,   66,
       66,   66,   66, 1057, 1057,   66,   66, 1057,   66,   66,
       66, 1057,  240,   66, 1057, 1057,   66,   66, 1057, 1057,

      236, 1057,   66, 1057,   66,   66, 1057, 1057,   66, 1057,
     1057,   66, 1057, 1057,   66,  241,   66, 1057, 1057,  242,
     1057,   59,   66,  243,   59,   59,  244,  245,   66,   59,
       66,   59,   59,   59, 1057, 1057, 1057,   66,   66, 1057,
     1057,  301, 1057,   66, 1057,   59,   66,  247, 1057, 1057,
     1057, 1057,  249,   59, 1057,   66, 1057, 1057,   66,  246,
       66, 1057,  251,   66,   66, 1057,  248,   66,  250,   66,
       66,   66, 1057,   66,   66,   66,  252,  253,   66,   66,
     1057,   66,   66,  254,   66,   66,   66, 1057, 1057,   66,
       66,   66, 1057,   66, 1057,   66, 1057, 1057,   66, 1057,

      255,   66, 1057, 1057, 1057,   66, 1057,  291,   66,   66,
      259,   66,   66,   66, 1057,   66,   66,   66,   66,   66,
      256, 1057,   66,   66,   66, 1057,   66,   66, 1057,  257,
     1057, 1057,   66, 1057,   66,   66, 1057, 1057,   66, 1057,
      258, 1057, 1057, 1057,   66, 1057,   66,   66,   66,   66,
       66,  261,  260,   66,  262, 1057,   66,   66,   66, 1057,
       66,   66, 1057, 1057,  294, 1057,   66,   66,   66,   66,
     1057, 1057,   66,   66,   66,  292, 1057, 1057, 1057,   66,
       66, 1057,   66,   66, 1057, 1057,  263, 1057, 1057,   66,
     1057,   66,  155,  155,  156,  155,  155,  155,  155,  155,

      155,  155,  155,  155, 1057,  155, 1057, 1057, 1057,   59,
     1057,  265,   59,   59, 1057, 1057, 1057, 1057, 1057,  155,
      155,  155,  155,  155, 1057,   66,   66,  155, 1057,  155,
      155,   66, 1057,   59,   66,  293,  266,   59, 1057,  267,
       59,   59, 1057, 1057, 1057, 1057, 1057,   59, 1057,  269,
       59,   59, 1057, 1057, 1057, 1057, 1057,  155,  155,  155,
      155,   59, 1057,   59,  268,   59,   59,   59, 1057, 1057,
       59,   59,   59,   59,   59, 1057, 1057,   59, 1057,   59,
       59,   59,   66,   66, 1057, 1057, 1057,   59,   66, 1057,
     1057,   66, 1057,   59,   59,   59,   59,   59, 1057,  295,

      271,   59, 1057,   59, 1057,   59,   59,   59, 1057, 1057,
     1057,   59,  270,   59,   59,   59, 1057,   59, 1057, 1057,
     1057,  272, 1057, 1057, 1057, 1057, 1057,   59, 1057,   59,
      273,   59,   59,   59, 1057,   59, 1057, 1057,  276, 1057,
     1057, 1057, 1057, 1057, 1057,  274,   66, 1057, 1057,   66,
      277,  278, 1057,   59, 1057,   66,  279,   66,   66,  280,
     1057,   66,   66,   66,  275, 1057, 1057,   66,   66,   66,
     1057,   66, 1057,   66,   66, 1057, 1057,  302,  300,   66,
       66,   66,   66, 1057,  303, 1057,   66,   66,   66,   66,
     1057, 1057, 1057,   66, 1057,  304,   66,   66,   66,   66,

       66,  305, 1057,   66, 1057,   66,   66, 1057,   66,  306,
       66,   66,  307, 1057,   66,   66,   66,  308, 1057,   66,
       66,   66,   66,   66, 1057,  309, 1057,   66, 1057, 1057,
       66,   66,   66,  310, 1057,   66,   66,   66, 1057, 1057,
       66,  311,   66,   66,   66, 1057,   66,   66,   66, 1057,
     1057,   66,   66, 1057, 1057,   66, 1057,  314,   66,   66,
      312, 1057, 1057,  313,   66,   66,   66,   66,  315,   66,
       66,   66, 1057, 1057,   66,   66,   66,   66,   66, 1057,
      316,   66,   66, 1057,  317,   66,   66,  318, 1057,   66,
       66,   66, 1057, 1057,  319, 1057,   66,   66,   66,   66,

     1057, 1057, 1057,   66, 1057,  324,   66, 1057,   66,   66,
       66,   66,  321, 1057,   66,  320,   66,   66, 1057,   66,
       66,   66, 1057,  322,   66,   66,   66, 1057, 1057,   66,
       66,   66,   66,   66, 1057,  325, 1057,   66,   66,   66,
       66, 1057, 1057,  323,   66,   66,   66,   66,  326,  327,
     1057,   66, 1057, 1057,   66, 1057,  329,   66,   66,   66,
       66, 1057,  328,   66, 1057,   66,   66,  330,   66,   66,
       66, 1057, 1057,  331, 1057,   66,   66,   66,   66, 1057,
      332, 1057,   66,   66,   66,   66, 1057,  334, 1057,   66,
       66,   66,   66, 1057,  333, 1057,   66,   66,   66,   66,

      335, 1057, 1057,   66,   66,   66,   66, 1057, 1057,  336,
       66, 1057, 1057,   66,  337,   66,   66,   66,   66, 1057,
      338,   66, 1057,   66,   66, 1057,   66,   66,   66, 1057,
     1057, 1057,  342,   66,  339, 1057,   66,   66,   66, 1057,
     1057, 1057,  341,   66, 1057,  340,   66,   66,   66, 1057,
      343,   66,   66,   66, 1057, 1057,   66,   66,  344, 1057,
       66,   66,   66, 1057, 1057,   66,   66,   66,  349,  345,
       66,   66,   66,   66,   66, 1057, 1057, 1057,   66,   66,
       66,   66,  350,  351, 1057,   66,   66,   66,   66, 1057,
     1057, 1057,   66, 1057, 1057,   66,   66,   66,  356,  352,

       66,   66,   66, 1057, 1057,   66,   66,  354,   66,   66,
      357,   66,   66,   66, 1057, 1057,   66,   66, 1057, 1057,
       66,  353,   66,   66,   66,   66,  360,  361,   66, 1057,
       66,   66,  364,   66, 1057, 1057,   66,   66, 1057, 1057,
      358,  359,   66,   66,   66,   66, 1057,   66,   66,   66,
     1057, 1057,   66,   66,   66,   66,   66, 1057,   66,   66,
       66,  362,  366,   66,   66, 1057, 1057,   66, 1057,   66,
       66,   66,   66, 1057,  363,   66, 1057,   66,   66,  370,
       66, 1057, 1057,  365, 1057, 1057, 1057,  367,   66,   66,
       66,   66, 1057,  368,   66,  371,   66,   66, 1057,   66,

       66,   66,   66,   66, 1057,  369,   66, 1057,   66,   66,
     1057,   66, 1057, 1057, 1057, 1057,  372, 1057,  373,  374,
       66,   66,   66,   66,  375, 1057,   66, 1057,   66,   66,
     1057,   66,  377,   66,   66,  376, 1057,   66,   66,   66,
     1057, 1057,   66,   66,   66,   66,   66, 1057,   66,   66,
       66, 1057, 1057,   66,   66, 1057, 1057,   66,  379,   66,
       66,   66,   66, 1057,  378,   66, 1057,   66,   66, 1057,
       66,   66,   66,   66,   66,   66,   66,   66, 1057,   66,
       66,   66,   66,  384,   66,   66,   66,  396, 1057,  392,
     1057,   66,  393,  389,   66,   66,   66, 1057, 1057,  394,

     1057,   66,   66,   66,   66, 1057,  395, 1057,   66,   66,
       66,   66,  397,   66,  398,   66, 1057,  399,   66,   66,
      400, 1057,   66,   66,   66,   66,   66,   66,   66,   66,
     1057,   66,   66,   66,   66,  402,   66, 1057, 1057, 1057,
       66,   66,  401,  403,  404, 1057,   66,   66,   66,   66,
     1057,   66,   66,  405, 1057,  406,   66,   66,   66,   66,
       66,  408,   66,   66,   66, 1057, 1057,  407,   66, 1057,
      409,   66,  410, 1057,   66,   66, 1057, 1057,   66,   66,
       66, 1057,  411,   66,   66, 1057, 1057,  414,   66,   66,
     1057,  412,   66,   66,   66, 1057, 1057,   66,   66,   66,

       66,   66, 1057,   66,   66,   66, 1057, 1057,   66,   66,
     1057,  416,   66, 1057,   66,   66, 1057, 1057,   66,   66,
       66, 1057,  415,   66,   66,  417, 1057,   66,  419,   66,
     1057, 1057, 1057, 1057,   66, 1057, 1057,   66,   66,   66,
     1057,  418,  420, 1057,   66,   66,   66,   66, 1057,   66,
       66,   66, 1057, 1057,   66,   66, 1057, 1057,   66, 1057,
       66,   66, 1057, 1057, 1057,  422,   66, 1057,  421,   66,
       66,   66, 1057, 1057,  423, 1057,   66,   66,   66,   66,
     1057, 1057,  424,   66,   66,   66,   66,  425, 1057, 1057,
       66,   66,   66,   66,  426,   66,   66,   66, 1057, 1057,

       66,   66,   66,   66,   66, 1057,  428, 1057,   66,  427,
     1057,   66,   66,   66,  429, 1057,   66,   66,   66, 1057,
     1057,   66,   66, 1057, 1057,   66,   66,   66, 1057,  430,
      431, 1057,   66,   66,   66,   66,  436,   66,   66,   66,
     1057, 1057,   66,   66, 1057, 1057,   66, 1057,   66,   66,
       66,   66, 1057,  432,   66, 1057,   66,  433, 1057,   66,
       66,   66,   66,   66,   66,   66,   66,  434,   66,   66,
       66,   66, 1057,   66,   66,   66, 1057, 1057,   66,   66,
       66, 1057,  437,   66,   66,   66,   66,   66, 1057,   66,
       66,   66, 1057, 1057,   66,   66,   66,   66,   66, 1057,

       66,   66,   66, 1057,  440,   66,   66,  438, 1057,   66,
      441,   66, 1057, 1057,   66,   66,   66, 1057,  442,   66,
       66,   66,   66,   66, 1057,   66,   66,   66, 1057, 1057,
      443,   66,   66,   66,   66, 1057, 1057, 1057,   66, 1057,
     1057,   66, 1057,   66,   66,   66,   66, 1057,  444,   66,
     1057,   66,   66,  446,   66,  445,   66,   66,  447,   66,
       66,   66,   66, 1057,   66,   66,   66,   66, 1057,   66,
       66,   66, 1057, 1057,   66,   66,   66, 1057, 1057,   66,
       66,  448,  450,   66,   66,   66, 1057,  449, 1057, 1057,
       66, 1057,  451,   66,   66,   66,   66,   66,  452, 1057,

       66, 1057,   66,   66,  453,   66,   66,   66,   66,   66,
      457,  458,   66,  455,   66,  454, 1057,   66,   66,   66,
     1057,  456, 1057, 1057,   66, 1057, 1057,   66, 1057,   66,
       66,   66,   66,   66,   66,   66, 1057,   66,   66,   66,
       66,  461,   66,   66,   66,   66,   66, 1057,  460,   66,
     1057,   66,   66, 1057,  463,   66,   66,   66,   66,  462,
     1057,   66, 1057,   66,   66, 1057,   66,   66,   66, 1057,
     1057,  464, 1057,   66, 1057,  468,   66,   66,   66,   66,
       66,   66,   66,   66, 1057,   66,   66,   66,   66, 1057,
       66,   66,   66,  469, 1057,   66,   66,   66, 1057,  471,

       66,   66,   66,   66,   66,  474,   66,   66,   66,  470,
      476,   66,   66, 1057, 1057,   66,   66,   66, 1057,  477,
       66,   66,   66, 1057,  478,   66,   66, 1057,  479,   66,
       66,   66,   66,   66, 1057, 1057,   66, 1057,   66,   66,
      481,   66, 1057,   66,   66,   66,   66, 1057,  480,   66,
     1057,   66,   66,  483,   66, 1057,   66,   66,   66,   66,
     1057,  482,   66,  488,   66,   66, 1057,   66, 1057,   66,
       66, 1057, 1057, 1057,  484,   66,   66,  486,   66,  487,
     1057, 1057,   66,  491, 1057,   66,  492,  485,  489,   66,
       66,   66,   66,  493, 1057,   66,  494,   66,   66, 1057,

       66, 1057,  490,   66,   66,  496, 1057, 1057, 1057,   66,
     1057, 1057,   66,   66,   66,   66,   66, 1057, 1057,   66,
     1057,   66,   66, 1057,   66,   66,   66, 1057,  495,   66,
       66,   66, 1057, 1057,   66,   66,   66,   66,   66, 1057,
     1057, 1057,   66,   66,   66,   66,  497,   66,   66,   66,
     1057, 1057,   66,   66,  499, 1057,   66,   66,   66,  498,
      500,  501, 1057,   66,  502, 1057,   66,  503,   66,   66,
     1057,  505,   66,   66,   66, 1057, 1057,   66,   66, 1057,
      504,   66,   66,   66,   66,   66,   66,   66,   66, 1057,
       66,   66,   66,  507, 1057,   66,   66,   66,   66,   66,

      506, 1057,   66, 1057,   66,  509, 1057,   66, 1057,  508,
      511,   66,   66, 1057, 1057,   66,   66,   66, 1057,  510,
       66,   66, 1057,  512,   66,   66,   66,  514,  515,   66,
       66,   66,  513, 1057,   66,   66,   66,   66,   66, 1057,
      516, 1057,   66, 1057, 1057,   66,   66,   66, 1057,  517,
      518, 1057,   66,   66,   66,   66, 1057,   66,   66,   66,
     1057, 1057,   66,   66, 1057, 1057,   66, 1057, 1057, 1057,
      519,  522,   66,   66,  521,  526,   66,   66,   66, 1057,
     1057,   66,   66, 1057, 1057,   66, 1057, 1057,  523,  524,
       66,   66, 1057,  525,   66,   66,   66, 1057, 1057,   66,

       66,   66,   66,   66,  527,   66,   66,   66, 1057, 1057,
       66,   66,   66,   66,   66, 1057,   66,   66,   66, 1057,
     1057,   66,   66,   66,   66,   66,  528, 1057,  529,   66,
       66,   66,   66,  531,   66,   66,   66, 1057, 1057,   66,
       66,  530, 1057,   66,   66,   66,  533, 1057, 1057, 1057,
       66, 1057, 1057,   66,   66,   66, 1057,  532,   66,   66,
       66, 1057,  534,   66,   66, 1057, 1057,   66, 1057,   66,
       66, 1057, 1057, 1057,  535,   66,   66,   66,   66,  536,
     1057, 1057,   66, 1057, 1057,   66,  537,   66,   66,   66,
       66,  538, 1057,   66, 1057,   66,   66, 1057,   66,   66,

       66, 1057, 1057,  539, 1057,   66,   66,   66,   66, 1057,
      540, 1057,   66,   66,  543,   66, 1057,   66,   66,   66,
     1057, 1057,   66,   66, 1057, 1057,   66,   66,   66,  546,
      544,   66,   66,   66, 1057, 1057,   66,   66,   66,   66,
       66,  547,   66,   66,   66, 1057,  549,   66,   66,   66,
       66,   66, 1057,   66,   66,   66,  548, 1057,   66,   66,
       66,   66,   66, 1057,   66,   66,   66, 1057, 1057,   66,
       66,  550, 1057,   66,  553,   66,   66, 1057,  551,   66,
       66,   66,  552,  554,   66,   66,   66,   66,   66, 1057,
     1057, 1057,   66,   66,   66,   66,  555, 1057, 1057,  556,

     1057, 1057,   66,   66,   66,  557, 1057,   66,   66,   66,
     1057, 1057,   66,   66,   66,   66,   66,  558,   66,   66,
       66,  562, 1057,   66,   66,  559,  560,   66,  561,   66,
       66,  563, 1057,  565,   66,   66, 1057, 1057,   66,   66,
       66,   66,   66, 1057, 1057, 1057,   66, 1057, 1057,   66,
       66,   66,   66,   66,   66,   66,   66, 1057,   66,   66,
       66,   66,  566,   66,   66,   66,   66,   66,  568, 1057,
       66, 1057,   66,   66,  567,   66,   66,   66, 1057,  569,
     1057, 1057,   66, 1057, 1057,   66,   66,   66, 1057,  573,
      574, 1057,   66,   66,   66,   66, 1057,  575, 1057,   66,

       66,  576,   66, 1057,   66,   66,   66, 1057, 1057,   66,
       66,   66,   66,   66,  581,   66,   66,   66, 1057,  582,
       66,   66,   66,   66,   66,  579, 1057, 1057,   66,   66,
       66,   66,  583,   66,   66,  584, 1057, 1057,   66,   66,
       66,   66,   66, 1057, 1057, 1057,   66,   66,   66,   66,
      585, 1057, 1057,   66, 1057, 1057,   66, 1057,   66,   66,
      587, 1057,   66,   66,   66, 1057,  586,   66,   66,   66,
       66,   66, 1057,   66,   66,   66, 1057, 1057,   66,   66,
      589, 1057,   66,  590,   66,  595,  588,   66,   66,   66,
      594, 1057,   66,   66,   66,   66,  592,  596, 1057, 1057,

       66, 1057, 1057,   66,   66,   66,  597,  593, 1057, 1057,
       66,   66,   66,   66, 1057,  599, 1057,   66,   66,   66,
       66, 1057, 1057, 1057,   66,   66,   66,   66, 1057,   66,
       66,   66, 1057, 1057,   66,   66,   66,   66,   66, 1057,
       66,   66,   66, 1057, 1057,   66,   66,  598, 1057,   66,
       66,   66, 1057, 1057, 1057,  601,   66,  600, 1057,   66,
       66,   66,   66,   66,  602, 1057,   66, 1057,   66,   66,
     1057,   66,  604,   66,  603, 1057,   66,   66,   66, 1057,
     1057,   66,   66,  605, 1057,   66,   66,   66,   66,   66,
     1057, 1057,   66, 1057,   66,   66, 1057,   66, 1057,  606,

     1057,   66,  608, 1057, 1057, 1057,  607,  609, 1057, 1057,
      610, 1057,   66,   66, 1057, 1057, 1057,  611,   66,  612,
     1057,   66,  613,   66,   66, 1057,  614,   66,   66,   66,
     1057, 1057,   66,   66,  618,   66,   66,  615,   66,   66,
       66, 1057, 1057,   66,   66, 1057, 1057,   66,  616,   66,
       66, 1057, 1057, 1057,  617,   66,   66,   66,   66,  619,
       66,   66,   66, 1057, 1057,   66,   66,   66,   66,   66,
     1057, 1057, 1057,   66, 1057, 1057,   66,   66,   66, 1057,
      620,  621, 1057,   66,  622,   66,   66, 1057,  623,   66,
       66, 1057, 1057,   66,   66, 1057, 1057,   66,   66,   66,

      624,  625,   66,   66,   66, 1057, 1057,   66,   66,   66,
       66,   66, 1057,   66,   66,   66, 1057, 1057,   66,   66,
      628, 1057,   66,  629,  630,   66, 1057, 1057,  627, 1057,
       66,   66,   66,   66, 1057,  631, 1057,   66,   66,   66,
       66, 1057,   66,  634,   66,  632, 1057,   66,  635, 1057,
     1057,  636, 1057,   66,   66, 1057, 1057, 1057,  637,   66,
     1057,  638,   66,   66,   66, 1057, 1057,  640, 1057,   66,
     1057,  639,   66,   66,   66, 1057, 1057, 1057, 1057,   66,
     1057,  641,   66,   66,   66,   66,   66,  642, 1057,   66,
     1057,   66,   66, 1057,  643,   66,   66,   66,   66, 1057,

     1057,   66, 1057,   66,   66, 1057,   66, 1057,  644, 1057,
      645,  646,   66,   66, 1057, 1057,   66,   66,   66, 1057,
      648,   66,   66, 1057, 1057,   66,   66,   66,  649,  647,
     1057, 1057,   66,   66,   66,   66,  650,   66,   66,   66,
     1057, 1057,   66,   66,  652,   66,   66, 1057,   66,   66,
       66, 1057, 1057,   66,   66, 1057,  651,   66,   66,   66,
     1057,  655,   66,   66,   66, 1057, 1057,   66,   66, 1057,
     1057,   66, 1057,   66,   66,  656, 1057,   66,   66,   66,
     1057,  658,   66,   66,   66,   66,   66,  660,   66,   66,
       66, 1057, 1057,   66,   66,   66,   66,   66, 1057,  662,

       66,   66, 1057,  661,   66,   66, 1057,  659,   66,   66,
       66, 1057, 1057,   66,   66,   66, 1057,  663,   66,   66,
       66,   66,   66,  664,  665, 1057,   66,   66,   66,   66,
     1057,   66,   66,   66, 1057, 1057,   66,   66, 1057,  666,
       66,   66,   66, 1057, 1057,  668, 1057,   66, 1057,  667,
       66,   66,   66,   66,   66, 1057, 1057,   66, 1057,   66,
       66, 1057,   66,  670,  669,   66,  671,   66,   66,   66,
       66,   66, 1057,   66,   66,   66,   66, 1057,   66,   66,
       66,   66,   66, 1057, 1057,   66, 1057,  674,   66,  673,
       66,   66,   66, 1057, 1057,  675, 1057,   66,   66,   66,

       66,  676,   66,   66,   66, 1057, 1057,   66,   66,   66,
       66,   66, 1057,   66,   66,   66,  677, 1057,   66,   66,
     1057,  681,   66,   66,   66,   66,   66,   66,   66,   66,
     1057,   66,   66,   66,   66,  686,   66, 1057,  683,  682,
       66,   66,   66,   66, 1057, 1057,   66, 1057,   66,   66,
     1057,   66,  688,   66,   66,   66,   66,  689, 1057,   66,
     1057,   66,   66, 1057,   66,   66,   66,  690, 1057,  691,
     1057,   66,   66,   66,   66, 1057,   66,   66,   66, 1057,
     1057,   66,   66,   66,   66,   66,  692, 1057, 1057,   66,
     1057, 1057,   66,   66,   66, 1057,  693,   66,   66,   66,

     1057, 1057,   66,   66,   66,   66,   66, 1057,  696, 1057,
       66,   66,   66,   66,  697,  694, 1057,   66,   66,   66,
       66, 1057,   66,   66,   66, 1057, 1057,   66,   66,   66,
       66,   66, 1057,   66,   66,   66, 1057, 1057,   66,   66,
       66,   66,   66,  698,   66,   66,   66, 1057, 1057,   66,
       66,   66,   66,   66, 1057,   66,   66,   66, 1057, 1057,
       66,   66, 1057,  699,   66,   66,   66,   66,   66,   66,
       66,   66, 1057,   66,   66,   66,   66,  700,   66,  701,
      703,   66, 1057,  702, 1057, 1057,   66, 1057, 1057,   66,
       66,   66,  704, 1057,   66,   66,   66, 1057, 1057,   66,

       66, 1057,  705,   66,   66,   66,   66,   66, 1057, 1057,
       66, 1057,   66,   66,  706,   66, 1057,   66,   66, 1057,
     1057,  708,  707,   66,   66,   66,   66, 1057,  709, 1057,
       66,   66,   66,   66,  710,   66,   66,   66, 1057, 1057,
      711,   66,   66,   66,   66, 1057,   66,   66,   66, 1057,
     1057,  712,   66, 1057,  713,   66,   66,   66, 1057, 1057,
       66,   66,   66, 1057,  714,   66,   66, 1057,  715,   66,
       66,   66,   66,   66, 1057, 1057,   66, 1057,   66,   66,
      717,   66, 1057,   66,   66,   66,   66, 1057,  716,   66,
     1057,   66,   66, 1057,   66,  718, 1057,   66,   66, 1057,

     1057,   66,   66,  720,  721,  719,   66,   66,   66,   66,
       66, 1057,   66,   66,   66, 1057, 1057,   66,   66, 1057,
      723,   66,   66,   66, 1057, 1057,  722, 1057,   66,  725,
       66,   66, 1057,  724, 1057,   66,   66,   66,   66, 1057,
     1057, 1057,   66, 1057, 1057,   66,   66,   66, 1057,  726,
       66,   66,   66, 1057, 1057,   66,   66,  729,   66,   66,
     1057, 1057,  728,   66,  727, 1057,   66,   66,   66,   66,
       66, 1057, 1057,   66, 1057,   66,   66,  732,   66, 1057,
       66,   66, 1057, 1057,  734,  733,   66,   66,   66,   66,
     1057,  735, 1057,   66,   66,   66,   66, 1057,   66,   66,

       66, 1057, 1057,   66,   66, 1057,  737,   66,   66,   66,
     1057,  736,   66,   66,   66, 1057, 1057,   66,   66, 1057,
     1057,   66, 1057, 1057, 1057,  739,  738,   66,   66, 1057,
      740,   66,   66,   66, 1057,  741,   66,   66,   66,   66,
       66, 1057,   66,   66,   66, 1057, 1057,   66,   66, 1057,
      742,   66,  744,   66,  743, 1057,   66,   66,   66, 1057,
     1057,   66,   66, 1057,  745,   66,   66,   66,   66,   66,
     1057, 1057,   66, 1057,   66,   66, 1057,   66,   66,   66,
     1057,  746,  747, 1057,   66,   66,   66,   66, 1057,   66,
       66,   66,  748, 1057,   66,   66,   66,   66,   66, 1057,

     1057, 1057,   66, 1057, 1057,   66,   66,   66, 1057,  750,
       66,   66,   66, 1057, 1057,   66,   66, 1057, 1057,   66,
     1057,   66,   66, 1057,  751, 1057,  752,   66,   66,   66,
       66, 1057,   66,   66,   66, 1057,  753,   66,   66, 1057,
     1057,   66,   66,   66, 1057,  755, 1057,  754,   66,   66,
       66,   66, 1057,   66,   66,   66, 1057,  757,   66,   66,
      756, 1057,   66,   66,   66,   66,   66, 1057, 1057,   66,
     1057,   66,   66, 1057,   66,   66,   66,   66,   66,  758,
     1057,   66, 1057,   66,   66, 1057,   66,   66,   66, 1057,
      759,   66,   66,   66, 1057,  760,   66,   66,   66,   66,

       66, 1057,   66,   66,   66,  761, 1057,   66,   66,   66,
       66,   66, 1057, 1057, 1057,   66,   66,   66,   66,  763,
       66,   66,   66, 1057, 1057,   66,   66, 1057,  764,   66,
       66,   66,   66,   66,   66,   66,   66, 1057,   66,   66,
       66,   66, 1057,   66,   66,   66,   66,   66, 1057,  769,
       66, 1057,   66,   66, 1057,   66, 1057,  766,   66,   66,
       66,   66,  771, 1057,   66, 1057,   66,   66, 1057,   66,
      772,   66,   66,   66,   66,   66,   66, 1057,   66,   66,
       66,   66, 1057,   66,   66,   66,  774,   66,   66,   66,
       66, 1057,   66,   66,   66,   66,  773,   66,   66,   66,

     1057, 1057,  777, 1057,   66, 1057, 1057,   66,   66,   66,
     1057,  776,   66,   66,   66, 1057,  783,   66,   66,  778,
     1057,   66,  779,   66,   66,   66,   66,  782,   66,   66,
     1057,   66,   66,   66,   66, 1057,   66,   66,   66, 1057,
     1057,  780, 1057,   66,   66,   66,   66, 1057,  781, 1057,
       66, 1057, 1057,  784,   66,   66,  785, 1057,   66,   66,
       66, 1057, 1057,   66,   66,   66,   66,  786, 1057,   66,
       66,   66, 1057, 1057,   66,   66,   66,   66,  788,  789,
       66,   66,   66, 1057,  790,   66,   66, 1057,  787,   66,
       66,   66, 1057, 1057,  791, 1057,   66,   66,   66,   66,

     1057,  792, 1057,   66,   66,   66,   66, 1057,   66,   66,
       66, 1057, 1057,   66,   66, 1057, 1057,   66, 1057, 1057,
       66,   66, 1057, 1057,  793, 1057,   66, 1057,  794,   66,
      795,   66,   66,  797,   66, 1057, 1057,   66, 1057,   66,
       66, 1057,   66,   66,   66,   66,   66, 1057,  798,   66,
      796,   66,   66,  799,   66,   66,   66, 1057, 1057,  800,
     1057,   66,   66,   66,   66, 1057,  801, 1057,   66,   66,
       66,   66, 1057, 1057, 1057,   66, 1057, 1057,   66, 1057,
       66,   66,  802,  803,   66,   66,   66, 1057, 1057,   66,
       66,   66,   66,   66, 1057,  805,   66,   66, 1057, 1057,

       66,   66, 1057,  804,   66,   66,   66, 1057, 1057,  807,
       66,   66, 1057,  806,   66,   66,   66,   66,   66, 1057,
       66,   66,   66, 1057, 1057,   66,   66, 1057,  808,  811,
       66,   66,   66,   66,   66,   66,   66,  814,   66,   66,
       66,  813, 1057,   66, 1057,   66,   66, 1057, 1057,  815,
     1057,   66, 1057,  812,   66,   66,   66,   66,   66, 1057,
     1057,   66, 1057,   66,   66, 1057,   66, 1057,  816,   66,
       66, 1057,  818,   66,   66,   66, 1057, 1057,   66,   66,
     1057,  817,   66,   66,   66,   66,   66, 1057, 1057,   66,
      820,   66,   66, 1057,   66,  821,   66,   66,   66,   66,

     1057, 1057,   66, 1057,   66,   66,  819,   66, 1057,   66,
       66, 1057, 1057,   66,   66,  823, 1057,  822,   66,   66,
       66,   66,   66, 1057, 1057,  824,   66,   66,   66,   66,
     1057,  826,  825,   66,   66,   66,   66, 1057,  828,   66,
       66, 1057, 1057,   66,   66,   66,   66,   66, 1057,  829,
     1057,   66,  827, 1057,   66,   66,   66, 1057,  830,   66,
       66,   66, 1057, 1057,   66,   66, 1057,  831,   66,   66,
       66,  833,   66, 1057, 1057,   66, 1057,   66,   66, 1057,
       66,  832,   66,   66,  834, 1057,   66,   66,   66,  835,
     1057,   66,   66,   66,   66,   66, 1057,  836, 1057,   66,

       66,   66,   66, 1057,   66,   66,   66, 1057, 1057,   66,
       66,   66,   66,   66, 1057,  838, 1057,   66,   66,   66,
       66,  839,   66,   66,   66, 1057, 1057,   66,   66,   66,
       66,   66, 1057, 1057, 1057,   66, 1057, 1057,   66, 1057,
      841, 1057,   66,   66,  845, 1057, 1057,  843,   66,   66,
       66,   66, 1057,   66,   66,   66, 1057,  847,   66,   66,
       66,   66,   66, 1057, 1057, 1057,   66,  846, 1057,   66,
      849,  850,  851,  852,  853,  854,  855,  856,   66,   66,
       66,   66,   66,   66,   66, 1057,   66,   66,   66,   66,
     1057,   66, 1057,   66,   66,  857, 1057,   66,   66,   66,

     1057,  858,   66,   66,   66,   66,   66, 1057,   66,   66,
       66, 1057, 1057,   66,   66, 1057, 1057,   66, 1057,  859,
      860,   66,   66,   66,   66,  862,   66,   66, 1057,   66,
       66,   66,   66, 1057,   66,  863,   66,   66, 1057, 1057,
      861, 1057,   66, 1057, 1057,   66,  864,   66,   66, 1057,
      865,   66,   66,   66, 1057, 1057,   66,   66,   66,   66,
       66,  866,   66,   66,   66, 1057, 1057,   66,   66, 1057,
      867,   66,   66,   66,   66,   66,   66,   66,   66, 1057,
       66,   66,   66,   66, 1057,   66, 1057,   66,   66, 1057,
     1057, 1057, 1057,   66, 1057,  868,   66,  869,   66,   66,

       66,   66,  870, 1057,   66, 1057,   66,   66, 1057,   66,
     1057,   66,   66,   66,   66, 1057,  871,   66, 1057,   66,
       66,  873,   66,  872,   66,   66,  874, 1057,   66,   66,
       66, 1057, 1057,   66,   66,   66,   66,   66, 1057,   66,
       66,   66, 1057, 1057,   66,   66, 1057, 1057,   66, 1057,
     1057,  875,   66,   66,  877,  876,   66,   66,   66,  878,
     1057,   66,   66,   66,   66,   66,  879,   66,   66,   66,
     1057, 1057,   66,   66, 1057, 1057,   66,   66,  881, 1057,
      880,   66,   66,   66,  882, 1057,   66,   66, 1057, 1057,
       66,  885,   66,   66, 1057,  886,   66,   66,   66, 1057,

     1057,   66,   66, 1057, 1057,   66,  887,   66,   66, 1057,
      888,   66,   66,   66, 1057, 1057,   66,   66,   66,   66,
       66,  891,   66,   66,   66, 1057, 1057,   66,   66,   66,
       66,   66, 1057, 1057,  889,   66,   66,   66,   66, 1057,
     1057,  890,   66, 1057,  892,   66,   66,   66,   66,   66,
     1057, 1057,   66, 1057,   66,   66,  893,   66,   66,   66,
     1057, 1057,   66,   66,   66, 1057,  894,   66,   66,   66,
       66,   66, 1057, 1057, 1057,   66, 1057, 1057,   66, 1057,
      895,  896,   66,   66,   66,   66,  898,  897,   66, 1057,
       66,   66, 1057,   66,   66,   66,   66,   66,   66,   66,

       66, 1057,   66,   66,   66,   66, 1057,   66, 1057, 1057,
      899,   66,   66, 1057,  900,   66,   66,   66, 1057, 1057,
       66,   66,   66,   66,   66,  901, 1057, 1057,   66,   66,
       66,   66,  902,   66,   66,  903, 1057, 1057,   66,   66,
       66,   66,   66, 1057,   66,   66,   66, 1057, 1057,   66,
       66,   66,   66,   66, 1057,   66,   66,   66,  904, 1057,
       66,   66,   66,   66,   66, 1057,   66,   66,   66, 1057,
     1057,   66,   66,   66,   66,   66, 1057,   66,   66,   66,
      907, 1057,   66,   66,   66,   66,   66, 1057,   66,   66,
       66, 1057, 1057,   66,   66,  908, 1057,   66,   66,   66,

       66,   66, 1057,  909,   66, 1057,   66,   66, 1057,   66,
       66,   66,   66,   66,   66,   66,   66, 1057,   66,   66,
       66,   66, 1057,   66,   66,   66,   66,   66,   66,   66,
       66, 1057,   66,   66,   66,   66, 1057,   66,   66,   66,
     1057,  911,   66,   66,   66, 1057, 1057,   66,   66,   66,
       66,   66, 1057,   66,   66,   66, 1057,  913,   66,   66,
     1057, 1057,   66,   66,   66, 1057,  912,   66,   66,   66,
     1057, 1057,   66,   66,   66,   66,   66, 1057,   66,   66,
       66, 1057, 1057,  915,   66,  914, 1057,  916,   66,   66,
     1057, 1057,   66,   66,   66, 1057,  917,   66,   66,  919,

       66,  918, 1057,   66,   66,   66, 1057, 1057,   66,   66,
       66,   66,   66, 1057,   66,   66,   66, 1057, 1057,   66,
       66,   66,   66,   66, 1057,  920, 1057,   66,   66,   66,
       66, 1057,   66,   66,   66, 1057, 1057,   66,  921,   66,
       66,   66, 1057,  922, 1057,   66,   66,   66,   66, 1057,
       66,   66,   66, 1057, 1057,   66,   66,   66,   66,   66,
     1057, 1057, 1057,   66, 1057, 1057,   66,  923,   66,   66,
      924, 1057, 1057, 1057,   66, 1057, 1057,   66,   66,   66,
     1057,  925,   66,   66,   66, 1057, 1057,   66,   66,   66,
       66,   66, 1057, 1057,  926,   66,   66,   66,   66,  927,

     1057, 1057,   66, 1057, 1057,   66,   66,   66, 1057,  928,
       66,   66,   66, 1057, 1057,  929,   66,   66,   66,  930,
     1057,   66,   66,   66, 1057,  931,   66,   66,   66,   66,
      932,  933,   66,   66,   66, 1057, 1057,   66,   66,   66,
       66,   66, 1057, 1057, 1057,   66,   66,   66,   66,  934,
       66,   66,  936,  935, 1057,   66,   66,   66,   66,   66,
      937,   66,   66,   66, 1057, 1057,   66,   66,  938, 1057,
       66,  939,   66,   66,   66, 1057, 1057,   66, 1057,   66,
       66,  940,   66,   66,   66,   66,   66,   66,   66,   66,
     1057,   66,   66,   66,   66, 1057,   66,   66,   66,  941,

     1057,   66,   66,   66, 1057,  942,   66,   66, 1057, 1057,
       66,   66,   66, 1057,  943,  945, 1057,   66, 1057,  944,
       66,   66,   66,   66,   66,   66,   66,   66, 1057,   66,
       66,   66,   66, 1057,   66,   66,   66, 1057, 1057,   66,
       66,   66, 1057,  948,   66,   66,   66,   66,   66, 1057,
     1057,  947,   66,   66,   66,   66, 1057, 1057, 1057,   66,
       66,   66,   66, 1057, 1057,  949,   66, 1057,  950,   66,
       66,   66, 1057, 1057,  951, 1057,   66,   66,   66,   66,
     1057,  952, 1057,   66,   66,   66,   66, 1057,   66,   66,
       66, 1057,  954,   66,   66, 1057, 1057,   66, 1057,   66,

      955,   66,   66, 1057,  953,   66, 1057,   66,   66, 1057,
       66,   66,   66,   66,   66,   66,   66,   66, 1057,   66,
       66,   66,   66, 1057,   66,   66,   66, 1057,  956, 1057,
     1057,   66,   66,   66,   66, 1057, 1057,  957,   66, 1057,
     1057,   66,  958,   66,   66, 1057, 1057,   66,   66,   66,
     1057,  959,   66,   66,   66,   66,   66, 1057, 1057,  960,
       66,   66,   66,   66, 1057,  961, 1057,   66,   66,   66,
       66, 1057,  962, 1057,   66,   66,   66,   66, 1057,   66,
       66,   66, 1057,  964,   66,   66, 1057, 1057,   66, 1057,
       66,  965, 1057, 1057, 1057,  963,  966,   66,   66,  967,

     1057,  968, 1057,   66,   66,   66,   66,  969,   66,   66,
       66, 1057, 1057,   66,   66,   66,   66,   66, 1057,   66,
       66,   66, 1057, 1057,   66,   66,   66,   66,   66, 1057,
       66,   66,   66, 1057, 1057,   66,  971,   66,   66,   66,
     1057,   66,   66,   66,  970, 1057,   66,   66,   66,   66,
       66, 1057,   66,   66,   66, 1057, 1057,   66,   66, 1057,
      972,   66,   66,   66, 1057, 1057, 1057, 1057,   66,  973,
     1057,   66,   66,   66, 1057,  974,  975, 1057,   66,   66,
       66,   66, 1057,  976,   66,   66, 1057, 1057,   66,   66,
       66,   66,   66, 1057, 1057, 1057,   66, 1057, 1057,   66,

       66,   66, 1057,  977,   66,   66,   66, 1057, 1057,   66,
       66,   66,   66,   66, 1057,   66,   66,   66, 1057, 1057,
       66,   66, 1057,  978,   66,   66,   66,  979, 1057, 1057,
     1057,   66, 1057, 1057,   66,  981,   66,   66,  980, 1057,
      982, 1057,   66,   66,   66,   66, 1057, 1057,  983,   66,
     1057, 1057,   66,   66,   66,  984,  985,   66,   66,   66,
     1057, 1057,   66,   66,   66,   66,   66, 1057, 1057,  986,
       66,   66,   66,   66, 1057,   66,   66,   66, 1057, 1057,
       66,   66,   66,   66,   66, 1057,   66,   66,   66, 1057,
     1057,   66,   66, 1057,  987,   66,   66,   66,  988, 1057,

     1057, 1057,   66, 1057, 1057,   66,  990,   66,   66,  989,
     1057,   66,   66,   66, 1057,  992,   66,   66,   66,   66,
       66, 1057, 1057,  991,   66, 1057, 1057,   66,   66,   66,
      994, 1057, 1057, 1057,   66,   66,   66,   66,  993,   66,
       66,   66, 1057, 1057,   66,   66,   66,   66,   66, 1057,
       66,   66,   66, 1057,  995,   66,   66,   66,   66,   66,
      996, 1057,  997,   66,   66,   66,   66, 1057,   66,  999,
       66,  998, 1057,   66,   66,   66,   66,   66, 1057,   66,
       66,   66, 1057, 1057,   66,   66, 1057, 1000,   66,   66,
       66,   66,   66, 1057, 1057,   66, 1057,   66,   66, 1057,

       66,   66,   66, 1057, 1057, 1001, 1057,   66,   66,   66,
       66, 1002,   66,   66,   66, 1057, 1057,   66,   66,   66,
       66,   66, 1057,   66,   66,   66, 1057, 1004,   66,   66,
       66,   66,   66, 1003,   66,   66,   66, 1057, 1057,   66,
       66,   66,   66,   66, 1057,   66,   66,   66, 1057, 1057,
       66,   66,   66,   66,   66, 1057,   66,   66,   66, 1057,
     1057, 1005,   66,   66,   66,   66, 1057,   66,   66,   66,
     1057, 1009, 1007,   66,   66,   66,   66, 1057, 1057, 1006,
       66, 1057, 1057,   66,   66,   66, 1008, 1010,   66,   66,
       66, 1057, 1057,   66,   66,   66,   66,   66, 1057, 1013,

     1011,   66, 1057, 1057,   66, 1057, 1012,   66,   66,   66,
       66, 1014, 1057,   66, 1057,   66,   66, 1057,   66, 1015,
       66,   66,   66,   66, 1057, 1057,   66, 1057,   66,   66,
     1057,   66,   66,   66, 1016, 1057,   66,   66,   66, 1057,
     1057,   66,   66,   66,   66,   66, 1019,   66,   66,   66,
     1021, 1022,   66,   66, 1057, 1017,   66, 1020,   66,   66,
     1023, 1024, 1057, 1018,   66, 1057, 1057,   66, 1057,   66,
       66,   66,   66,   66,   66,   66, 1057,   66,   66,   66,
       66, 1025,   66,   66,   66,   66,   66, 1057, 1026,   66,
     1057,   66,   66, 1057,   66,   66,   66,   66,   66, 1027,

     1057,   66, 1057,   66,   66, 1028,   66,   66,   66, 1057,
     1057,   66,   66,   66, 1057, 1030,   66,   66,   66,   66,
       66, 1057, 1057, 1029,   66, 1031, 1057,   66,   66,   66,
       66,   66, 1057, 1057,   66, 1057,   66,   66, 1032,   66,
       66,   66,   66,   66, 1057, 1057,   66, 1057,   66, 1033,
     1057, 1034, 1035,   66,   66, 1057, 1036,   66,   66,   66,
     1057, 1057,   66,   66,   66,   66,   66, 1057,   66,   66,
       66, 1057, 1057,   66,   66,   66,   66,   66, 1057,   66,
       66,   66, 1057, 1037,   66,   66,   66,   66,   66, 1057,
       66,   66,   66, 1057, 1057,   66,   66, 1057, 1057,   66,

       66,   66, 1057, 1038,   66,   66,   66, 1057, 1057,   66,
       66,   66,   66,   66, 1057, 1039, 1057,   66, 1057, 1057,
       66,   66,   66, 1040, 1057,   66,   66,   66, 1057, 1041,
       66,   66,   66,   66,   66, 1057, 1042, 1057,   66,   66,
       66,   66, 1057,   66,   66,   66, 1057, 1043,   66,   66,
     1057, 1044,   66,   66,   66,   66,   66,   66,   66,   66,
     1057,   66,   66,   66,   66, 1057,   66, 1045,   66,   66,
     1046, 1057,   66,   66,   66, 1057, 1047,   66,   66, 1057,
     1048,   66,   66,   66,   66,   66,   66,   66,   66, 1057,
       66,   66,   66,   66, 1057,   66, 1053, 1054, 1057, 1057,

     1057,   66,   66, 1057, 1050, 1049, 1051,   66,   66,   66,
       66, 1057,   66,   66,   66, 1055, 1056, 1052,   66,   66,
       66,   66, 1057,   66,   66,   66, 1057, 1057,   66,   66,
     1057, 1057,   66, 1057,   66,   66,   66,   66,   66,   66,
       66, 1057,   66,   66,   66,   66, 1057,   66,   66,   66,
       66,   66,   66,   66,   66, 1057,   66,   66,   66,   66,
     1057,   66,   66,   66, 1057, 1057, 1057, 1057,   66, 1057,
     1057,   66,   66,   66,   57,   57,  157,  157,  157,  157,
      155,  155,  155,  155,    3, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,

     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057
    } ;

static yyconst flex_int16_t yy_chk[6755] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
       18,   20,    5,    8,    8,   18,    8,    8,    8,    8,
      633,    8,  633,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8, 1058,   55,  905,   20,

       55,    8,    8,    8,  848,    8,  842,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   26,   58,   26,   26,   26,   62,
       30,   19,   30,   30,   30,  172,  172,  269,  269,   26,
      837,  172,  810,  172,  172,   30,   58,   67,   26,   33,
      809,   33,  775,   33,   30,   33,   33,   62,   33,   19,
       31,   33,   31,   31,   31,  364,  364,   67,  770,  768,
       31,   33,   31,   34,  154,   31,   34,  765,  762,   34,

       34,  731,   34,  730,   31,   34,   34,   31,   31,  127,
      695,   31,   31,  687,  154,   34,   31,  685,   31,  189,
      189,  189,  189,  684,  127,  127,  127,   31,   32,  678,
       32,   32,   32,  127,  672,  127,  654,   36,   36,  234,
      234,  127,  591,   32,   36,   36,  580,   36,   36,  578,
       36,   37,   32,  577,   36,   37,   36,   32,  572,   37,
       36,  571,   37,   32,   32,  570,   32,   39,   37,   32,
       37,   39,  234,  564,  545,   39,  542,  541,   39,   32,
       35,   35,   35,  526,   39,   35,   39,   35,   35,  520,
       35,  488,   35,   35,  475,  473,   38,  472,   35,   38,

      467,   40,   35,   35,   38,  466,  465,   38,   38,   40,
      459,  439,   40,   38,   40,   38,  436,  435,   40,   41,
       40,   41,   41,   41,  413,  366,   42,   41,  357,  356,
       41,  355,   41,  348,   42,  324,   41,   42,   41,   42,
       44,   43,   44,   42,  317,   42,   43,   46,   44,   43,
       44,   44,   43,   45,   44,   43,   44,   44,   43,   44,
       43,   45,   43,  286,   45,   46,  264,  243,  155,   46,
       45,   57,   45,   46,   56,   25,   46,   92,   23,   92,
       92,   92,   46,    6,   46,   47,   47,   47,    3,   47,
       47,   48,   92,   47,   47,    0,   47,   47,    0,   48,

       47,   92,   48,   47,   47,   47,    0,   48,   48,    0,
       48,   50,   49,   49,   48,   49,    0,    0,    0,   50,
       49,    0,   50,   49,  265,  265,  265,  265,   50,   49,
       50,   49,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   66,   61,  173,  173,  173,    0,
        0,   68,    0,  173,    0,    0,  173,   66,   68,   61,
       61,   61,   61,   61,    0,   66,    0,   61,   66,   61,
       61,   68,  174,  174,   66,    0,   66,    0,  174,   68,
        0,  174,   68,  175,  175,  175,    0,    0,   68,  175,
       68,    0,  175,   68,    0,    0,    0,   61,   61,   61,

       61,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   69,  267,  267,  267,  267,   63,    0,   70,   69,
        0,    0,    0,   71,   63,   63,   63,   63,   63,   63,
        0,   70,   69,    0,    0,    0,   71,    0,   70,   70,
       69,   72,   70,   69,   71,   73,   74,   71,   70,   69,
       70,   69,   71,   71,   72,   71,    0,   72,   73,   74,
        0,   75,   72,   74,    0,   72,   73,   74,   76,   73,
       74,   72,    0,   72,   75,   73,   74,   73,   74,    0,
        0,   76,   75,   77,    0,   75,    0,    0,    0,   76,
       78,   75,   76,   75,    0,   80,   77,    0,   76,   76,

       76,    0,   78,   78,   77,   79,    0,   77,   80,    0,
       81,   78,   77,   77,   78,   77,   80,    0,   79,   80,
       78,   80,   78,   81,   79,   80,   79,   80,   82,   79,
       79,   81,   84,   83,   81,   79,   81,   79,  177,  177,
       81,   82,   81,    0,  177,   84,   83,  177,    0,   82,
        0,    0,   82,   84,   83,   82,   84,   83,   82,   83,
       82,   85,   84,   83,   84,   83,  176,  176,   86,    0,
      178,  178,  176,    0,   85,  176,  178,    0,   85,  178,
        0,   86,   85,   87,  176,   85,    0,    0,   88,   86,
        0,   85,   86,   85,    0,   86,   87,   86,   86,    0,

       86,   88,    0,   89,   87,    0,   87,   87,    0,   88,
       90,    0,   88,   87,    0,   87,   89,   91,   88,    0,
       88,    0,    0,   90,   89,    0,   90,   89,    0,    0,
       91,   90,   89,   89,   90,   89,    0,    0,   91,    0,
       90,   91,   90,    0,    0,    0,    0,   91,   93,   91,
       93,   93,   93,   94,    0,   94,   94,   94,    0,    0,
       96,    0,    0,   93,    0,    0,    0,   95,   94,   95,
       95,   95,   93,   96,    0,    0,    0,   94,   93,    0,
       97,   96,   95,    0,   96,   98,    0,    0,   94,    0,
       96,   95,   96,   97,    0,    0,  179,   95,   98,    0,

        0,   97,    0,   97,   97,   99,   98,    0,    0,   98,
       97,    0,   97,   95,    0,   98,   98,   98,   99,   99,
      100,    0,  179,  179,    0,  101,   99,    0,  179,   99,
      102,  179,    0,  100,    0,   99,    0,   99,  101,    0,
        0,  100,    0,  102,  100,  100,  101,    0,  104,  101,
      100,  102,  100,  103,  102,  101,    0,  101,  105,    0,
      102,  104,  102,  102,    0,  103,  103,    0,  106,  104,
        0,  105,  104,    0,  103,    0,    0,  103,  104,  105,
      104,  106,  105,  103,  107,  103,    0,    0,  105,  106,
      105,    0,  106,    0,  108,    0,    0,  107,  106,  109,

      106,  110,    0,    0,  106,  107,  110,  108,  107,    0,
        0,  107,  109,    0,  107,  108,  107,    0,  108,  110,
      109,  111,    0,  109,  108,    0,  108,  110,    0,  109,
      110,  109,    0,  112,  111,    0,  110,    0,  110,    0,
        0,    0,  111,  113,    0,  111,  112,  114,  112,  181,
      181,  111,  111,  111,  112,  181,  113,  112,  181,  113,
      114,  115,    0,  112,  113,  112,    0,  113,  114,    0,
      114,  114,  181,  113,  115,  113,  116,  114,    0,  114,
        0,    0,  115,    0,    0,  115,  115,    0,    0,  116,
      118,  115,    0,  115,  117,    0,    0,  116,    0,    0,

      116,  116,    0,  118,  119,  116,  116,  117,  116,    0,
        0,  118,  117,    0,  118,  117,  120,  119,  117,    0,
      118,  118,  118,    0,  117,  119,  117,    0,  119,  120,
      121,  119,    0,    0,  119,    0,  119,  120,  183,  183,
      120,  120,  122,  121,  183,    0,  120,  183,  120,    0,
        0,  121,  123,    0,  121,  122,  124,    0,    0,  121,
      121,    0,  121,  122,    0,  123,  122,    0,  123,  124,
      125,    0,  122,  123,  122,    0,  123,  124,    0,    0,
      124,    0,  123,  125,  123,  125,  124,    0,  124,    0,
      126,  125,  182,  182,  125,  128,  182,    0,  182,    0,

      125,  182,  125,  126,    0,  129,    0,    0,  128,    0,
        0,  126,  126,    0,  126,  130,  128,  128,  129,  128,
      126,    0,  126,  129,    0,  128,  129,  128,  130,  129,
        0,    0,  180,  180,  180,  129,  130,  129,  180,  130,
        0,  180,  130,    0,  133,  130,  131,  130,  131,  131,
      131,  132,    0,  132,  132,  132,    0,  133,  134,    0,
        0,  131,    0,    0,    0,  133,  132,    0,  133,    0,
      131,  134,  135,  131,  133,  132,  133,  133,    0,  134,
      196,  196,  134,    0,  136,  135,  196,    0,  134,  196,
      134,    0,  135,  135,    0,    0,  135,  136,  137,    0,

      132,    0,  135,    0,  135,  136,    0,    0,  136,    0,
        0,  137,    0,    0,  136,  136,  136,    0,    0,  137,
        0,  138,  137,  138,  138,  138,  138,  138,  137,  139,
      137,  139,  139,  139,  140,    0,  138,  191,  191,  141,
        0,  191,    0,  191,  139,  138,  191,  140,    0,  142,
        0,    0,  141,  139,  143,  140,    0,    0,  140,  139,
      141,  144,  142,  141,  140,    0,  140,  143,  141,  141,
      142,  141,    0,  142,  144,  143,  143,  143,  143,  142,
        0,  142,  144,  144,  143,  144,  143,  145,  146,  184,
      184,  144,  149,  144,    0,  184,    0,    0,  184,    0,

      145,  146,  147,    0,    0,  149,    0,  184,  145,  146,
      149,  145,  146,  149,  148,  147,  149,  145,  146,  145,
      146,    0,  149,  147,  149,    0,  147,  148,    0,  147,
        0,    0,  147,    0,  147,  148,  150,  151,  148,    0,
      148,    0,    0,    0,  148,    0,  148,  187,  187,  150,
      151,  151,  150,  187,  151,    0,  187,  150,  151,  152,
      150,  151,    0,    0,  187,    0,  150,  151,  150,  151,
        0,    0,  152,  185,  185,  185,    0,    0,    0,  185,
      152,    0,  185,  152,    0,    0,  152,    0,    0,  152,
        0,  152,  157,  157,  157,  157,  157,  157,  157,  157,

      157,  157,  157,  157,    0,  157,    0,    0,    0,  160,
        0,  160,  160,  160,    0,    0,    0,    0,    0,  157,
      157,  157,  157,  157,  160,  186,  186,  157,    0,  157,
      157,  186,    0,  160,  186,  186,  160,  161,    0,  161,
      161,  161,    0,    0,    0,    0,    0,  162,    0,  162,
      162,  162,  161,    0,    0,    0,    0,  157,  157,  157,
      157,  161,  162,  163,  161,  163,  163,  163,    0,    0,
      164,  162,  164,  164,  164,    0,    0,  165,  163,  165,
      165,  165,  188,  188,    0,  164,    0,  163,  188,    0,
        0,  188,  165,  166,  164,  166,  166,  166,    0,  188,

      164,  165,    0,  167,    0,  167,  167,  167,  166,    0,
        0,  168,  163,  168,  168,  168,    0,  166,  167,    0,
        0,  165,    0,    0,    0,  170,  168,  167,    0,  169,
      166,  169,  169,  169,    0,  168,    0,  171,  170,    0,
        0,    0,    0,    0,  169,  168,  170,    0,    0,  170,
      171,  171,    0,  169,    0,  170,  171,  170,  171,  171,
        0,  171,  190,  190,  169,    0,    0,  171,  190,  171,
        0,  190,    0,  192,  192,    0,    0,  192,  190,  192,
      193,  193,  192,    0,  193,    0,  193,  194,  194,  193,
        0,    0,    0,  194,    0,  194,  194,  195,  195,  197,

      197,  195,    0,  195,    0,  197,  195,    0,  197,  197,
      198,  198,  198,    0,  199,  199,  198,  199,    0,  198,
      199,  200,  200,  199,    0,  200,    0,  200,    0,    0,
      200,  201,  201,  201,    0,  202,  202,  201,    0,    0,
      201,  202,  203,  203,  202,    0,  204,  204,  203,    0,
        0,  203,  204,    0,    0,  204,    0,  205,  205,  205,
      203,    0,    0,  204,  205,  206,  206,  205,  206,  207,
      207,  206,    0,    0,  206,  207,  208,  208,  207,    0,
      209,  209,  208,    0,  210,  208,  209,  210,    0,  209,
      211,  211,    0,    0,  211,    0,  211,  212,  212,  211,

        0,    0,    0,  212,    0,  216,  212,    0,  213,  213,
      210,  210,  213,    0,  213,  212,  210,  213,    0,  210,
      214,  214,    0,  214,  215,  215,  214,    0,    0,  214,
      215,  216,  216,  215,    0,  216,    0,  216,  217,  217,
      216,    0,    0,  215,  217,  218,  218,  217,  216,  217,
        0,  218,    0,    0,  218,    0,  219,  219,  219,  220,
      220,    0,  218,  219,    0,  220,  219,  220,  220,  221,
      221,    0,    0,  221,    0,  221,  222,  222,  221,    0,
      222,    0,  222,  223,  223,  222,    0,  223,    0,  223,
      224,  224,  223,    0,  222,    0,  224,  225,  225,  224,

      225,    0,    0,  225,  226,  226,  225,    0,    0,  226,
      226,    0,    0,  226,  227,  227,  227,  228,  228,    0,
      227,  227,    0,  228,  227,    0,  228,  229,  229,    0,
        0,    0,  232,  229,  228,    0,  229,  230,  230,    0,
        0,    0,  230,  230,    0,  229,  230,  231,  231,    0,
      232,  232,  232,  231,    0,    0,  231,  232,  232,    0,
      232,  233,  233,    0,    0,  235,  235,  233,  235,  233,
      233,  235,  236,  236,  235,    0,    0,    0,  236,  237,
      237,  236,  235,  237,    0,  237,  238,  238,  237,    0,
        0,    0,  238,    0,    0,  238,  239,  239,  244,  238,

      240,  240,  239,    0,    0,  239,  240,  241,  241,  240,
      245,  242,  242,  241,    0,    0,  241,  242,    0,    0,
      242,  240,  246,  246,  244,  244,  247,  247,  246,    0,
      244,  246,  250,  244,    0,    0,  245,  245,    0,    0,
      246,  246,  245,  248,  248,  245,    0,  247,  247,  248,
        0,    0,  248,  247,  249,  249,  247,    0,  250,  250,
      249,  248,  252,  249,  250,    0,    0,  250,    0,  251,
      251,  253,  253,    0,  249,  251,    0,  253,  251,  253,
      253,    0,    0,  251,    0,    0,    0,  252,  252,  252,
      254,  254,    0,  252,  252,  254,  254,  252,    0,  254,

      255,  255,  256,  256,    0,  252,  255,    0,  256,  255,
        0,  256,    0,    0,    0,    0,  255,    0,  255,  256,
      257,  257,  258,  258,  257,    0,  257,    0,  258,  257,
        0,  258,  259,  259,  259,  258,    0,  260,  260,  259,
        0,    0,  259,  260,  261,  261,  260,    0,  262,  262,
      261,    0,    0,  261,  262,    0,    0,  262,  263,  263,
      263,  266,  266,    0,  262,  263,    0,  266,  263,    0,
      266,  268,  268,  270,  270,  274,  274,  268,    0,  270,
      268,  274,  270,  266,  274,  271,  271,  274,    0,  270,
        0,  271,  271,  268,  271,  272,  272,    0,    0,  272,

        0,  272,  273,  273,  272,    0,  273,    0,  273,  276,
      276,  273,  275,  275,  275,  276,    0,  275,  276,  275,
      276,    0,  275,  277,  277,  278,  278,  279,  279,  277,
        0,  278,  277,  279,  278,  278,  279,    0,    0,    0,
      280,  280,  277,  279,  280,    0,  280,  281,  281,  280,
        0,  282,  282,  281,    0,  282,  281,  282,  283,  283,
      282,  284,  284,  284,  283,    0,    0,  283,  284,    0,
      284,  284,  284,    0,  285,  285,    0,    0,  287,  287,
      285,    0,  284,  285,  287,    0,    0,  287,  288,  288,
        0,  285,  289,  289,  288,    0,    0,  288,  289,  290,

      290,  289,    0,  291,  291,  290,    0,    0,  290,  291,
        0,  291,  291,    0,  292,  292,    0,    0,  293,  293,
      292,    0,  290,  292,  293,  292,    0,  293,  294,  294,
        0,    0,    0,    0,  294,    0,    0,  294,  295,  295,
        0,  293,  295,    0,  295,  300,  300,  295,    0,  301,
      301,  300,    0,    0,  300,  301,    0,    0,  301,    0,
      302,  302,    0,    0,    0,  301,  302,    0,  300,  302,
      303,  303,    0,    0,  302,    0,  303,  304,  304,  303,
        0,    0,  303,  304,  305,  305,  304,  304,    0,    0,
      305,  307,  307,  305,  306,  306,  306,  307,    0,    0,

      307,  306,  308,  308,  306,    0,  308,    0,  308,  307,
        0,  308,  309,  309,  309,    0,  310,  310,  309,    0,
        0,  309,  310,    0,    0,  310,  311,  311,    0,  310,
      311,    0,  311,  312,  312,  311,  318,  313,  313,  312,
        0,    0,  312,  313,    0,    0,  313,    0,  314,  314,
      315,  315,    0,  313,  314,    0,  315,  314,    0,  315,
      316,  316,  318,  318,  319,  319,  316,  316,  318,  316,
      319,  318,    0,  319,  320,  320,    0,    0,  321,  321,
      320,    0,  320,  320,  321,  322,  322,  321,    0,  323,
      323,  322,    0,    0,  322,  323,  325,  325,  323,    0,

      326,  326,  325,    0,  326,  325,  326,  323,    0,  326,
      327,  327,    0,    0,  328,  328,  327,    0,  328,  327,
      328,  329,  329,  328,    0,  330,  330,  329,    0,    0,
      329,  330,  331,  331,  330,    0,    0,    0,  331,    0,
        0,  331,    0,  332,  332,  333,  333,    0,  331,  332,
        0,  333,  332,  333,  333,  332,  334,  334,  335,  335,
      336,  336,  334,    0,  335,  334,  336,  335,    0,  336,
      337,  337,    0,    0,  338,  338,  337,    0,    0,  337,
      338,  336,  338,  338,  339,  339,    0,  337,    0,    0,
      339,    0,  339,  339,  340,  340,  341,  341,  340,    0,

      340,    0,  341,  340,  341,  341,  342,  342,  343,  343,
      345,  345,  342,  343,  343,  342,    0,  343,  344,  344,
        0,  344,    0,    0,  344,    0,    0,  344,    0,  349,
      349,  345,  345,  350,  350,  349,    0,  345,  349,  350,
      345,  350,  350,  351,  351,  352,  352,    0,  349,  351,
        0,  352,  351,    0,  352,  353,  353,  354,  354,  351,
        0,  353,    0,  354,  353,    0,  354,  358,  358,    0,
        0,  353,    0,  358,    0,  358,  358,  359,  359,  360,
      360,  361,  361,  359,    0,  360,  359,  361,  360,    0,
      361,  362,  362,  359,    0,  363,  363,  362,    0,  363,

      362,  363,  367,  367,  363,  365,  365,  365,  367,  362,
      367,  367,  365,    0,    0,  365,  368,  368,    0,  367,
      369,  369,  368,    0,  368,  368,  369,    0,  369,  369,
      370,  370,  371,  371,    0,    0,  370,    0,  371,  370,
      371,  371,    0,  372,  372,  373,  373,    0,  370,  372,
        0,  373,  372,  373,  373,    0,  374,  374,  375,  375,
        0,  372,  374,  378,  375,  374,    0,  375,    0,  376,
      376,    0,    0,    0,  374,  376,  377,  377,  376,  377,
        0,    0,  377,  384,    0,  377,  384,  376,  378,  378,
      378,  379,  379,  389,    0,  378,  389,  379,  378,    0,

      379,    0,  379,  384,  384,  393,    0,    0,    0,  384,
        0,    0,  384,  389,  389,  392,  392,    0,    0,  389,
        0,  392,  389,    0,  392,  393,  393,    0,  392,  394,
      394,  393,    0,    0,  393,  394,  395,  395,  394,    0,
        0,    0,  395,  396,  396,  395,  394,  397,  397,  396,
        0,    0,  396,  397,  396,    0,  397,  398,  398,  395,
      397,  397,    0,  398,  397,    0,  398,  398,  399,  399,
        0,  400,  400,  400,  399,    0,    0,  399,  400,    0,
      399,  400,  401,  401,  402,  402,  403,  403,  401,    0,
      402,  401,  403,  402,    0,  403,  404,  404,  405,  405,

      401,    0,  404,    0,  405,  404,    0,  405,    0,  403,
      405,  406,  406,    0,    0,  407,  407,  406,    0,  404,
      406,  407,    0,  406,  407,  408,  408,  408,  408,  409,
      409,  408,  407,    0,  408,  409,  410,  410,  409,    0,
      409,    0,  410,    0,    0,  410,  411,  411,    0,  410,
      411,    0,  411,  412,  412,  411,    0,  414,  414,  412,
        0,    0,  412,  414,    0,    0,  414,    0,    0,    0,
      412,  415,  415,  415,  414,  419,  416,  416,  415,    0,
        0,  415,  416,    0,    0,  416,    0,    0,  416,  417,
      417,  417,    0,  418,  418,  418,  417,    0,    0,  417,

      418,  419,  419,  418,  420,  420,  420,  419,    0,    0,
      419,  420,  421,  421,  420,    0,  422,  422,  421,    0,
        0,  421,  422,  423,  423,  422,  421,    0,  422,  423,
      424,  424,  423,  424,  425,  425,  424,    0,    0,  424,
      425,  423,    0,  425,  426,  426,  426,    0,    0,    0,
      426,    0,    0,  426,  427,  427,    0,  425,  428,  428,
      427,    0,  427,  427,  428,    0,    0,  428,    0,  429,
      429,    0,    0,    0,  428,  429,  430,  430,  429,  430,
        0,    0,  430,    0,    0,  430,  431,  431,  431,  432,
      432,  432,    0,  431,    0,  432,  431,    0,  432,  433,

      433,    0,    0,  433,    0,  433,  434,  434,  433,    0,
      434,    0,  434,  437,  437,  434,    0,  438,  438,  437,
        0,    0,  437,  438,    0,    0,  438,  440,  440,  440,
      438,  441,  441,  440,    0,    0,  440,  441,  442,  442,
      441,  441,  443,  443,  442,    0,  443,  442,  443,  444,
      444,  443,    0,  445,  445,  444,  442,    0,  444,  445,
      446,  446,  445,    0,  447,  447,  446,    0,    0,  446,
      447,  445,    0,  447,  448,  448,  448,    0,  446,  449,
      449,  448,  447,  449,  448,  449,  450,  450,  449,    0,
        0,    0,  450,  451,  451,  450,  450,    0,    0,  451,

        0,    0,  451,  452,  452,  452,    0,  453,  453,  452,
        0,    0,  452,  453,  454,  454,  453,  453,  455,  455,
      454,  457,    0,  454,  455,  454,  455,  455,  456,  456,
      456,  458,    0,  460,  460,  456,    0,    0,  456,  460,
      457,  457,  460,    0,    0,    0,  457,    0,    0,  457,
      461,  461,  458,  458,  462,  462,  461,    0,  458,  461,
      462,  458,  461,  462,  463,  463,  464,  464,  463,    0,
      463,    0,  464,  463,  462,  464,  468,  468,    0,  464,
        0,    0,  468,    0,    0,  468,  469,  469,    0,  468,
      469,    0,  469,  470,  470,  469,    0,  470,    0,  470,

      471,  471,  470,    0,  474,  474,  471,    0,    0,  471,
      474,  476,  476,  474,  476,  477,  477,  476,    0,  477,
      476,  477,  478,  478,  477,  474,    0,    0,  478,  479,
      479,  478,  478,  480,  480,  479,    0,    0,  479,  480,
      481,  481,  480,    0,    0,    0,  481,  482,  482,  481,
      481,    0,    0,  482,    0,    0,  482,    0,  483,  483,
      483,    0,  484,  484,  483,    0,  482,  483,  484,  485,
      485,  484,    0,  486,  486,  485,    0,    0,  485,  486,
      486,    0,  486,  487,  487,  492,  484,  489,  489,  487,
      491,    0,  487,  489,  490,  490,  489,  493,    0,    0,

      490,    0,    0,  490,  492,  492,  494,  490,    0,    0,
      492,  491,  491,  492,    0,  496,    0,  491,  493,  493,
      491,    0,    0,    0,  493,  494,  494,  493,    0,  495,
      495,  494,    0,    0,  494,  495,  496,  496,  495,    0,
      497,  497,  496,    0,    0,  496,  497,  495,    0,  497,
      498,  498,    0,    0,    0,  498,  498,  497,    0,  498,
      499,  499,  500,  500,  499,    0,  499,    0,  500,  499,
        0,  500,  501,  501,  500,    0,  502,  502,  501,    0,
        0,  501,  502,  502,    0,  502,  503,  503,  504,  504,
        0,    0,  503,    0,  504,  503,    0,  504,    0,  503,

        0,  505,  505,    0,    0,    0,  504,  505,    0,    0,
      505,    0,  506,  506,    0,    0,    0,  505,  506,  506,
        0,  506,  507,  507,  507,    0,  508,  508,  508,  507,
        0,    0,  507,  508,  511,  511,  508,  509,  509,  509,
      511,    0,    0,  511,  509,    0,    0,  509,  510,  510,
      510,    0,    0,    0,  510,  510,  512,  512,  510,  512,
      513,  513,  512,    0,    0,  512,  513,  514,  514,  513,
        0,    0,    0,  514,    0,    0,  514,  515,  515,    0,
      514,  515,    0,  515,  516,  516,  515,    0,  517,  517,
      516,    0,    0,  516,  517,    0,    0,  517,  518,  518,

      518,  519,  519,  519,  518,    0,    0,  518,  519,  521,
      521,  519,    0,  522,  522,  521,    0,    0,  521,  522,
      522,    0,  522,  522,  523,  523,    0,    0,  521,    0,
      523,  524,  524,  523,    0,  524,    0,  524,  525,  525,
      524,    0,  527,  527,  525,  525,    0,  525,  527,    0,
        0,  527,    0,  528,  528,    0,    0,    0,  527,  528,
        0,  527,  528,  529,  529,    0,    0,  529,    0,  529,
        0,  528,  529,  530,  530,    0,    0,    0,    0,  530,
        0,  530,  530,  531,  531,  532,  532,  531,    0,  531,
        0,  532,  531,    0,  532,  533,  533,  534,  534,    0,

        0,  533,    0,  534,  533,    0,  534,    0,  533,    0,
      534,  535,  535,  535,    0,    0,  536,  536,  535,    0,
      536,  535,  536,    0,    0,  536,  537,  537,  537,  535,
        0,    0,  537,  539,  539,  537,  538,  538,  538,  539,
        0,    0,  539,  538,  540,  540,  538,    0,  543,  543,
      540,    0,    0,  540,  543,    0,  539,  543,  544,  544,
        0,  543,  546,  546,  544,    0,    0,  544,  546,    0,
        0,  546,    0,  547,  547,  544,    0,  548,  548,  547,
        0,  546,  547,  548,  549,  549,  548,  550,  550,  550,
      549,    0,    0,  549,  550,  551,  551,  550,    0,  552,

      552,  551,    0,  551,  551,  552,    0,  549,  552,  553,
      553,    0,    0,  554,  554,  553,    0,  553,  553,  554,
      555,  555,  554,  554,  555,    0,  555,  556,  556,  555,
        0,  557,  557,  556,    0,    0,  556,  557,    0,  556,
      557,  558,  558,    0,    0,  558,    0,  558,    0,  557,
      558,  559,  559,  560,  560,    0,    0,  559,    0,  560,
      559,    0,  560,  560,  559,  561,  561,  562,  562,  563,
      563,  561,    0,  562,  561,  563,  562,    0,  563,  565,
      565,  566,  566,    0,    0,  565,    0,  566,  565,  565,
      566,  567,  567,    0,    0,  567,    0,  567,  569,  569,

      567,  568,  568,  568,  569,    0,    0,  569,  568,  573,
      573,  568,    0,  574,  574,  573,  569,    0,  573,  574,
        0,  573,  574,  575,  575,  576,  576,  579,  579,  575,
        0,  576,  575,  579,  576,  579,  579,    0,  576,  575,
      581,  581,  582,  582,    0,    0,  581,    0,  582,  581,
        0,  582,  582,  583,  583,  584,  584,  583,    0,  583,
        0,  584,  583,    0,  584,  585,  585,  584,    0,  585,
        0,  585,  586,  586,  585,    0,  587,  587,  586,    0,
        0,  586,  587,  588,  588,  587,  586,    0,    0,  588,
        0,    0,  588,  589,  589,    0,  588,  590,  590,  589,

        0,    0,  589,  590,  592,  592,  590,    0,  592,    0,
      592,  593,  593,  592,  593,  590,    0,  593,  594,  594,
      593,    0,  595,  595,  594,    0,    0,  594,  595,  596,
      596,  595,    0,  597,  597,  596,    0,    0,  596,  597,
      598,  598,  597,  599,  599,  599,  598,    0,    0,  598,
      599,  600,  600,  599,    0,  601,  601,  600,    0,    0,
      600,  601,    0,  601,  601,  602,  602,  604,  604,  603,
      603,  602,    0,  604,  602,  603,  604,  602,  603,  603,
      605,  605,    0,  604,    0,    0,  605,    0,    0,  605,
      606,  606,  606,    0,  607,  607,  606,    0,    0,  606,

      607,    0,  607,  607,  608,  608,  609,  609,    0,    0,
      608,    0,  609,  608,  608,  609,    0,  610,  610,    0,
        0,  610,  609,  610,  611,  611,  610,    0,  611,    0,
      611,  613,  613,  611,  612,  612,  612,  613,    0,    0,
      613,  612,  614,  614,  612,    0,  615,  615,  614,    0,
        0,  614,  615,    0,  615,  615,  616,  616,    0,    0,
      617,  617,  616,    0,  616,  616,  617,    0,  617,  617,
      618,  618,  619,  619,    0,    0,  618,    0,  619,  618,
      619,  619,    0,  620,  620,  621,  621,    0,  618,  620,
        0,  621,  620,    0,  621,  620,    0,  622,  622,    0,

        0,  623,  623,  622,  623,  621,  622,  623,  624,  624,
      623,    0,  625,  625,  624,    0,    0,  624,  625,    0,
      625,  625,  627,  627,    0,    0,  624,    0,  627,  628,
      628,  627,    0,  627,    0,  628,  629,  629,  628,    0,
        0,    0,  629,    0,    0,  629,  630,  630,    0,  629,
      631,  631,  630,    0,    0,  630,  631,  632,  632,  631,
        0,    0,  631,  632,  630,    0,  632,  634,  634,  635,
      635,    0,    0,  634,    0,  635,  634,  634,  635,    0,
      636,  636,    0,    0,  636,  635,  636,  637,  637,  636,
        0,  637,    0,  637,  638,  638,  637,    0,  639,  639,

      638,    0,    0,  638,  639,    0,  639,  639,  640,  640,
        0,  638,  641,  641,  640,    0,    0,  640,  641,    0,
        0,  641,    0,    0,    0,  641,  640,  642,  642,    0,
      642,  643,  643,  642,    0,  643,  642,  643,  644,  644,
      643,    0,  645,  645,  644,    0,    0,  644,  645,    0,
      644,  645,  646,  646,  645,    0,  647,  647,  646,    0,
        0,  646,  647,    0,  647,  647,  648,  648,  649,  649,
        0,    0,  648,    0,  649,  648,    0,  649,  650,  650,
        0,  649,  650,    0,  650,  651,  651,  650,    0,  652,
      652,  651,  652,    0,  651,  652,  655,  655,  652,    0,

        0,    0,  655,    0,    0,  655,  656,  656,    0,  655,
      658,  658,  656,    0,    0,  656,  658,    0,    0,  658,
        0,  659,  659,    0,  656,    0,  658,  659,  660,  660,
      659,    0,  661,  661,  660,    0,  660,  660,  661,    0,
        0,  661,  662,  662,    0,  661,    0,  660,  662,  663,
      663,  662,    0,  664,  664,  663,    0,  664,  663,  664,
      663,    0,  664,  665,  665,  666,  666,    0,    0,  665,
        0,  666,  665,    0,  666,  667,  667,  668,  668,  667,
        0,  667,    0,  668,  667,    0,  668,  669,  669,    0,
      669,  670,  670,  669,    0,  670,  669,  670,  671,  671,

      670,    0,  673,  673,  671,  671,    0,  671,  673,  674,
      674,  673,    0,    0,    0,  674,  675,  675,  674,  674,
      676,  676,  675,    0,    0,  675,  676,    0,  676,  676,
      677,  677,  681,  681,  682,  682,  677,    0,  681,  677,
      682,  681,    0,  682,  683,  683,  686,  686,    0,  686,
      683,    0,  686,  683,    0,  686,    0,  683,  688,  688,
      689,  689,  688,    0,  688,    0,  689,  688,    0,  689,
      690,  690,  691,  691,  692,  692,  690,    0,  691,  690,
      692,  691,    0,  692,  693,  693,  694,  694,  696,  696,
      693,    0,  694,  693,  696,  694,  693,  696,  697,  697,

        0,    0,  697,    0,  697,    0,    0,  697,  698,  698,
        0,  696,  699,  699,  698,    0,  703,  698,  699,  698,
        0,  699,  699,  700,  700,  701,  701,  702,  702,  700,
        0,  701,  700,  702,  701,    0,  702,  703,  703,    0,
        0,  700,    0,  703,  704,  704,  703,    0,  701,    0,
      704,    0,    0,  704,  705,  705,  705,    0,  706,  706,
      705,    0,    0,  705,  706,  707,  707,  706,    0,  708,
      708,  707,    0,    0,  707,  708,  709,  709,  708,  709,
      710,  710,  709,    0,  710,  709,  710,    0,  707,  710,
      711,  711,    0,    0,  711,    0,  711,  712,  712,  711,

        0,  712,    0,  712,  713,  713,  712,    0,  714,  714,
      713,    0,    0,  713,  714,    0,    0,  714,    0,    0,
      715,  715,    0,    0,  713,    0,  715,    0,  714,  715,
      715,  716,  716,  717,  717,    0,    0,  716,    0,  717,
      716,    0,  717,  718,  718,  719,  719,    0,  718,  718,
      716,  719,  718,  719,  719,  720,  720,    0,    0,  720,
        0,  720,  721,  721,  720,    0,  721,    0,  721,  722,
      722,  721,    0,    0,    0,  722,    0,    0,  722,    0,
      723,  723,  722,  723,  724,  724,  723,    0,    0,  723,
      724,  725,  725,  724,    0,  726,  726,  725,    0,    0,

      725,  726,    0,  725,  726,  727,  727,    0,    0,  728,
      728,  727,    0,  727,  727,  728,  729,  729,  728,    0,
      732,  732,  729,    0,    0,  729,  732,    0,  729,  732,
      733,  733,  734,  734,  735,  735,  733,  735,  734,  733,
      735,  734,    0,  735,    0,  736,  736,    0,    0,  736,
        0,  736,    0,  733,  736,  737,  737,  738,  738,    0,
        0,  737,    0,  738,  737,    0,  738,    0,  737,  739,
      739,    0,  740,  740,  740,  739,    0,    0,  739,  740,
        0,  739,  740,  741,  741,  742,  742,    0,    0,  741,
      742,  742,  741,    0,  742,  743,  743,  743,  744,  744,

        0,    0,  743,    0,  744,  743,  741,  744,    0,  745,
      745,    0,    0,  746,  746,  745,    0,  744,  745,  746,
      747,  747,  746,    0,    0,  746,  747,  748,  748,  747,
        0,  748,  747,  748,  750,  750,  748,    0,  751,  751,
      750,    0,    0,  750,  751,  752,  752,  751,    0,  752,
        0,  752,  750,    0,  752,  753,  753,    0,  753,  754,
      754,  753,    0,    0,  753,  754,    0,  754,  754,  755,
      755,  756,  756,    0,    0,  755,    0,  756,  755,    0,
      756,  755,  757,  757,  757,    0,  758,  758,  757,  758,
        0,  757,  758,  759,  759,  758,    0,  759,    0,  759,

      760,  760,  759,    0,  761,  761,  760,    0,    0,  760,
      761,  763,  763,  761,    0,  763,    0,  763,  764,  764,
      763,  764,  766,  766,  764,    0,    0,  764,  766,  769,
      769,  766,    0,    0,    0,  769,    0,    0,  769,    0,
      766,    0,  771,  771,  771,    0,    0,  769,  771,  772,
      772,  771,    0,  773,  773,  772,    0,  773,  772,  773,
      774,  774,  773,    0,    0,    0,  774,  772,    0,  774,
      776,  776,  776,  776,  776,  776,  776,  776,  777,  777,
      780,  780,  778,  778,  777,    0,  780,  777,  778,  780,
        0,  778,    0,  776,  776,  778,    0,  779,  779,  776,

        0,  779,  776,  779,  781,  781,  779,    0,  782,  782,
      781,    0,    0,  781,  782,    0,    0,  782,    0,  782,
      783,  783,  783,  784,  784,  785,  785,  783,    0,  784,
      783,  785,  784,    0,  785,  786,  786,  786,    0,    0,
      784,    0,  786,    0,    0,  786,  787,  787,  787,    0,
      788,  788,  788,  787,    0,    0,  787,  788,  790,  790,
      788,  789,  789,  789,  790,    0,    0,  790,  789,    0,
      790,  789,  791,  791,  792,  792,  793,  793,  791,    0,
      792,  791,  793,  792,    0,  793,    0,  794,  794,    0,
        0,    0,    0,  794,    0,  791,  794,  792,  795,  795,

      796,  796,  795,    0,  795,    0,  796,  795,    0,  796,
        0,  797,  797,  798,  798,    0,  796,  797,    0,  798,
      797,  798,  798,  797,  799,  799,  799,    0,  800,  800,
      799,    0,    0,  799,  800,  801,  801,  800,    0,  802,
      802,  801,    0,    0,  801,  802,    0,    0,  802,    0,
        0,  801,  803,  803,  803,  802,  804,  804,  803,  804,
        0,  803,  804,  805,  805,  804,  805,  806,  806,  805,
        0,    0,  805,  806,    0,    0,  806,  807,  807,    0,
      806,  808,  808,  807,  808,    0,  807,  808,    0,    0,
      808,  811,  811,  811,    0,  812,  812,  812,  811,    0,

        0,  811,  812,    0,    0,  812,  813,  813,  813,    0,
      814,  814,  814,  813,    0,    0,  813,  814,  815,  815,
      814,  817,  817,  817,  815,    0,    0,  815,  817,  816,
      816,  817,    0,    0,  815,  816,  818,  818,  816,    0,
        0,  816,  818,    0,  818,  818,  819,  819,  820,  820,
        0,    0,  819,    0,  820,  819,  820,  820,  821,  821,
        0,    0,  822,  822,  821,    0,  821,  821,  822,  823,
      823,  822,    0,    0,    0,  823,    0,    0,  823,    0,
      822,  823,  824,  824,  825,  825,  825,  824,  824,    0,
      825,  824,    0,  825,  826,  826,  827,  827,  828,  828,

      826,    0,  827,  826,  828,  827,    0,  828,    0,    0,
      826,  829,  829,    0,  828,  830,  830,  829,    0,    0,
      829,  830,  831,  831,  830,  831,    0,    0,  831,  833,
      833,  831,  832,  832,  832,  833,    0,    0,  833,  832,
      834,  834,  832,    0,  835,  835,  834,    0,    0,  834,
      835,  836,  836,  835,    0,  838,  838,  836,  834,    0,
      836,  838,  839,  839,  838,    0,  841,  841,  839,    0,
        0,  839,  841,  843,  843,  841,    0,  845,  845,  843,
      843,    0,  843,  845,  846,  846,  845,    0,  847,  847,
      846,    0,    0,  846,  847,  845,    0,  847,  849,  849,

      850,  850,    0,  846,  849,    0,  850,  849,    0,  850,
      851,  851,  852,  852,  853,  853,  851,    0,  852,  851,
      853,  852,    0,  853,  854,  854,  855,  855,  856,  856,
      854,    0,  855,  854,  856,  855,    0,  856,  857,  857,
        0,  857,  858,  858,  857,    0,    0,  857,  858,  859,
      859,  858,    0,  860,  860,  859,    0,  860,  859,  860,
        0,    0,  860,  861,  861,    0,  859,  862,  862,  861,
        0,    0,  861,  862,  863,  863,  862,    0,  864,  864,
      863,    0,    0,  863,  864,  862,    0,  864,  865,  865,
        0,    0,  866,  866,  865,    0,  865,  865,  866,  867,

      867,  866,    0,  868,  868,  867,    0,    0,  867,  868,
      869,  869,  868,    0,  870,  870,  869,    0,    0,  869,
      870,  871,  871,  870,    0,  871,    0,  871,  872,  872,
      871,    0,  873,  873,  872,    0,    0,  872,  873,  874,
      874,  873,    0,  874,    0,  874,  875,  875,  874,    0,
      876,  876,  875,    0,    0,  875,  876,  877,  877,  876,
        0,    0,    0,  877,    0,    0,  877,  876,  878,  878,
      877,    0,    0,    0,  878,    0,    0,  878,  879,  879,
        0,  878,  880,  880,  879,    0,    0,  879,  880,  881,
      881,  880,    0,    0,  880,  881,  882,  882,  881,  881,

        0,    0,  882,    0,    0,  882,  885,  885,    0,  882,
      886,  886,  885,    0,    0,  885,  886,  887,  887,  886,
        0,  888,  888,  887,    0,  887,  887,  888,  890,  890,
      888,  889,  889,  889,  890,    0,    0,  890,  889,  891,
      891,  889,    0,    0,    0,  891,  893,  893,  891,  891,
      892,  892,  893,  892,    0,  893,  892,  894,  894,  892,
      894,  895,  895,  894,    0,    0,  894,  895,  895,    0,
      895,  896,  896,  897,  897,    0,    0,  896,    0,  897,
      896,  897,  897,  898,  898,  899,  899,  900,  900,  898,
        0,  899,  898,  900,  899,    0,  900,  901,  901,  898,

        0,  902,  902,  901,    0,  900,  901,  902,    0,    0,
      902,  903,  903,    0,  902,  903,    0,  903,    0,  902,
      903,  904,  904,  907,  907,  908,  908,  904,    0,  907,
      904,  908,  907,    0,  908,  909,  909,    0,    0,  911,
      911,  909,    0,  911,  909,  911,  912,  912,  911,    0,
        0,  909,  912,  913,  913,  912,    0,    0,    0,  913,
      914,  914,  913,    0,    0,  913,  914,    0,  914,  914,
      915,  915,    0,    0,  915,    0,  915,  916,  916,  915,
        0,  916,    0,  916,  917,  917,  916,    0,  918,  918,
      917,    0,  918,  917,  918,    0,    0,  918,    0,  919,

      919,  920,  920,    0,  917,  919,    0,  920,  919,    0,
      920,  921,  921,  922,  922,  923,  923,  921,    0,  922,
      921,  923,  922,    0,  923,  924,  924,    0,  924,    0,
        0,  924,  925,  925,  924,    0,    0,  925,  925,    0,
        0,  925,  926,  926,  926,    0,    0,  927,  927,  926,
        0,  927,  926,  927,  928,  928,  927,    0,    0,  928,
      928,  929,  929,  928,    0,  929,    0,  929,  930,  930,
      929,    0,  930,    0,  930,  931,  931,  930,    0,  932,
      932,  931,    0,  932,  931,  932,    0,    0,  932,    0,
      933,  933,    0,    0,    0,  931,  933,  934,  934,  933,

        0,  934,    0,  934,  936,  936,  934,  935,  935,  935,
      936,    0,    0,  936,  935,  937,  937,  935,    0,  938,
      938,  937,    0,    0,  937,  938,  939,  939,  938,    0,
      940,  940,  939,    0,    0,  939,  940,  941,  941,  940,
        0,  942,  942,  941,  939,    0,  941,  942,  943,  943,
      942,    0,  944,  944,  943,    0,    0,  943,  944,    0,
      941,  944,  945,  945,    0,    0,    0,    0,  945,  943,
        0,  945,  947,  947,    0,  944,  947,    0,  947,  948,
      948,  947,    0,  949,  949,  948,    0,    0,  948,  949,
      950,  950,  949,    0,    0,    0,  950,    0,    0,  950,

      951,  951,    0,  950,  952,  952,  951,    0,    0,  951,
      952,  953,  953,  952,    0,  954,  954,  953,    0,    0,
      953,  954,    0,  951,  954,  955,  955,  952,    0,    0,
        0,  955,    0,    0,  955,  955,  956,  956,  954,    0,
      956,    0,  956,  957,  957,  956,    0,    0,  957,  957,
        0,    0,  957,  958,  958,  958,  958,  959,  959,  958,
        0,    0,  958,  959,  960,  960,  959,    0,    0,  960,
      960,  961,  961,  960,    0,  962,  962,  961,    0,    0,
      961,  962,  963,  963,  962,    0,  964,  964,  963,    0,
        0,  963,  964,    0,  961,  964,  965,  965,  962,    0,

        0,    0,  965,    0,    0,  965,  965,  966,  966,  964,
        0,  967,  967,  966,    0,  967,  966,  967,  968,  968,
      967,    0,    0,  966,  968,    0,    0,  968,  969,  969,
      969,    0,    0,    0,  969,  970,  970,  969,  968,  971,
      971,  970,    0,    0,  970,  971,  972,  972,  971,    0,
      973,  973,  972,    0,  970,  972,  973,  974,  974,  973,
      972,    0,  973,  974,  975,  975,  974,    0,  976,  976,
      975,  974,    0,  975,  976,  977,  977,  976,    0,  978,
      978,  977,    0,    0,  977,  978,    0,  977,  978,  979,
      979,  980,  980,    0,    0,  979,    0,  980,  979,    0,

      980,  981,  981,    0,    0,  981,    0,  981,  983,  983,
      981,  982,  982,  982,  983,    0,    0,  983,  982,  984,
      984,  982,    0,  985,  985,  984,    0,  985,  984,  985,
      986,  986,  985,  984,  987,  987,  986,    0,    0,  986,
      987,  988,  988,  987,    0,  989,  989,  988,    0,    0,
      988,  989,  990,  990,  989,    0,  991,  991,  990,    0,
        0,  990,  991,  992,  992,  991,    0,  993,  993,  992,
        0,  993,  992,  993,  994,  994,  993,    0,    0,  991,
      994,    0,    0,  994,  995,  995,  992,  994,  996,  996,
      995,    0,    0,  995,  996,  997,  997,  996,    0,  997,

      995,  997,    0,    0,  997,    0,  996,  998,  998,  999,
      999,  998,    0,  998,    0,  999,  998,    0,  999,  999,
     1000, 1000, 1001, 1001,    0,    0, 1000,    0, 1001, 1000,
        0, 1001, 1002, 1002, 1002,    0, 1003, 1003, 1002,    0,
        0, 1002, 1003, 1004, 1004, 1003, 1005, 1005, 1005, 1004,
     1007, 1007, 1004, 1005,    0, 1003, 1005, 1006, 1006, 1006,
     1008, 1008,    0, 1004, 1006,    0,    0, 1006,    0, 1014,
     1014, 1009, 1009, 1007, 1007, 1014,    0, 1009, 1014, 1007,
     1009, 1009, 1007, 1008, 1008, 1010, 1010,    0, 1010, 1008,
        0, 1010, 1008,    0, 1010, 1011, 1011, 1012, 1012, 1011,

        0, 1011,    0, 1012, 1011, 1012, 1012, 1013, 1013,    0,
        0, 1015, 1015, 1013,    0, 1015, 1013, 1015, 1016, 1016,
     1015,    0,    0, 1013, 1016, 1016,    0, 1016, 1017, 1017,
     1018, 1018,    0,    0, 1017,    0, 1018, 1017, 1018, 1018,
     1019, 1019, 1020, 1020,    0,    0, 1019,    0, 1020, 1019,
        0, 1020, 1021, 1021, 1021,    0, 1022, 1022, 1022, 1021,
        0,    0, 1021, 1022, 1023, 1023, 1022,    0, 1024, 1024,
     1023,    0,    0, 1023, 1024, 1025, 1025, 1024,    0, 1026,
     1026, 1025,    0, 1026, 1025, 1026, 1027, 1027, 1026,    0,
     1028, 1028, 1027,    0,    0, 1027, 1028,    0,    0, 1028,

     1029, 1029,    0, 1028, 1030, 1030, 1029,    0,    0, 1029,
     1030, 1031, 1031, 1030,    0, 1031,    0, 1031,    0,    0,
     1031, 1032, 1032, 1032,    0, 1033, 1033, 1032,    0, 1033,
     1032, 1033, 1034, 1034, 1033,    0, 1034,    0, 1034, 1035,
     1035, 1034,    0, 1036, 1036, 1035,    0, 1035, 1035, 1036,
        0, 1036, 1036, 1037, 1037, 1038, 1038, 1041, 1041, 1037,
        0, 1038, 1037, 1041, 1038,    0, 1041, 1038, 1039, 1039,
     1039,    0, 1040, 1040, 1039,    0, 1040, 1039, 1040,    0,
     1041, 1040, 1042, 1042, 1043, 1043, 1044, 1044, 1042,    0,
     1043, 1042, 1044, 1043,    0, 1044, 1048, 1048,    0,    0,

        0, 1045, 1045,    0, 1043, 1042, 1044, 1045, 1046, 1046,
     1045,    0, 1047, 1047, 1046, 1049, 1049, 1046, 1047, 1048,
     1048, 1047,    0, 1050, 1050, 1048,    0,    0, 1048, 1050,
        0,    0, 1050,    0, 1051, 1051, 1052, 1052, 1049, 1049,
     1051,    0, 1052, 1051, 1049, 1052,    0, 1049, 1053, 1053,
     1054, 1054, 1055, 1055, 1053,    0, 1054, 1053, 1055, 1054,
        0, 1055, 1056, 1056,    0,    0,    0,    0, 1056,    0,
        0, 1056, 1059, 1059, 1060, 1060, 1061, 1061, 1061, 1061,
     1062, 1062, 1062, 1062, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,

     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057
    } ;

static yyconst flex_int16_t yy_rule_linenum[238] =
    {   0,
       44,   45,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  104,  105,  106,
      107,  108,  110,  112,  113,  114,  116,  117,  118,  119,
      120,  122,  123,  124,  125,  127,  128,  129,  130,  131,
      132,  134,  135,  136,  137,  138,  139,  140,  141,  143,
      144,  145,  146,  147,  148,  149,  150,  151,  152,  153,

      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
      164,  165,  166,  167,  168,  169,  171,  172,  173,  174,
      175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  187,  188,  189,  190,  191,  193,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
      227,  228,  229,  230,  231,  232,  233,  235,  236,  237,
      238,  239,  241,  242,  243,  244,  245,  247,  248,  249,
      251,  253,  254,  255,  256,  257,  258,  259,  261,  263,

      264,  265,  266,  267,  268,  269,  272,  273,  274,  275,
      276,  277,  278,  279,  280,  281,  282,  283,  284,  286,
      287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
      299,  300,  301,  303,  304,  305,  306
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/bif.l"
/******************************************************************************
* Copyright 2015-2020 Xilinx, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the BIF file */
/* Run the bif.y file first through bison to generate the bif.tab.h file, which is included herein */
/* Then run this file through flex to generate the bif.yy.c source code */
#line 22 "../s/bif.l"
 #include <stdio.h>
 #include "bifscanner.h"
 #include "bif.tab.hpp"
 #include "authentication.h"
 #include "encryption.h"
 typedef BIF::BisonParser::token tok;
/* see http://www.lysator.liu.se/c/ANSI-C-grammar-l.html */
#line 35 "../s/bif.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 2384 "../bisonflex/bif.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 38 "../s/bif.l"



   yylloc->step ();


#line 2548 "../bisonflex/bif.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1058 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1057 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 238 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 238 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 239 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "../s/bif.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 45 "../s/bif.l"
yylloc->lines (1); yylloc->step ();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "../s/bif.l"
return tok::BOOTLOADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "../s/bif.l"
return tok::PRESIGN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "../s/bif.l"
return tok::UDF_DATA;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "../s/bif.l"
return tok::XIP_MODE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "../s/bif.l"
return tok::BOOT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "../s/bif.l"
return tok::USER;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "../s/bif.l"
return tok::STATIC;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "../s/bif.l"
return tok::NOAUTOSTART;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "../s/bif.l"
return tok::MULTIBOOT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "../s/bif.l"
return tok::PROTECTED;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "../s/bif.l"
return tok::ALIGNMENT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "../s/bif.l"
return tok::EARLY_HANDOFF;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "../s/bif.l"
return tok::DELAY_HANDOFF;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "../s/bif.l"
return tok::DELAY_LOAD;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "../s/bif.l"
return tok::HIVEC;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "../s/bif.l"
return tok::BLOCKS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "../s/bif.l"
return tok::AUTHBLOCKS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "../s/bif.l"
return tok::BIGENDIAN;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "../s/bif.l"
return tok::A32_MODE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "../s/bif.l"
return tok::PARTITION;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "../s/bif.l"
return tok::IMAGE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "../s/bif.l"
return tok::METAHEADER;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "../s/bif.l"
return tok::BIF_SECTION;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "../s/bif.l"
yylval->number = tok::OFFSET;                   return tok::OFFSET;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "../s/bif.l"
yylval->number = tok::RESERVE;                  return tok::RESERVE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "../s/bif.l"
yylval->number = tok::LOAD;                     return tok::LOAD;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "../s/bif.l"
yylval->number = tok::COPY;                     return tok::COPY;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "../s/bif.l"
yylval->number = tok::STARTUP;                  return tok::STARTUP;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "../s/bif.l"
yylval->number = tok::PARTITION_NUM;            return tok::PARTITION_NUM;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "../s/bif.l"
yylval->number = tok::INIT;                     return tok::INIT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "../s/bif.l"
yylval->number = tok::UDF_BH;                   return tok::UDF_BH;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "../s/bif.l"
yylval->number = tok::AES_KEY_FILE;             return tok::AES_KEY_FILE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "../s/bif.l"
yylval->number = tok::PPK_FILE;                 return tok::PPK_FILE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "../s/bif.l"
yylval->number = tok::PSK_FILE;                 return tok::PSK_FILE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "../s/bif.l"
yylval->number = tok::SPK_FILE;                 return tok::SPK_FILE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "../s/bif.l"
yylval->number = tok::SSK_FILE;                 return tok::SSK_FILE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "../s/bif.l"
yylval->number = tok::SPK_SIGNATURE_FILE;       return tok::SPK_SIGNATURE_FILE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "../s/bif.l"
yylval->number = tok::BH_SIGNATURE_FILE;        return tok::BH_SIGNATURE_FILE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "../s/bif.l"
yylval->number = tok::HEADER_SIGNATURE_FILE;    return tok::HEADER_SIGNATURE_FILE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "../s/bif.l"
yylval->number = tok::BOOTVECTORS;              return tok::BOOTVECTORS;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "../s/bif.l"
yylval->number = tok::BOOTIMAGE;                return tok::BOOTIMAGE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "../s/bif.l"
yylval->number = tok::PARENT_ID;                return tok::PARENT_ID; 
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "../s/bif.l"
yylval->number = tok::ID_CODE;                  return tok::ID_CODE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "../s/bif.l"
yylval->number = tok::EXT_ID_CODE;              return tok::EXT_ID_CODE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "../s/bif.l"
yylval->number = tok::ID;                       return tok::ID; 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "../s/bif.l"
yylval->number = tok::NAME;                     return tok::NAME; 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "../s/bif.l"
yylval->number = tok::PFILE;                    return tok::PFILE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "../s/bif.l"
yylval->number = tok::BH_KEY_FILE;              return tok::BH_KEY_FILE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "../s/bif.l"
yylval->number = tok::PUF_HELPER_FILE;          return tok::PUF_HELPER_FILE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "../s/bif.l"
yylval->number = tok::PMUFW_IMAGE;              return tok::PMUFW_IMAGE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 98 "../s/bif.l"
yylval->number = tok::PMCDATA;                  return tok::PMCDATA;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 99 "../s/bif.l"
yylval->number = tok::BH_KEY_IV;                return tok::BH_KEY_IV;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 100 "../s/bif.l"
yylval->number = tok::UNIQUE_ID;                return tok::UNIQUE_ID;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 101 "../s/bif.l"
yylval->number = tok::PARENT_UNIQUE_ID;         return tok::PARENT_UNIQUE_ID;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 102 "../s/bif.l"
yylval->number = tok::FUNCTION_ID;              return tok::FUNCTION_ID;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 104 "../s/bif.l"
yylval->number = tok::BBRAM_KEK_IV;             return tok::BBRAM_KEK_IV;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "../s/bif.l"
yylval->number = tok::BH_KEK_IV;                return tok::BH_KEK_IV;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 106 "../s/bif.l"
yylval->number = tok::EFUSE_KEK_IV;             return tok::EFUSE_KEK_IV;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 107 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK0_IV;       return tok::EFUSE_USER_KEK0_IV;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK1_IV;       return tok::EFUSE_USER_KEK1_IV;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 110 "../s/bif.l"
yylval->number = tok::FAMILY_KEY;               return tok::FAMILY_KEY;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 112 "../s/bif.l"
return tok::ENCRYPTION;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 113 "../s/bif.l"
yylval->number = 0;                             return tok::NONE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 114 "../s/bif.l"
yylval->number = Encryption::AES;               return tok::ENCRVALUE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 116 "../s/bif.l"
return tok::AUTHENTICATION;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 117 "../s/bif.l"
yylval->number = Authentication::RSA;           return tok::AUTHVALUE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 118 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 119 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 120 "../s/bif.l"
yylval->number = Authentication::ECDSAp521;     return tok::AUTHVALUE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 122 "../s/bif.l"
return tok::CHECKSUM;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 123 "../s/bif.l"
yylval->number = Checksum::MD5;                 return tok::CHECKSUMVALUE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 124 "../s/bif.l"
yylval->number = Checksum::SHA2;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 125 "../s/bif.l"
yylval->number = Checksum::SHA3;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 127 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 128 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 129 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 130 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 131 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 132 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 134 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 135 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 136 "../s/bif.l"
yylval->number = PartitionType::CONFIG_DATA_OBJ;return tok::PTYPEVALUE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 137 "../s/bif.l"
yylval->number = PartitionType::RAW;            return tok::PTYPEVALUE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 138 "../s/bif.l"
yylval->number = PartitionType::CFI;            return tok::PTYPEVALUE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 139 "../s/bif.l"
yylval->number = PartitionType::CFI_GSC;        return tok::PTYPEVALUE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 140 "../s/bif.l"
yylval->number = PartitionType::SLR_BOOT;       return tok::PTYPEVALUE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 141 "../s/bif.l"
yylval->number = PartitionType::SLR_CONFIG;     return tok::PTYPEVALUE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 143 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "../s/bif.l"
yylval->number = KeySource::EfuseBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 149 "../s/bif.l"
yylval->number = KeySource::EfuseGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "../s/bif.l"
yylval->number = KeySource::BbramBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 152 "../s/bif.l"
yylval->number = KeySource::BbramGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 153 "../s/bif.l"
yylval->number = KeySource::BhGryKey;           return tok::KEY_SRC;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 154 "../s/bif.l"
yylval->number = KeySource::BhBlkKey;           return tok::KEY_SRC;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 155 "../s/bif.l"
yylval->number = KeySource::UserKey0;           return tok::KEY_SRC;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 156 "../s/bif.l"
yylval->number = KeySource::UserKey1;           return tok::KEY_SRC;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 157 "../s/bif.l"
yylval->number = KeySource::UserKey2;           return tok::KEY_SRC;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 158 "../s/bif.l"
yylval->number = KeySource::UserKey3;           return tok::KEY_SRC;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 159 "../s/bif.l"
yylval->number = KeySource::UserKey4;           return tok::KEY_SRC;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 160 "../s/bif.l"
yylval->number = KeySource::UserKey5;           return tok::KEY_SRC;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 161 "../s/bif.l"
yylval->number = KeySource::UserKey6;           return tok::KEY_SRC;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 162 "../s/bif.l"
yylval->number = KeySource::UserKey7;           return tok::KEY_SRC;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 163 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey0;      return tok::KEY_SRC;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 164 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey0;   return tok::KEY_SRC;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 165 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey0;   return tok::KEY_SRC;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 166 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey1;      return tok::KEY_SRC;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 167 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey1;   return tok::KEY_SRC;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 168 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey1;   return tok::KEY_SRC;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 169 "../s/bif.l"
yylval->number = KeySource::BhKupKey;           return tok::KEY_SRC;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "../s/bif.l"
yylval->number = Core::R5Single;                return tok::CORE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "../s/bif.l"
yylval->number = Core::R5Dual;                  return tok::CORE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "../s/bif.l"
yylval->number = BhRsa::BhRsaEnable;            return tok::BH_RSA;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "../s/bif.l"
yylval->number = AuthHash::Sha2;                return tok::AUTH_HASH;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "../s/bif.l"
yylval->number = PufHdLoc::PUFinBH;             return tok::PUFHD_LOC;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "../s/bif.l"
yylval->number = AuthOnly::Enabled;             return tok::AUTH_ONLY;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "../s/bif.l"
yylval->number = OptKey::OptKeyinSecHdr;        return tok::OPT_KEY;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "../s/bif.l"
yylval->number = PufMode::PUF4K;                return tok::PUF4KMODE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "../s/bif.l"
yylval->number = tok::SHUTTER;                  return tok::SHUTTER;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 187 "../s/bif.l"
yylval->number = DpaCM::DpaCMEnable;            return tok::DPA_CM;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "../s/bif.l"
yylval->number = tok::SMAP_WIDTH;               return tok::SMAP_WIDTH;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 189 "../s/bif.l"
yylval->number = tok::BYPASS_IDCODE_CHECK;      return tok::BYPASS_IDCODE_CHECK;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 190 "../s/bif.l"
yylval->number = tok::A_HWROT;                  return tok::A_HWROT;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 191 "../s/bif.l"
yylval->number = tok::S_HWROT;                  return tok::S_HWROT;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 193 "../s/bif.l"
return tok::BOOT_DEVICE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 194 "../s/bif.l"
yylval->number = tok::ADDRESS;                  return tok::ADDRESS;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 195 "../s/bif.l"
yylval->number = BootDevice::QSPI32;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 196 "../s/bif.l"
yylval->number = BootDevice::QSPI24;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 197 "../s/bif.l"
yylval->number = BootDevice::NAND;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 198 "../s/bif.l"
yylval->number = BootDevice::SD0;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 199 "../s/bif.l"
yylval->number = BootDevice::SD1;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 200 "../s/bif.l"
yylval->number = BootDevice::SDLS;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 201 "../s/bif.l"
yylval->number = BootDevice::MMC;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 202 "../s/bif.l"
yylval->number = BootDevice::USB;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 203 "../s/bif.l"
yylval->number = BootDevice::ETHERNET;          return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 204 "../s/bif.l"
yylval->number = BootDevice::PCIE;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 205 "../s/bif.l"
yylval->number = BootDevice::SATA;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 206 "../s/bif.l"
yylval->number = BootDevice::OSPI;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 207 "../s/bif.l"
yylval->number = BootDevice::SMAP;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 208 "../s/bif.l"
yylval->number = BootDevice::SBI;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 209 "../s/bif.l"
yylval->number = BootDevice::SD0RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 210 "../s/bif.l"
yylval->number = BootDevice::SD1RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 211 "../s/bif.l"
yylval->number = BootDevice::SDLSRAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 212 "../s/bif.l"
yylval->number = BootDevice::MMCRAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 213 "../s/bif.l"
yylval->number = BootDevice::MMC0;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 214 "../s/bif.l"
yylval->number = BootDevice::MMC0RAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 216 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 217 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 218 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 219 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 220 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 221 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 222 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 223 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 224 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 225 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 226 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 227 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 228 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 229 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 230 "../s/bif.l"
yylval->number = DestinationCPU::R5_lockstep;   return tok::DEST_CPU_TYPE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 231 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 232 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 233 "../s/bif.l"
yylval->number = DestinationCPU::AIE;            return tok::DEST_CPU_TYPE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 235 "../s/bif.l"
return tok::DEST_DEVICE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 236 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PS;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 237 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PL;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 238 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PMU;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 239 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_XIP;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 241 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 242 "../s/bif.l"
yylval->number = ExceptionLevel::EL0;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 243 "../s/bif.l"
yylval->number = ExceptionLevel::EL1;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 244 "../s/bif.l"
yylval->number = ExceptionLevel::EL2;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 245 "../s/bif.l"
yylval->number = ExceptionLevel::EL3;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 247 "../s/bif.l"
return tok::TRUSTZONE;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 248 "../s/bif.l"
yylval->number = TrustZone::Secure;             return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 249 "../s/bif.l"
yylval->number = TrustZone::NonSecure;          return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 251 "../s/bif.l"
yylval->number = tok::SLR_NUM;                  return tok::SLR_NUM;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 253 "../s/bif.l"
yylval->number = tok::AUTH_PARAMS;              return tok::AUTH_PARAMS;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 254 "../s/bif.l"
yylval->number = tok::PPK_SELECT;               return tok::PPK_SELECT;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 255 "../s/bif.l"
yylval->number = tok::SPK_SELECT;               return tok::SPK_SELECT;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 256 "../s/bif.l"
yylval->number = SpkSelect::SPK_eFUSE;          return tok::SPKSELECT;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 257 "../s/bif.l"
yylval->number = SpkSelect::USER_eFUSE;         return tok::SPKSELECT;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 258 "../s/bif.l"
yylval->number = tok::SPK_ID;                   return tok::SPK_ID; 
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 259 "../s/bif.l"
return tok::HEADER_AUTH;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 261 "../s/bif.l"
yylval->number = tok::REVOKE_ID;                return tok::REVOKE_ID;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 263 "../s/bif.l"
yylval->number = tok::SPLIT;                    return tok::SPLIT;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 264 "../s/bif.l"
yylval->number = tok::SPLIT_MODE;               return tok::SPLIT_MODE;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 265 "../s/bif.l"
yylval->number = SplitMode::SlaveMode;          return tok::SPLITMODE;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 266 "../s/bif.l"
yylval->number = SplitMode::Normal;             return tok::SPLITMODE;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 267 "../s/bif.l"
yylval->number = tok::SPLIT_FMT;                return tok::SPLIT_FMT; 
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 268 "../s/bif.l"
return tok::MCS;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 269 "../s/bif.l"
return tok::BIN;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 272 "../s/bif.l"
yylval->number=atoi(yytext);                    return tok::DECVALUE;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 273 "../s/bif.l"
yylval->number=strtoul(yytext+2,NULL,16);       return tok::HEXVALUE;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 274 "../s/bif.l"
return tok::COLON;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 275 "../s/bif.l"
return tok::SEMICOLON;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 276 "../s/bif.l"
return tok::EQUAL;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 277 "../s/bif.l"
return tok::COMMA;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 278 "../s/bif.l"
return tok::OBRACKET;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 279 "../s/bif.l"
return tok::EBRACKET;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 280 "../s/bif.l"
return tok::OBRACE;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 281 "../s/bif.l"
return tok::EBRACE;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 282 "../s/bif.l"
return tok::LPAREN;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 283 "../s/bif.l"
return tok::RPAREN;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 284 "../s/bif.l"
return tok::ASTERISK;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 286 "../s/bif.l"
return tok::PLUS;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 287 "../s/bif.l"
return tok::MINUS;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 288 "../s/bif.l"
return tok::LSHIFT;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 289 "../s/bif.l"
return tok::RSHIFT;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 290 "../s/bif.l"
return tok::MULT;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 291 "../s/bif.l"
return tok::DIVIDE;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 292 "../s/bif.l"
return tok::MODULO;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 293 "../s/bif.l"
return tok::NEGATION;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 294 "../s/bif.l"
return tok::AND;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 295 "../s/bif.l"
return tok::OR;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 296 "../s/bif.l"
return tok::XOR;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 299 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::WORD;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 300 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::FILENAME;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 301 "../s/bif.l"
yylval->string=strdup(yytext+1); yylval->string[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 303 "../s/bif.l"
yylloc->step ();
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 304 "../s/bif.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 305 "../s/bif.l"
/* ignore (Linux only) */
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 306 "../s/bif.l"
printf("WARNING: bad character! '%s' (0x%02X)\n",yytext,yytext[0]);
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 307 "../s/bif.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3849 "../bisonflex/bif.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	biffree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	biffree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					bifrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) bifrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1058 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1058 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1057);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) bifalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) bifalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		biffree((void *) b->yy_ch_buf  );

	biffree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) bifalloc(new_size  );

		else
			(yy_start_stack) = (int *) bifrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *bifalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *bifrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void biffree (void * ptr )
{
	free( (char *) ptr );	/* see bifrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 307 "../s/bif.l"




void BIF::FlexScanner::comment()
{
    char c, c1;
loop:
    while ((c = yyinput()) != '*' && c != 0) 
    {
        // putchar(c);
        if (c == '\n') yylloc->lines (1);
    }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

