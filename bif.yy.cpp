#line 2 "../bisonflex/bif.yy.cpp"

#line 4 "../bisonflex/bif.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer bifFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *bifalloc (yy_size_t  );
void *bifrealloc (void *,yy_size_t  );
void biffree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 230
#define YY_END_OF_BUFFER 231
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1019] =
    {   0,
        0,    0,  231,  229,  226,  227,  228,  229,  218,  220,
      209,  210,  211,  212,  204,  213,  224,  217,  199,  199,
      201,  202,  229,  203,  229,  223,  205,  206,  222,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      207,  221,  208,  219,  226,  227,    0,    0,  224,    1,
      224,  199,  224,  214,  215,  223,    0,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

       46,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  172,  223,  223,  223,  171,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  225,    0,
        0,    2,  224,  200,    0,  223,  223,  223,  223,  223,
       62,  169,  223,  223,  223,  223,  223,  223,  198,  223,
      223,  223,   78,   80,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  224,  223,  223,  223,  223,  223,  223,
      196,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      197,   67,  223,  138,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,   30,   74,  167,
      223,  223,  223,  223,  168,  223,  223,  224,  223,   79,
      223,  223,   64,  223,  145,  224,  135,  136,  223,  223,
      223,  223,  183,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  139,  223,  174,    0,  224,  223,  224,  223,
      224,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,    7,  223,  224,  223,   28,  153,
      223,  223,  223,  223,  223,  223,  176,  177,  178,  179,
      223,  223,  223,  223,  223,   48,   72,  223,  223,  223,

      223,   31,  223,  223,   27,  223,  224,  150,  193,  223,
       47,  134,  223,  224,   61,  223,  223,  223,  223,  143,
      223,  223,  223,  141,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  164,  165,  224,  223,  223,
      223,  223,  142,  224,  224,  224,  223,   68,   69,  223,
      223,  224,  144,  224,  223,  223,  223,  223,  223,  223,
      223,  223,   77,  223,  223,    8,  223,  154,  157,  160,
      162,  223,  156,  159,  161,  163,  223,  155,  158,  223,
      223,  223,  223,  223,  223,  223,   87,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  224,

      223,  223,  223,  223,  223,   65,   86,  223,  223,  223,
      223,  223,  223,  223,   17,  223,   23,  223,  223,  223,
      224,  224,  223,  223,  224,  223,  223,  223,  223,   71,
      223,  223,  223,  173,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  224,  223,  223,  223,  223,  137,
      224,  224,  223,  223,  223,  224,  224,  223,  224,  223,
      223,  223,  223,  192,  223,  223,  223,  223,   73,  223,
      223,  224,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,   18,  223,  223,  223,  223,

      223,  223,  224,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,   85,  223,
      223,  224,  224,  223,  223,  224,  223,  195,   25,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  133,  132,  224,  223,  223,  223,  223,  224,
      224,  224,  181,  223,  223,  224,  224,  223,  224,  189,
      223,  223,  223,  223,  223,    9,  223,   32,  223,  224,
      223,  223,  115,  117,  116,  118,  223,  131,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  223,   81,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,   44,  223,  223,  110,  223,  149,  224,
      223,  223,   75,  223,  124,  223,  223,   52,  223,  223,
       34,    4,  223,   35,  223,  223,  223,  224,  119,  223,
       26,  223,  224,  146,  147,  126,  223,  224,  224,  223,
      224,  223,   36,  223,   37,   29,  223,  223,  224,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,   66,  223,  223,

      223,  223,  223,  223,  223,  223,  223,  223,  223,  140,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  151,
      223,  223,  223,  223,  223,  223,  223,  223,  223,   50,
      122,  224,  223,  223,  224,  223,   82,  224,  223,  224,
      223,  223,  223,    5,  224,  223,    6,  223,  223,   13,
      123,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,   55,   53,  223,  223,  223,  223,  223,   42,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,   59,  223,  223,  223,
      223,  223,  223,   11,  223,  182,   43,   22,  223,  223,

       12,  125,  224,  114,  191,  148,  194,  224,  223,  187,
      223,  223,  180,  224,   96,   97,   98,   99,  100,  101,
      102,  103,  223,   33,  223,  223,   19,  223,  223,  223,
      223,  223,  223,   95,   94,   49,  223,   20,  223,  223,
        3,  223,  223,  223,   16,  223,  223,  223,  223,  223,
      223,  223,  223,   60,  223,  223,  223,  223,  223,  223,
      223,   24,  223,  223,  223,  185,  224,   83,  128,  186,
      223,  188,  223,  184,  223,  223,  223,  223,  223,  223,
      223,   39,  112,  130,   41,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  111,  190,  223,

      223,  223,   10,  223,  223,   51,  166,  223,   21,  223,
      223,  223,  223,   54,  223,  223,  223,  223,  223,  127,
      223,  223,  223,   56,  223,  223,  223,  223,  223,  223,
      223,  113,  223,  223,  223,   38,  223,  223,   92,   93,
       91,  223,  223,   15,  223,  223,   14,   89,   90,   88,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
       63,  120,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,   76,  223,  223,  152,  223,  223,
      223,  223,  223,  104,  107,  175,  223,   40,  223,   70,
      121,  223,  223,  223,  223,  223,  223,   45,  223,  223,

      223,  223,  223,  223,  223,   84,  223,  170,  223,  223,
       57,   58,  129,  105,  108,  106,  109,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    6,    6,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   26,   27,   28,   29,
       30,   31,    1,    6,   32,   32,   32,   32,   32,   32,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   34,   33,   33,
       35,   36,   37,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   33,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    1,    3,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    4,    1,    1,    1,
        1,    3,    3,    3,    1,    3,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1024] =
    {   0,
        0,    0,  400, 6816,   67,  396, 6816,   68, 6816, 6816,
     6816, 6816, 6816,    0, 6816,    0,    0,   58,  115,   37,
     6816, 6816,  368, 6816,  364,  129, 6816, 6816, 6816,  135,
      165,  212,  116,  193,  236,  204,  143,  155,  145,  234,
      253,  252,  268,  284,  280,  304,  322,  327,  345,  299,
     6816, 6816, 6816, 6816,   93,  391,  384,  140,    0, 6816,
      402,  124,  453, 6816, 6816,  341,  136,  394,  398,  396,
      459,  460,  461,  479,  486,  498,  502,  512,  530,  540,
      544,  559,  563,  573,  575,  595,  600,  607,  622,  626,
      627,  649,  654,  668,  642,  680,  687,  702,  706,  707,

      721,  722,  741,  748,  753,  755,  773,  791,  775,  795,
      807,  809,  827,  829,  843,  847,  862,  863,  881,  882,
      900,  896,  914,  915,  934,  919,  948,  950,  979,  952,
      975,  989,  993, 1007, 1030, 1012, 1026, 1040, 1044, 1059,
     1063, 1073, 1075, 1091, 1098, 1113, 1125, 1120, 6816,  137,
      384, 6816, 1182,    0,    0, 1187, 1189, 1203, 1215, 1205,
     1225, 1237, 1241, 1253, 1251, 1276, 1278, 1280, 1294, 1296,
     1312, 1314, 1316, 1334, 1339, 1332, 1357, 1359, 1371, 1373,
     1385, 1399, 1400,  198, 1404, 1414, 1419, 1437, 1439, 1451,
     1453, 1465, 1480, 1485, 1484, 1500, 1507, 1512, 1522, 1532,

     1544, 1551, 1558, 1578, 1563, 1573, 1592, 1607, 1606, 1626,
     1611, 1621, 1640, 1633, 1655, 1660, 1665, 1675, 1687, 1680,
     1694, 1709, 1713, 1727, 1725, 1741, 1756,  192, 1760, 1770,
     1772, 1782, 1792, 1797, 1804,  332, 1811, 1826, 1830, 1844,
     1840, 1842, 1879, 1869, 1889, 1884, 1904, 1911, 1923, 1933,
     1938, 1948, 1952, 1966, 1980,  370,  202, 1970,  212, 1985,
       78, 2003, 2008, 2013, 2028, 2042, 2044, 2060, 2064, 2076,
     2078, 2096, 2101, 2111, 2116, 2121,  328, 2143, 2123, 2148,
     2150, 2155, 2170, 2175, 2177, 2189,    0,    0,    0,    0,
     2203, 2208, 2204, 2222, 2236, 2240, 2250, 2255, 2254, 2273,

     2283, 2288, 2293, 2308, 2315, 2320,  315, 2343, 2342, 2347,
     2357, 2361, 2362,  306, 2376, 2388, 2390, 2402, 2416, 2404,
     2430, 2431, 2445, 2449, 2450, 2464, 2465, 2483, 2484, 2499,
     2506, 2511, 2521, 2531, 2556,    0,    0,  306, 2546, 2558,
     2560, 2572, 2574,  301,  297,  290, 2592, 2599, 2606, 2611,
     2626,  133, 2625,  301, 2640, 2644, 2645, 2659, 2663, 2673,
     2678, 2685, 2700, 2701, 2720, 2735, 2739,    0,    0,    0,
        0, 2749,    0,    0,    0,    0, 2761,    0,    0, 2751,
     2771, 2776, 2783, 2790, 2802, 2809, 2824, 2828, 2840, 2842,
     2847, 2867, 2874, 2881, 2893, 2900, 2907, 2919, 2926,  285,

     2938, 2942, 2952, 2957, 2967, 2971, 2986, 2990, 3000, 3002,
     3018, 3022, 3036, 3040, 3041, 3059, 3055, 3073, 3074, 3092,
      296,  277, 3093, 3108,  279, 3112, 3124, 3128, 3140, 3150,
     3155, 3160, 3175, 3189, 3187, 3203, 3215, 3222, 3238, 3242,
     3254, 3258, 3274, 3290,  281, 3276, 3292, 3294, 3308,  306,
      278,  277, 3323, 3328, 3342,  262,  261, 3330,  266, 3346,
     3361, 3371, 3383, 3387, 3397, 3409, 3416, 3423, 3435, 3442,
     3454,  263, 3458, 3468, 3483, 3490, 3502, 3506, 3516, 3518,
     3534, 3544, 3554, 3556, 3570, 3572, 3582, 3597,  217,  533,
     1159, 1866, 3531, 1087,  308, 1596, 2276, 2201, 1745, 2297,

     2990, 3595,  260, 2496, 3609, 3620, 3626, 2896, 3622, 2017,
     3639, 3638, 3652, 3651, 3663, 3664, 3681, 3682, 3693, 3694,
     3705,  229,  240, 3706, 3707,  237, 3719, 3725, 3731, 3742,
     3743, 3754, 3766, 3768, 3777, 3788, 3779, 3755, 3797, 3799,
     3801, 3813, 3815, 3817,  223, 3826, 3837, 3843, 3849,  215,
      209,  208, 3855, 3861, 3867,  215,  198, 3873,  190, 3884,
     3885, 3898, 3897, 3911, 3910, 3922, 3924, 3933, 3935,  193,
     3946, 3955, 3959, 3968, 3972, 3981, 3990, 3992, 3994, 4003,
     4012, 4023, 4025, 4034, 4036, 4045, 4047, 4056, 4065, 4069,
     4078, 4082, 4091, 4095, 4104, 4108, 4121, 4122, 4134, 4135,

     4146, 4147, 4158,    0, 4167, 4171, 4180, 4189, 4200, 4202,
     4213, 4219, 4230, 4236, 4232, 4249, 4250, 4261, 4270, 4274,
     4283, 4287, 4296, 4300, 4309, 4320, 4322, 4331,    0,  175,
     4340, 4342,    0, 4353, 4362, 4364, 4373, 4375, 4384, 4393,
     4395, 4397, 4406, 4415, 4417, 4426, 4437,  178, 4439, 4448,
     4450, 4459,  186,    0,    0, 4468, 4470,  156,  154, 4479,
      140, 4488, 4490, 4501, 4499, 4510, 4512, 4529,  125, 4530,
     4543, 4549, 4560, 4562, 4566, 4584, 4582, 4586, 4595, 4604,
     4606, 4608, 4622, 4626, 4635, 4639, 4648, 4657, 4666, 4677,
     4679, 4693, 4699, 4710, 4716, 4722, 4733, 4739, 4745, 4758,

     4762, 4775, 4771, 4784, 4788, 4797, 4806, 4815, 4817, 4819,
     4828, 4837, 4841, 4850, 4859, 4861, 4870, 4879, 4883,    0,
     4892, 4896, 4905, 4914, 4923, 4925, 4936, 4945, 4949, 4927,
     4958,  118, 4962, 4974,  109, 4975,    0,  120, 4986,  116,
     4997, 4999, 5010, 5019,   98, 5058, 5044, 5045, 5062, 5046,
     5064, 5075, 5076, 5087, 5089, 5100, 5101, 5112, 5113, 5114,
     5126, 5130, 5132, 5146, 5150, 5159, 5168, 5170, 5181, 5187,
     5193, 5199, 5205, 5216, 5217, 5228, 5229, 5245, 5241, 5254,
     5263, 5267, 5276, 5285, 5289, 5298, 5302, 5311, 5315, 5328,
     5337, 5346, 5348, 5350, 5359, 5368, 5370, 5379, 5381, 5390,

     5401, 5403,   99, 5412, 5414,    0, 5423,   59, 5434,    0,
     5436, 5447, 5456,   59, 5458, 5467, 5469, 5478, 5480, 5489,
     5491, 5500, 5509, 5513, 5522, 5526, 5535, 5539, 5552, 5553,
     5564, 5565, 5576, 5577, 5578, 5589, 5595, 5601, 5607, 5618,
     5619, 5620, 5632, 5638, 5649, 5651, 5660, 5671, 5672, 5673,
     5684, 5685, 5696, 5697, 5698, 5714, 5710, 5726, 5728, 5730,
     5739, 5748, 5750, 5761, 5772, 5774,   28,    0, 5783, 5785,
     5794,    0, 5803, 5805, 5814, 5816, 5827, 5833, 5839, 5852,
     5851, 5863, 5864, 5865, 5876, 5885, 5894, 5903, 5907, 5916,
     5925, 5929, 5938, 5947, 5951, 5960, 5969, 5971, 5973, 5982,

     5993, 5995, 6004, 6006, 6015, 6024,    0, 6028, 6040, 6042,
     6044, 6046, 6058, 6062, 6064, 6076, 6087, 6089, 6098, 6107,
     6116, 6118, 6127, 6129, 6138, 6147, 6158, 6164, 6170, 6176,
     6182, 6188, 6194, 6205, 6206, 6217, 6218, 6229, 6230, 6231,
     6242, 6248, 6254, 6260, 6266, 6277, 6278, 6289, 6290, 6291,
     6302, 6303, 6314, 6323, 6327, 6340, 6341, 6354, 6360, 6371,
     6373, 6377, 6389, 6391, 6393, 6402, 6413, 6437, 6446, 6425,
     6448, 6457, 6459, 6468, 6470, 6479, 6490, 6492, 6501, 6510,
     6512, 6521, 6530, 6532, 6534, 6543, 6552, 6554, 6556, 6565,
     6574, 6578, 6587, 6591, 6600, 6604, 6613, 6617, 6626, 6635,

     6639, 6648, 6652, 6661, 6673, 6679, 6685, 6691, 6705, 6724,
     6703, 6704, 6722, 6723, 6735, 6736, 6747, 6816,   77, 6801,
     6804, 6807, 6811
    } ;

static yyconst flex_int16_t yy_def[1024] =
    {   0,
     1018,    1, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1019, 1018, 1019, 1019, 1019, 1019,   19,
     1018, 1018, 1018, 1018, 1018, 1020, 1018, 1018, 1018, 1020,
     1020, 1020,   32,   32,   32,   32,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
     1018, 1018, 1018, 1018, 1018, 1018, 1021, 1021, 1019, 1018,
     1022,   19, 1019, 1018, 1018,   36, 1018,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,

       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36, 1018, 1018,
     1023, 1018, 1022,   63, 1019,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36, 1019,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,

       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36, 1019,   36,   36,
       36,   36,   36,   36,   36, 1019,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36, 1021, 1019,   36, 1019,   36,
     1019,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36, 1019,   36,   36,   36,
       36,   36,   36,   36,   36,   36, 1019, 1019, 1019, 1019,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,

       36,   36,   36,   36,   36,   36, 1019,   36,   36,   36,
       36,   36,   36, 1019,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36, 1019, 1019, 1019,   36,   36,
       36,   36,   36, 1019, 1019, 1019,   36,   36,   36,   36,
       36, 1019,   36, 1019,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36, 1019, 1019, 1019,
     1019,   36, 1019, 1019, 1019, 1019,   36, 1019, 1019,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36, 1019,

       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
     1019, 1019,   36,   36, 1019,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36, 1019,   36,   36,   36,   36, 1019,
     1019, 1019,   36,   36,   36, 1019, 1019,   36, 1019,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36, 1019,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488, 1019,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488, 1019, 1019,  488,  488, 1019,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488, 1019,  488,  488,  488,  488, 1019,
     1019, 1019,  488,  488,  488, 1019, 1019,  488, 1019,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488, 1019,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488, 1019,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488, 1019, 1019,
      488,  488, 1019,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488, 1019,  488,  488,
      488,  488, 1019, 1019, 1019,  488,  488, 1019, 1019,  488,
     1019,  488,  488,  488,  488,  488,  488,  488, 1019,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488, 1019,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488, 1019,  488,  488, 1019,  488, 1019, 1019,  488, 1019,
      488,  488,  488,  488, 1019,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488, 1019,  488,  488, 1019,  488, 1019,  488, 1019,
      488,  488,  488, 1019,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488, 1019, 1019,  488,  488,
      488, 1019,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488, 1019,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,    0, 1018, 1018,
     1018, 1018, 1018
    } ;

static yyconst flex_int16_t yy_nxt[6885] =
    {   0,
        4,    5,    6,    7,    5,    4,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   21,   22,   23,   24,
       25,   26,   26,   26,   27,   17,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   26,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   26,
       26,   50,   26,   26,   51,   52,   53,   54,   55,   60,
       59,   55,   57,   57,   61,   57,   57,   57,   57,   59,
       57,  907,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   55,  378,  379,   55,   59,   58,

       58,   58,  872,   57,  868,   57,   57,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   59,  867,   59,   59,   59,  149,   59,   63,   59,
       59,   59,  155,  256,  814,   67,   66,   59,   82,  810,
       83, 1018,   84,   66,   59,   66,  150,  808,   85,  806,
       59,  155,  256,  456,  457,  803,   63,   59,   66,   59,
       59,   59,   66,  745,   66,   59,   99,   68,  104,   69,
      100,   67,   66,   66,   66,   66,  740,  101,  738,   66,

       59,   66,   66,  105,   70,  102,  103,   71,   72,  336,
      337,   66,   73,  737,   74,  287,  288,  289,  290,  368,
      369,  370,  371,   75,   59,  735,   59,   59,   59,  373,
      374,  375,  376,   66,  732,  720,   86,  669,   67,   66,
       66,  338,   66,   95,   66,   66,   87,   59,  661,  659,
       66,   96,   76,   66,   97,   66,   66,   66,   77,   78,
       98,   79,   66,  590,   80,   66,   66,  658,  655,  654,
      653,  648,   66,   66,   81,   88,   66,   89,  633,  630,
       90,   66,   66,   66,   66,   91,  106,   92,   66,  629,
       66,  113,   66,   93,  107,  108,  109,   94,   66,   66,

       66,  604,   66,  110,  114,  111,  570,   66,   66,   66,
      559,  112,  115,  557,  556,   66,  552,  551,   66,   66,
      550,  116,  545,  119,  117,  120,  129,   66,  118,  526,
       66,  121,  523,  122,  123,  522,  128,  124,   66,  125,
      126,  503,  127,  130,  459,  452,  148,  131,   66,   66,
      597,   66,  451,   66,   66,   66,   66,  450,  445,  425,
      132,  133,  134,   66,  135,  136,   66, 1018,  137,   66,
      421,  138,  139,  400,   66,  140, 1018,   66,  141,  142,
       66,  344,  143,   66,   66,  145,  152,  146,   66,  144,
      149,   66,   66,   56,   65,   66,   64,   66,   56, 1018,

     1018,  147,  151,  151,  152,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  156,  151, 1018,  158, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,  151,  151,
      151,  151,  151,   66, 1018,   66,  151,   66,  151,  151,
     1018,   66, 1018,   66,   66,   66,   66, 1018,   66, 1018,
       66,  159,   66, 1018,   66,  157, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018,  151,  151,  151,  151,
      154,  154,  154,  154,  154,  154,  154,  154,  154, 1018,
     1018, 1018, 1018, 1018,  154, 1018, 1018, 1018, 1018, 1018,
     1018, 1018,  154,  154,  154,  154,  154,  154,   66,   66,

       66,  160, 1018, 1018,  162, 1018,   66,   66,   66,   66,
       66,   66, 1018, 1018, 1018,   66,  161,   66,   66, 1018,
     1018, 1018, 1018, 1018, 1018,   66,  163, 1018, 1018,   66,
     1018, 1018, 1018,   66, 1018,   66,   66,   66, 1018, 1018,
      166,   66,   66,  164, 1018,   66, 1018, 1018,   66,   66,
     1018,   66,   66,  165,   66, 1018, 1018,  168,  167,   66,
     1018, 1018,   66,  169, 1018, 1018, 1018, 1018,   66,   66,
     1018,  591, 1018,   66, 1018, 1018, 1018,   66,   66,   66,
       66,   66,  170,   66, 1018, 1018,   66,   66,   66, 1018,
       66,   66,  171, 1018,   66, 1018,   66,  172,   66, 1018,

       66, 1018,   66, 1018, 1018, 1018,   66, 1018, 1018,   66,
      174,  173,   66,   66,   66,   66,  175, 1018, 1018,   66,
       66, 1018,   66,   66, 1018,   66, 1018, 1018,  176,   66,
      177,   66, 1018, 1018,   66, 1018, 1018, 1018, 1018,  180,
     1018,  184,   66, 1018,  178,   66,   66,   66, 1018, 1018,
       66,  179, 1018, 1018,   66, 1018,   66,   66, 1018, 1018,
     1018,   66,  181,   66,  182,   66,   66, 1018, 1018,   66,
     1018, 1018,   66,   66,   66, 1018,   66,   66,   66, 1018,
     1018,   66,   66,   66,  183, 1018, 1018, 1018,   66,   66,
      185, 1018,  189,   66, 1018, 1018,   66, 1018,   66,   66,

      186,   66, 1018, 1018,   66,   66, 1018,   66, 1018,  187,
       66, 1018, 1018, 1018, 1018,   66, 1018, 1018,   66,   66,
     1018, 1018, 1018, 1018,   66,  188,   66,   66, 1018,  190,
       66, 1018, 1018, 1018,   66, 1018,   66,   66, 1018, 1018,
     1018,   66,  192,   66,  191,  193,   66, 1018, 1018,   66,
     1018, 1018,   66,   66,   66, 1018,   66,   66,   66,  195,
       66,  196,   66,   66, 1018, 1018,  194, 1018,   66,   66,
     1018,   66,   66, 1018, 1018, 1018, 1018,   66,   66, 1018,
       66, 1018, 1018, 1018, 1018, 1018, 1018,   66,  197, 1018,
     1018,   66,   66, 1018,  200,   66, 1018,   66,   66, 1018,

       66, 1018,   66,   66,   66,   66,  199, 1018, 1018,   66,
      198,   66,   66,  202,   66, 1018, 1018, 1018, 1018, 1018,
       66, 1018,   66,   66, 1018,   66, 1018, 1018, 1018,  201,
       66,   66,  203, 1018,   66, 1018,  204, 1018,   66, 1018,
     1018,   66,   66, 1018, 1018,   66,   66,   66,   66,  205,
     1018,   66, 1018, 1018,   66, 1018,   66,   66,  206,   66,
     1018, 1018, 1018,   66, 1018,   66,   66, 1018,  209, 1018,
     1018, 1018, 1018, 1018,   66, 1018,   66,  207,  208,   66,
      210, 1018,   66,   66,  211,   66,   66,  212, 1018, 1018,
       66, 1018, 1018,   66,   66, 1018, 1018,   66, 1018,   66,

     1018,   66,   66,   66,  213, 1018, 1018, 1018, 1018,   66,
       66, 1018,   66,   66,  215,  214, 1018, 1018,   66,   66,
       66,   66, 1018, 1018, 1018, 1018, 1018, 1018,   66,  217,
     1018,   66,   66, 1018, 1018,   66,  216,   66,   66,   66,
     1018, 1018,  218,   66, 1018, 1018,   66,   66, 1018, 1018,
       66, 1018,   66,   66,   66,  219,   66, 1018,   66, 1018,
     1018,   66,   66,  221,   66,   66,   66,  224, 1018,  225,
       66,   66,  220,   66, 1018,   66, 1018,  222, 1018, 1018,
     1018,   66, 1018, 1018,   66, 1018,  223,   66, 1018,   66,
       66,   66,  226,  228, 1018,   66, 1018,   66,   66,   66,

       66, 1018,   66,  227,   66, 1018,   66, 1018,   66, 1018,
     1018, 1018,  230, 1018,   66, 1018, 1018,  229,   66, 1018,
     1018, 1018,   66, 1018, 1018,   66,   66, 1018,  233,   66,
     1018,  231,   66, 1018,  232,   66,   66, 1018, 1018,   66,
       66, 1018, 1018,   66,  236,   66,   66,  237,  238,   66,
      234,   66, 1018,  239,  235, 1018, 1018,   66, 1018,   66,
     1018, 1018,   66,   66, 1018,  240, 1018, 1018,   66,   66,
     1018, 1018, 1018,   66, 1018, 1018,   66,   66, 1018,  242,
       66, 1018,   66,  244,  241, 1018,   66,   66, 1018, 1018,
       66,   66, 1018, 1018,   66,  243,   66, 1018,   66, 1018,

       66, 1018,   66, 1018, 1018, 1018,   66,  245,  246,   66,
       66,  247,  248,   66,   66,   66, 1018, 1018, 1018,   66,
       66, 1018,   66,   66, 1018,   66,  596,   66, 1018,   66,
       66,   66,   66,  249, 1018,   66, 1018,   66,   66, 1018,
     1018,   66,   66, 1018,  250,   66, 1018,   66,   66, 1018,
      251, 1018,   66, 1018,   66, 1018, 1018,  252, 1018,   66,
       66, 1018, 1018,   66,   66,  253, 1018,   66,  254,   66,
       66, 1018,   66,  255, 1018,   66,   66, 1018, 1018, 1018,
     1018,   66,  151,  151,  152,  151,  151,  151,  151,  151,
      151,  151,  151,  151, 1018,  151, 1018,  592, 1018,   66,

     1018,  257, 1018,  259,   66, 1018, 1018,   66,  151,  151,
      151,  151,  151, 1018,   66, 1018,  151,  261,  151,  151,
     1018, 1018, 1018, 1018, 1018,  258,   66,  260,   66, 1018,
     1018, 1018, 1018, 1018,   66, 1018,   66,   66, 1018,   66,
     1018, 1018,   66,   66,   66,   66,  151,  151,  151,  151,
       66, 1018,   66,   66,   66,   66,  262, 1018, 1018,   66,
      263,   66,   66, 1018,   66,   66, 1018, 1018, 1018, 1018,
     1018,   66,   66,  264, 1018,   66,   66, 1018, 1018, 1018,
       66,   66, 1018, 1018,   66, 1018,  265,   66,   66, 1018,
      267,   66,   66,   66, 1018, 1018, 1018,   66,   66,  266,

       66,   66, 1018,   66, 1018, 1018, 1018,   66, 1018,   66,
     1018, 1018, 1018, 1018, 1018,  268,  269,   66,  273,   66,
     1018,  270, 1018,   66,  271,  272,   66,   66,   66, 1018,
       66, 1018,   66,   66,   66,   66,   66,  274, 1018, 1018,
     1018,   66, 1018,   66,   66, 1018,   66, 1018,  277, 1018,
       66,   66,   66,  276, 1018,   66, 1018, 1018, 1018,   66,
     1018,   66,   66,   66,   66, 1018,   66, 1018,   66,  275,
       66,   66,   66,   66, 1018, 1018, 1018, 1018,   66,   66,
      278,   66,   66, 1018,   66, 1018,   66, 1018,   66,   66,
       66, 1018, 1018, 1018,  279,   66,   66, 1018,  281, 1018,

      280, 1018, 1018, 1018,   66, 1018,   66,   66, 1018,   66,
       66, 1018,   66,   66,  283,   66, 1018, 1018,   66, 1018,
       66,   66, 1018,   66,   66, 1018, 1018,   66,  282,   66,
     1018, 1018,   66, 1018,  284,   66, 1018, 1018,   66,   66,
     1018,   66, 1018,   66, 1018, 1018,   66,   66, 1018,   66,
       66,   66, 1018,   66,   66,  285,  286,  292,   66,  291,
       66,   66,  293, 1018,   66, 1018,   66, 1018, 1018,   66,
       66, 1018, 1018, 1018, 1018,   66,   66, 1018,   66, 1018,
      294, 1018, 1018, 1018,   66, 1018,  295,   66, 1018,   66,
       66, 1018,   66,   66,  296,   66, 1018, 1018,   66, 1018,

       66,   66, 1018,   66,   66, 1018, 1018,   66, 1018,   66,
     1018, 1018,   66, 1018,  297,   66, 1018, 1018, 1018,   66,
     1018,   66,  298,   66,   66,  300, 1018,   66,  299, 1018,
       66,   66,   66, 1018,   66,   66,   66, 1018, 1018,   66,
       66,   66, 1018, 1018, 1018,  301,   66,   66, 1018, 1018,
       66,   66, 1018, 1018,   66, 1018,   66,   66, 1018,   66,
      304,   66,   66,   66,  302, 1018, 1018, 1018,  303,   66,
     1018,   66,   66, 1018,  305, 1018, 1018, 1018,   66,   66,
     1018, 1018,   66,   66, 1018, 1018, 1018, 1018,   66, 1018,
       66,   66,  307, 1018,   66,  308, 1018,  306,   66, 1018,

       66,   66,   66, 1018, 1018,   66,  309,   66,   66, 1018,
       66, 1018,   66,   66,   66, 1018, 1018,   66, 1018,   66,
       66, 1018, 1018,   66, 1018,   66, 1018, 1018,   66,   66,
      310,   66, 1018, 1018,   66,  311,   66, 1018, 1018,   66,
      314,   66,   66, 1018,   66,   66,   66, 1018,   66,  312,
       66,   66, 1018,   66,   66, 1018,   66,   66,   66, 1018,
       66,  317,   66,   66,  313,   66, 1018,   66,   66,  315,
     1018,   66,   66,   66, 1018, 1018,   66,  318,  319,   66,
      320, 1018,  316,   66, 1018, 1018, 1018,   66, 1018,   66,
       66, 1018, 1018, 1018,   66, 1018,   66, 1018,  321,   66,

     1018, 1018,   66,  322,   66,   66, 1018,   66,  324, 1018,
       66,   66,   66, 1018,   66,   66,   66,  323, 1018,   66,
     1018,   66,   66, 1018,  326,   66,   66,   66, 1018,  325,
       66,   66,  327,   66,   66, 1018,   66,   66,  328, 1018,
     1018,   66, 1018,   66,   66, 1018, 1018, 1018,   66, 1018,
       66, 1018,   66, 1018, 1018, 1018,   66, 1018, 1018,   66,
       66, 1018,  332,   66,   66,  329,   66, 1018, 1018,   66,
      330,  331,   66, 1018,   66,   66, 1018,   66, 1018,  333,
       66,   66, 1018,   66,  600,   66, 1018,  334,   66, 1018,
       66,   66, 1018,   66, 1018,   66, 1018,   66, 1018,   66,

       66, 1018,  339,  335, 1018, 1018,   66,   66, 1018,   66,
       66,   66,   66, 1018, 1018,  341,  340,   66, 1018,   66,
       66,   66,   66, 1018, 1018,  345,   66, 1018,   66,   66,
     1018,   66,   66, 1018,  342, 1018,  343, 1018,   66,   66,
      346, 1018,   66,   66,   66, 1018, 1018,   66,   66, 1018,
       66,   66, 1018,   66,   66, 1018, 1018, 1018,   66, 1018,
       66,   66, 1018,  348,  349,   66, 1018,   66, 1018,   66,
     1018, 1018, 1018,   66, 1018, 1018,   66,   66, 1018,   66,
       66,   66,   66,   66, 1018, 1018,   66,   66,  347,   66,
       66,   66,   66,  352,   66, 1018,   66,  350,   66, 1018,

       66,  351, 1018,  354,  593, 1018,   66, 1018,   66, 1018,
     1018,   66, 1018, 1018,   66, 1018,   66, 1018,   66,   66,
     1018,   66,  353,   66, 1018,   66,   66,  355,   66,   66,
     1018,  358, 1018,  356,   66,   66,   66, 1018, 1018,   66,
       66, 1018, 1018,   66, 1018,  357, 1018, 1018,  359, 1018,
       66,   66, 1018, 1018,   66, 1018, 1018, 1018,   66, 1018,
       66,   66,   66, 1018, 1018, 1018,  360,   66,  361, 1018,
       66, 1018,   66,   66, 1018, 1018,  363,   66, 1018,  362,
       66, 1018, 1018,   66, 1018,   66,  365,   66,   66,   66,
      364,   66, 1018, 1018,   66,   66, 1018, 1018,   66,   66,

     1018, 1018,   66, 1018,   66,   66, 1018, 1018,   66,   66,
     1018, 1018, 1018,   66, 1018, 1018,   66,   66,  367,   66,
       66,  366,   66, 1018,   66, 1018,   66,   66, 1018, 1018,
       66,  372,   66, 1018, 1018,   66,   66, 1018, 1018, 1018,
     1018,   66,   66, 1018, 1018, 1018,  377,   66, 1018,  380,
       66,  381,   66,   66, 1018,   66,  382,   66,   66,   66,
       66, 1018,   66,   66,   66,   66, 1018,   66, 1018,   66,
     1018, 1018,   66, 1018,  616,   66, 1018, 1018,   66,  383,
      384,   66,  385,   66,   66,  386, 1018, 1018, 1018,   66,
     1018,   66,   66, 1018,  387, 1018, 1018, 1018,   66,   66,

       66, 1018, 1018,   66, 1018, 1018, 1018,   66, 1018, 1018,
       66,   66, 1018,  389,   66,   66,   66,   66,  388, 1018,
       66,  391, 1018,   66, 1018,   66,   66, 1018,   66, 1018,
     1018,  390,   66, 1018,   66,   66, 1018, 1018, 1018, 1018,
       66,  392, 1018,   66,  393, 1018,   66, 1018,   66, 1018,
       66,   66,   66, 1018,  395,   66, 1018,   66,   66,  394,
       66,   66,   66,  396, 1018,  397,   66,   66,   66, 1018,
       66,   66,   66,   66, 1018,  398, 1018,  399, 1018,   66,
     1018, 1018,   66, 1018, 1018, 1018, 1018,   66, 1018,   66,
       66,  401, 1018,   66,   66,   66, 1018,   66,   66,   66,

       66, 1018,  403, 1018,   66,   66,   66, 1018, 1018,   66,
     1018,   66,  402, 1018,   66, 1018,  406,   66, 1018, 1018,
      404, 1018,   66, 1018,   66,   66,   66,   66,   66, 1018,
     1018,   66,  407,   66, 1018, 1018,   66,  405, 1018,   66,
     1018,   66,   66,   66,  599,   66,   66,   66, 1018,   66,
       66,   66, 1018,   66,   66,   66,   66,  410,   66,   66,
       66,   66, 1018,  409,   66,  408, 1018, 1018, 1018,   66,
     1018, 1018,   66,  411, 1018,   66, 1018, 1018,   66,   66,
     1018, 1018, 1018,   66, 1018,  412,   66,   66,  413,   66,
       66, 1018,   66,   66,   66,  415,   66,   66,  414, 1018,

       66,   66,   66, 1018,   66,   66,   66, 1018, 1018, 1018,
       66,   66,   66, 1018, 1018, 1018,   66, 1018, 1018, 1018,
       66,   66,   66,   66,   66,  416,  417,   66,  598,   66,
       66,   66,   66,   66, 1018,   66,  601,   66,   66,   66,
       66, 1018,   66,   66,   66,   66, 1018,   66,  418,   66,
     1018, 1018,   66, 1018,   66,   66,  419,  422,   66,   66,
     1018, 1018,   66, 1018,   66,   66,  420,   66, 1018, 1018,
       66,   66, 1018, 1018, 1018, 1018,   66, 1018, 1018, 1018,
     1018,   66,   66, 1018, 1018, 1018,   66, 1018, 1018,   66,
       66, 1018,   66,   66,  423, 1018,   66,   66,   66,   66,

       66,   66, 1018,   66,   66, 1018, 1018,   66,   66,   66,
     1018,   66,   66,   66, 1018,   66, 1018,   66,   66,  424,
     1018, 1018, 1018,   66, 1018, 1018,   66,   66, 1018,  427,
     1018,  426,   66, 1018, 1018,   66, 1018,   66,   66, 1018,
       66,   66, 1018,   66,   66,  428,   66, 1018, 1018,   66,
     1018,   66,   66, 1018,   66,   66, 1018, 1018,   66, 1018,
       66, 1018, 1018,   66,  429, 1018,   66, 1018, 1018,   66,
       66, 1018,   66, 1018, 1018, 1018, 1018,   66,   66, 1018,
       66,   66,  431, 1018,   66,  430,   66,   66,   66,  433,
     1018, 1018,  432, 1018, 1018,   66,   66,   66, 1018,   66,

       66,   66, 1018,   66,   66,   66,   66, 1018, 1018, 1018,
     1018,   66,   66, 1018,   66,   66, 1018, 1018, 1018, 1018,
       66,  435,   66,   66,  434, 1018, 1018, 1018, 1018, 1018,
      436,  437, 1018,   66,   66, 1018,   66, 1018,   66,   66,
       66,   66,  438, 1018,   66,   66,   66, 1018, 1018,   66,
       66,   66, 1018,  439,  605,   66,   66, 1018,   66,  440,
       66,   66,   66, 1018, 1018,  441, 1018,   66,   66, 1018,
       66,   66, 1018,  442, 1018,  443,  444,   66,   66, 1018,
     1018,   66, 1018, 1018, 1018,   66, 1018,   66, 1018, 1018,
     1018, 1018, 1018,   66, 1018,   66,   66,   66, 1018,   66,

     1018, 1018,   66,   66,  446,  447,   66,   66,   66, 1018,
       66,   66,   66,   66,   66,  448,   66, 1018, 1018,   66,
      449,   66,   66, 1018,   66, 1018, 1018, 1018,   66, 1018,
       66,   66, 1018, 1018, 1018, 1018, 1018, 1018,   66,   66,
     1018, 1018,   66, 1018, 1018,   66,   66,  453,   66,   66,
       66, 1018, 1018,   66, 1018,   66,   66, 1018,   66, 1018,
     1018,   66,   66,  458,   66,   66, 1018,   66,  454,  455,
     1018, 1018,   66,   66, 1018,   66,   66, 1018, 1018,   66,
     1018,   66,   66,   66,   66, 1018, 1018,  460, 1018, 1018,
       66,  462,  463, 1018,   66,   66,  461, 1018,   66, 1018,

       66,   66,   66, 1018, 1018, 1018,   66, 1018, 1018,   66,
      465, 1018,   66,   66, 1018,   66,  464,   66, 1018,   66,
       66, 1018, 1018,   66,   66,  467, 1018, 1018,   66,   66,
      466, 1018,   66, 1018,   66,   66, 1018, 1018, 1018,   66,
       66,   66,  468, 1018, 1018, 1018, 1018,   66,   66,  472,
       66,   66, 1018, 1018, 1018, 1018,   66,   66,  469,   66,
      470, 1018,  471, 1018, 1018, 1018, 1018,   66, 1018,  475,
       66,  479,  476,  473,   66, 1018,   66, 1018,   66, 1018,
     1018,  477,   66, 1018,  478,   66,   66, 1018,   66,  474,
       66,   66, 1018, 1018, 1018,   66,   66, 1018,   66,   66,

       66,   66, 1018, 1018, 1018,   66, 1018,   66,   66, 1018,
       66,   66, 1018, 1018, 1018,   66, 1018,   66,   66, 1018,
     1018,   66,   66,   66, 1018, 1018,   66,  480, 1018,   66,
       66, 1018,   66,  482, 1018, 1018, 1018,   66,  481,   66,
       66,   66,  483,  484, 1018, 1018,  485, 1018,   66,   66,
     1018,  486,   66, 1018, 1018, 1018,   66, 1018,   66,   66,
      487, 1018,  488,   66, 1018,   66, 1018,   66, 1018, 1018,
     1018,   66, 1018, 1018,   66,   66, 1018, 1018,   66,   66,
       66,   66, 1018, 1018,   66,  489,   66,   66,  490,   66,
       66, 1018,   66, 1018,   66,  492,   66,   66,   66, 1018,

     1018, 1018, 1018,   66,  491, 1018,   66, 1018, 1018,  493,
     1018, 1018, 1018,   66,   66, 1018, 1018,   66,  494, 1018,
       66,   66, 1018,   66,   66,  495, 1018, 1018,   66, 1018,
       66,   66,   66, 1018,  497,  498,   66,  496, 1018,   66,
       66,   66,  610,   66,   66, 1018,   66,   66, 1018,   66,
      499,   66, 1018, 1018,   66, 1018,   66,   66,   66,  500,
     1018, 1018,  501,   66, 1018,   66,   66, 1018, 1018,   66,
     1018, 1018, 1018,   66, 1018,   66,   66,   66, 1018, 1018,
      505,   66,  502, 1018, 1018,   66, 1018, 1018,   66,   66,
     1018,   66,   66, 1018,  504,  507,   66, 1018,   66,   66,

     1018, 1018,   66,  506,   66,  508,   66,   66,   66, 1018,
       66, 1018, 1018,   66,   66, 1018, 1018,   66,   66, 1018,
     1018,   66, 1018,   66,  509,   66, 1018,   66, 1018,   66,
       66,  602, 1018,   66, 1018,   66,   66,   66,   66,   66,
       66,   66,   66,  510, 1018,   66,   66,   66, 1018,   66,
       66,  511,   66, 1018, 1018, 1018,   66,   66,   66,  512,
      513,   66, 1018, 1018, 1018,   66, 1018, 1018,   66,   66,
     1018, 1018,   66, 1018,   66,   66, 1018,  515,   66,   66,
       66, 1018, 1018,   66,  514, 1018,   66,   66,   66, 1018,
       66,   66,   66,  518,   66,  516,   66,   66,   66, 1018,

     1018,  517,   66, 1018, 1018,   66,   66, 1018, 1018,   66,
     1018,   66,   66,   66,  519,   66, 1018,  520, 1018, 1018,
       66,   66, 1018,   66,   66, 1018, 1018, 1018, 1018,   66,
       66,   66,   66,  524, 1018,  521, 1018, 1018, 1018,   66,
       66, 1018,   66,   66, 1018, 1018, 1018,   66,   66,   66,
     1018,   66, 1018,  527, 1018,   66, 1018, 1018,   66,   66,
      525, 1018,   66,   66,   66, 1018, 1018,   66,   66, 1018,
     1018,   66, 1018,  528,   66,   66, 1018, 1018,   66,   66,
       66, 1018, 1018,  530,   66,  529, 1018,   66, 1018,   66,
       66, 1018, 1018, 1018,   66, 1018,   66,   66, 1018,   66,

       66, 1018,   66, 1018, 1018,   66,   66,   66, 1018, 1018,
       66,   66,  531, 1018,   66, 1018,   66,  532, 1018, 1018,
     1018, 1018,   66, 1018, 1018,   66,   66,  534,   66, 1018,
      535,   66,  533, 1018,   66, 1018,   66,   66, 1018,   66,
     1018, 1018,   66,   66, 1018,   66, 1018, 1018, 1018, 1018,
       66, 1018,  536,   66,   66, 1018, 1018, 1018, 1018,   66,
      537,   66,   66,  538, 1018,   66, 1018, 1018, 1018,   66,
     1018,   66,   66, 1018, 1018, 1018, 1018,   66,   66, 1018,
     1018,   66, 1018, 1018, 1018,   66, 1018,  539,   66,   66,
     1018, 1018,  540,   66,   66,  543,  542,   66,   66, 1018,

     1018,  541, 1018, 1018,   66,   66, 1018, 1018,   66,  544,
       66, 1018, 1018,   66,   66,  546, 1018, 1018, 1018, 1018,
     1018,   66, 1018,   66,   66, 1018,   66, 1018, 1018,   66,
       66,   66,   66,   66, 1018, 1018, 1018,   66, 1018,   66,
       66,   66,   66,  547,   66, 1018,   66,   66,   66, 1018,
       66,  549, 1018,  548, 1018,   66, 1018, 1018,   66, 1018,
     1018, 1018,   66, 1018,   66, 1018,  553,   66, 1018,   66,
       66,  554, 1018,   66, 1018,   66, 1018,   66,   66,   66,
       66,   66,  555, 1018,   66,   66,   66, 1018,  560,   66,
      558, 1018,   66,   66, 1018, 1018,   66, 1018,   66, 1018,

       66, 1018,   66, 1018,  561, 1018, 1018, 1018,   66, 1018,
       66,   66, 1018, 1018, 1018, 1018, 1018,   66,   66, 1018,
      562,   66,   66, 1018, 1018, 1018,   66,   66,  563, 1018,
       66, 1018, 1018,   66,   66, 1018,   66,   66, 1018,   66,
     1018, 1018, 1018,   66,   66, 1018,  564,   66,   66, 1018,
     1018, 1018, 1018,   66, 1018,   66,   66,  566, 1018,   66,
     1018, 1018,   66,   66, 1018,   66,   66,  565, 1018, 1018,
       66, 1018,   66,   66,   66, 1018, 1018, 1018, 1018,   66,
     1018,   66,   66, 1018, 1018,   66,  567, 1018,  568,   66,
     1018,   66,   66,  569, 1018, 1018, 1018,   66,   66, 1018,

     1018,   66,  573, 1018,   66,   66,  571,   66,   66, 1018,
       66,  574, 1018, 1018,   66,   66, 1018, 1018,   66, 1018,
      572,  575,   66, 1018,   66, 1018, 1018,  576, 1018,   66,
       66, 1018, 1018,   66, 1018,  577, 1018,   66, 1018,   66,
       66,   66, 1018, 1018, 1018,   66,   66, 1018, 1018,   66,
     1018, 1018,   66,   66, 1018,   66,   66,   66,   66, 1018,
     1018, 1018,   66,   66, 1018,   66,   66, 1018,   66,  594,
     1018,   66,   66,   66,  578,  595,   66, 1018,  579,   66,
     1018,   66, 1018,   66,   66, 1018,   66,  580, 1018, 1018,
       66,   66, 1018,   66,   66,  582, 1018, 1018, 1018, 1018,

       66,   66, 1018,   66,   66,  581,   66, 1018, 1018,   66,
       66,   66,   66, 1018, 1018, 1018,  583,   66, 1018,   66,
       66,   66,   66, 1018,  584, 1018,   66, 1018,   66,   66,
     1018, 1018,   66,  603, 1018,   66,   66,  586,   66,  585,
       66, 1018,  587,   66,   66,  588, 1018,   66, 1018,   66,
       66, 1018,  589,   66,   66,  606, 1018,   66,  607,  608,
       66, 1018,  611, 1018,   66,   66,   66,  612,   66,  609,
      613,   66, 1018, 1018,   66,   66, 1018,  614,   66,   66,
      615,   66,  617,   66,   66,  618,   66,   66, 1018, 1018,
     1018,   66,   66,   66,   66,  619,   66,   66, 1018,  620,

       66, 1018,  622,   66,   66, 1018,   66,   66,   66,   66,
     1018,   66,   66, 1018, 1018,  621, 1018, 1018,   66,   66,
      623,   66,   66,  625,  624, 1018,   66,   66, 1018,   66,
       66,  626, 1018,   66,   66, 1018,   66,   66,   66,   66,
     1018,   66,   66, 1018,  628,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,  627, 1018,  631,   66,
       66,   66,   66,  632,   66,   66, 1018,   66, 1018, 1018,
       66,   66, 1018,   66,   66, 1018,   66,  634, 1018,   66,
       66,  636,   66,   66, 1018, 1018,   66,   66,   66, 1018,
       66,   66, 1018, 1018,   66,   66, 1018,   66,   66,   66,

       66,  637,   66,   66,  635,  638,   66, 1018,   66,   66,
       66,   66,  643,   66,   66,  639,   66,   66, 1018,   66,
     1018,   66,   66,   66,   66,   66,  640,   66,   66, 1018,
      642,  641,   66,   66,   66, 1018,   66,   66, 1018,   66,
      644,   66,   66,   66,   66,   66,   66,   66, 1018,   66,
      646,  645,   66,  647,   66,   66,   66,   66,   66, 1018,
       66,   66,   66,   66, 1018,   66,   66, 1018,   66, 1018,
       66,   66,   66, 1018,   66,  649, 1018,   66, 1018, 1018,
     1018,   66,  650,   66, 1018,   66,  651,  652,   66,   66,
     1018,   66,   66, 1018,   66,   66, 1018,   66,   66, 1018,

       66,   66, 1018,   66,   66, 1018,   66,   66, 1018,   66,
       66, 1018,   66,   66, 1018,   66,  656, 1018,   66,  657,
      660,   66,   66, 1018,   66,   66, 1018, 1018,   66,   66,
       66, 1018,   66,   66,  662, 1018, 1018,   66,   66,   66,
       66,  663,   66,   66, 1018,   66,   66, 1018,  664, 1018,
       66,   66,   66,   66,  665,   66,   66, 1018,   66,   66,
     1018, 1018,   66,  666,   66,   66,   66,   66, 1018,   66,
       66, 1018,   66,   66, 1018,   66,  667,   66,   66,   66,
       66,   66, 1018,   66, 1018, 1018,   66, 1018,   66,  670,
       66,   66,  668, 1018,   66,   66, 1018,  671, 1018,   66,

       66,   66, 1018,   66,   66, 1018, 1018,   66,   66, 1018,
       66, 1018,   66,   66,   66, 1018,   66,   66, 1018, 1018,
       66,   66, 1018,   66, 1018, 1018,   66,   66,  672,   66,
       66, 1018,   66, 1018,   66,   66,   66,   66,   66,   66,
       66,  673,   66,   66, 1018,   66, 1018,   66,   66,   66,
     1018,   66,   66, 1018,  674, 1018, 1018,   66,   66, 1018,
       66,  675, 1018,   66,  677,   66, 1018,   66,   66, 1018,
       66,   66, 1018,   66,   66,  678,   66, 1018,  676,   66,
       66,   66,   66,  679,   66,   66, 1018,   66, 1018,   66,
       66,   66,   66,   66,  680,   66,   66, 1018, 1018,  682,

       66,   66,  681, 1018,   66,   66, 1018,  684,  683,   66,
       66,   66, 1018,   66,   66, 1018, 1018,   66,   66, 1018,
       66, 1018,   66,   66,   66, 1018,  685,   66, 1018, 1018,
      686,   66, 1018,   66, 1018,   66,   66,   66,  687,   66,
       66, 1018,  688,   66,   66, 1018,   66, 1018,   66,   66,
       66,  689,   66,   66, 1018, 1018,   66, 1018, 1018,   66,
     1018,   66,   66,   66, 1018,  690,   66,   66,  691,   66,
       66, 1018, 1018,  692,   66,   66,   66,   66, 1018,   66,
      694, 1018,   66,   66, 1018, 1018,   66,   66,  695,   66,
       66,   66,   66,  693,   66,   66, 1018, 1018,   66, 1018,

     1018,   66,   66,   66,  696,  697,   66,   66, 1018, 1018,
      699,   66,   66,   66, 1018,   66,   66,  698, 1018,   66,
       66, 1018,   66, 1018, 1018,   66,   66, 1018,   66,   66,
     1018, 1018,  700, 1018,   66,   66, 1018,   66, 1018, 1018,
       66,  703,   66, 1018,   66,   66,  701,   66,   66, 1018,
       66,  702, 1018,   66, 1018,   66, 1018,   66,   66,   66,
     1018,   66,  704, 1018,   66, 1018, 1018,   66,   66, 1018,
       66, 1018,   66,  706,  705,   66,   66,   66,   66,  707,
       66,   66, 1018, 1018,   66,   66, 1018,   66,  708,   66,
       66,   66, 1018, 1018,   66,   66,  709,   66,   66, 1018,

     1018,   66, 1018, 1018,   66,   66,   66,  710, 1018,   66,
       66, 1018,  712,  711,   66,   66,   66,  713,   66,   66,
     1018, 1018,   66,   66, 1018,   66,  715,   66,   66,   66,
     1018,   66,   66, 1018,  714,   66,   66, 1018,   66, 1018,
       66,   66,   66,  716,   66,   66, 1018, 1018,   66,   66,
     1018,   66, 1018, 1018,   66,   66, 1018,   66, 1018, 1018,
       66,  717,   66,  718,   66,   66, 1018,   66,   66, 1018,
       66,   66, 1018,  719, 1018,   66,   66,   66, 1018,   66,
       66, 1018,   66, 1018, 1018,   66,   66,   66,   66, 1018,
       66, 1018,  721,   66, 1018,   66, 1018,   66,   66,  722,

     1018,   66,   66, 1018,   66, 1018, 1018,   66,  723,   66,
       66,  724,   66,   66, 1018,   66, 1018,   66,   66,   66,
       66,   66, 1018,   66,   66,  725, 1018, 1018,   66,   66,
       66, 1018,   66,   66,  726,   66,  727,   66,   66,   66,
       66,   66,   66,   66, 1018,   66,   66, 1018,   66,  728,
       66,   66,   66, 1018,   66,   66, 1018,   66, 1018,  729,
       66,   66,   66,   66, 1018,   66,   66, 1018, 1018,  730,
       66,   66,   66, 1018,   66, 1018, 1018,   66, 1018,   66,
     1018,   66,   66,  731,   66,   66, 1018,   66,   66, 1018,
       66, 1018,   66,   66,   66,   66,   66,  733,   66,   66,

     1018, 1018, 1018,   66,   66,   66,  734,   66,   66, 1018,
       66, 1018, 1018,   66,   66,   66,   66, 1018,   66,   66,
     1018,  739,  736,   66,   66,   66, 1018,   66,   66, 1018,
       66,  741, 1018,   66,   66,   66,   66, 1018,   66,   66,
      742,   66, 1018,   66,   66,   66,   66,   66, 1018,   66,
       66, 1018,   66, 1018,   66,   66,   66,   66,   66, 1018,
       66, 1018, 1018,  743, 1018,   66, 1018,   66,  744,   66,
       66, 1018, 1018, 1018,   66,   66, 1018,   66,   66, 1018,
     1018, 1018, 1018,   66,   66,   66,  747, 1018,   66,   66,
     1018,   66,  746, 1018,   66, 1018, 1018,   66,   66,  748,

       66,  753,   66, 1018,   66,   66,   66,   66,   66,  749,
       66,   66, 1018, 1018,   66,   66, 1018,   66, 1018,  750,
     1018,   66,   66,  752,   66, 1018,   66,   66,  751,   66,
       66,   66,   66, 1018,  754,   66,  755,   66, 1018,   66,
       66,   66, 1018,   66,   66, 1018,   66, 1018,   66,   66,
       66,   66,  756,   66,   66, 1018,  758, 1018, 1018,   66,
     1018,   66,   66,   66,  759, 1018,   66,   66,  757,  760,
       66,   66, 1018, 1018,   66,   66, 1018,   66,  761,   66,
       66,   66,  762,   66,   66, 1018, 1018,   66,   66, 1018,
       66, 1018, 1018,   66,   66, 1018,   66,   66, 1018, 1018,

     1018, 1018,   66,   66, 1018,   66,   66,  763, 1018, 1018,
     1018,   66,   66, 1018,   66,  765,  764,   66,  767,   66,
     1018,   66,   66, 1018,   66,   66, 1018,   66, 1018, 1018,
     1018, 1018,   66,   66,   66,  766, 1018,  768,   66,   66,
     1018,   66, 1018, 1018,   66, 1018,  769,   66,   66, 1018,
       66, 1018, 1018,  770,   66,   66,   66, 1018,   66,  771,
     1018,   66,   66, 1018,   66,   66, 1018,   66, 1018, 1018,
       66,   66, 1018,   66,  772,  773, 1018,   66,   66,   66,
     1018,   66, 1018, 1018,   66,   66, 1018,   66,   66, 1018,
       66, 1018, 1018,   66,   66, 1018,  774,  775,   66, 1018,

       66, 1018,   66,   66, 1018, 1018,   66,   66, 1018,  776,
       66,   66, 1018,   66,  777,   66,   66,   66, 1018,   66,
       66, 1018,  778,   66,   66, 1018,   66, 1018,   66,   66,
       66, 1018,  779,   66, 1018, 1018,   66,   66, 1018,   66,
     1018, 1018,   66,   66, 1018,  781,   66, 1018,  782, 1018,
      780,   66,   66, 1018,   66,   66, 1018,   66,  783,   66,
       66,   66,   66,   66,   66,   66, 1018,   66,   66,  784,
       66, 1018,   66,   66,   66,  786,   66,   66, 1018,  785,
     1018,   66,   66,   66, 1018,   66,   66, 1018, 1018,   66,
       66, 1018,   66, 1018,  788,   66,   66, 1018,   66,   66,

     1018,   66, 1018,  787,   66,   66,  790,   66, 1018,   66,
       66, 1018, 1018, 1018,   66,   66,   66,  789,   66,   66,
     1018,  791, 1018,   66,   66,   66,  793,   66,   66, 1018,
      792,   66,   66, 1018,   66,  795,   66,   66,   66, 1018,
       66,   66, 1018, 1018,   66,   66, 1018,   66,  796,  794,
       66,   66, 1018,   66,   66, 1018,  797, 1018, 1018,   66,
       66, 1018,   66,   66,  799,   66, 1018,   66,   66,   66,
       66,   66,   66,   66,  798,   66,   66,  800,   66, 1018,
       66,   66,   66, 1018,   66,   66, 1018,  801, 1018,   66,
       66,   66,  802,   66,   66, 1018, 1018,   66,   66, 1018,

       66, 1018,   66,   66,   66,  804,   66,   66, 1018, 1018,
       66, 1018, 1018,   66,   66,   66,  805,   66, 1018,   66,
       66, 1018,   66,   66, 1018, 1018,   66, 1018, 1018,   66,
       66,   66,  807, 1018,   66, 1018, 1018,   66,  811,   66,
     1018,   66,   66,  809,   66,   66, 1018,   66, 1018, 1018,
       66, 1018,   66,  813,   66,   66,  812, 1018,   66,   66,
     1018, 1018, 1018, 1018,   66,   66, 1018,   66, 1018, 1018,
     1018, 1018, 1018, 1018,   66,  815,  816,  817,  818,  819,
      820,  821,  822, 1018,   66,   66,   66, 1018, 1018,   66,
       66,   66,   66,   66,   66, 1018, 1018,  823,   66,   66,

       66,   66,   66,   66,   66,  824,   66,   66, 1018,   66,
       66, 1018,   66,   66,  826,   66,   66,   66, 1018,   66,
       66,   66, 1018,   66,   66,  825, 1018,   66,  828,   66,
       66,   66,   66, 1018,   66,   66, 1018,   66,  829,  830,
       66,   66,   66,  827,   66,   66,   66, 1018,   66,   66,
      831,  832,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66, 1018, 1018,  833,   66,   66,   66,   66,
       66,   66,   66, 1018,   66,   66, 1018,   66,   66, 1018,
       66,   66, 1018, 1018, 1018,   66,   66,   66,  834, 1018,
       66,   66,  835,  836,   66,   66, 1018, 1018,   66,   66,

     1018,   66, 1018, 1018,   66,   66, 1018,   66,   66, 1018,
       66, 1018, 1018,   66,  837,   66,   66,  839,   66,  838,
     1018,   66,  840,   66, 1018,   66,   66,   66, 1018,   66,
     1018, 1018,   66,   66, 1018,   66,   66, 1018,   66,   66,
     1018,   66,   66, 1018,   66,   66,  843,   66,  841, 1018,
       66, 1018, 1018,   66,  842, 1018,   66,   66,  844,  845,
       66,   66,   66, 1018,   66,   66, 1018, 1018,   66,  847,
     1018,   66,   66,   66,   66, 1018,   66,   66, 1018,  849,
      846,   66, 1018,   66,   66,   66,   66,  848, 1018,   66,
       66, 1018,  850,   66,   66, 1018,   66, 1018, 1018,   66,

       66,  851,   66,   66, 1018,  852, 1018,   66,   66,   66,
     1018,   66,   66, 1018, 1018,   66,   66, 1018,   66, 1018,
     1018,   66,   66, 1018,   66,   66, 1018,  855, 1018,   66,
       66,  853, 1018,   66,   66, 1018,  854,   66,   66, 1018,
       66, 1018,   66,   66,   66,  856,   66,   66, 1018, 1018,
       66,   66, 1018,   66, 1018,   66,   66,   66,  857,   66,
       66, 1018, 1018,   66, 1018, 1018,   66, 1018,   66, 1018,
       66, 1018,  858,   66, 1018, 1018,   66,   66, 1018,  859,
     1018,  860,   66,   66, 1018,   66,   66,  861,   66, 1018,
       66,   66,   66,   66,   66,   66,   66, 1018,   66,   66,

     1018,   66, 1018,  862,   66,   66, 1018,   66,   66, 1018,
       66, 1018, 1018,   66,  863,   66,   66,  864,   66,   66,
     1018,   66, 1018,   66,   66,   66,  865,   66, 1018,   66,
       66, 1018, 1018, 1018,   66,   66,   66, 1018,   66, 1018,
     1018,   66, 1018,   66, 1018,   66,   66,  866,   66,   66,
     1018,   66,   66, 1018,   66, 1018,   66,   66,   66,   66,
       66, 1018,   66,   66, 1018, 1018, 1018,   66,   66,   66,
     1018,   66, 1018, 1018,   66, 1018,   66, 1018,   66,   66,
      869,   66,   66, 1018,   66, 1018, 1018,   66, 1018,   66,
     1018,   66,   66,  870, 1018,   66,   66, 1018,   66, 1018,

     1018,   66,   66,   66,   66,  871,   66,   66, 1018,   66,
     1018,   66,   66,   66,   66,   66, 1018,   66,   66, 1018,
       66, 1018,   66,   66,   66,   66,   66, 1018,   66,   66,
     1018,   66, 1018,   66,   66,   66,   66,   66, 1018,   66,
       66, 1018, 1018, 1018,   66,   66,   66, 1018,   66,   66,
     1018,  873, 1018,   66,   66,   66, 1018,   66,   66, 1018,
     1018,   66,   66, 1018,   66, 1018,   66,   66,   66,  875,
       66,   66, 1018, 1018,   66,   66, 1018,   66,  874,   66,
       66,   66, 1018,   66,   66, 1018, 1018,   66, 1018, 1018,
       66, 1018,   66,   66,   66, 1018,  876,   66,   66, 1018,

      877,  878, 1018, 1018,   66,   66, 1018,   66,   66,   66,
       66,  879,   66,  880, 1018,  881,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66, 1018, 1018,   66,
     1018,   66,   66,   66,   66,   66, 1018,   66,  882, 1018,
       66,   66, 1018,   66,   66, 1018,   66,   66, 1018,   66,
       66, 1018,  883, 1018, 1018,   66,   66, 1018,   66,   66,
       66,  884,   66,   66,   66,   66,   66,   66,   66, 1018,
     1018, 1018,   66,   66,   66,   66,  885,   66,   66, 1018,
       66, 1018, 1018,   66,  886, 1018,   66,   66, 1018,   66,
      887,   66, 1018,   66,   66, 1018,   66,   66, 1018,   66,

       66, 1018,  888, 1018,   66,   66,   66, 1018,   66,  889,
     1018,   66,   66,   66, 1018,   66,   66,   66,   66,   66,
      891,  892, 1018,  890,   66,   66,   66,   66,   66,   66,
       66,  893,   66,  894,  895, 1018,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,  896, 1018, 1018,
       66,   66,   66,   66,   66,  898,  897, 1018,   66,   66,
     1018, 1018,   66, 1018, 1018,   66,   66,  900,   66,   66,
       66,   66,  899,   66,   66,   66,   66,  901,   66,   66,
     1018,   66, 1018,   66,   66,   66, 1018,   66,   66, 1018,
       66, 1018, 1018,   66,  902,   66,   66, 1018,   66, 1018,

     1018,   66, 1018,   66, 1018,   66,   66,  903, 1018,   66,
     1018, 1018,   66,  904,   66,  906,   66,   66,  905,   66,
       66, 1018,   66,   66, 1018,   66, 1018,   66,   66,   66,
       66,   66, 1018,   66,   66, 1018, 1018, 1018,   66,   66,
       66, 1018,   66,   66, 1018,   66,  909, 1018,   66,  908,
       66,   66, 1018,   66,   66, 1018,   66, 1018,   66,   66,
       66,   66,   66,  911,   66,  910, 1018,   66, 1018,   66,
      912,   66,   66,   66, 1018,   66,  913, 1018,   66,   66,
     1018,   66,   66, 1018,   66, 1018, 1018,   66,   66, 1018,
     1018,  916,   66, 1018,   66,  915,   66,   66,  914,   66,

       66, 1018, 1018,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66, 1018, 1018,   66, 1018,   66,   66,
       66,   66, 1018, 1018,   66,   66, 1018,  917, 1018, 1018,
       66,   66, 1018,   66,   66, 1018, 1018, 1018,  918,   66,
       66,  919,   66,   66, 1018, 1018, 1018,   66,   66,   66,
      920,   66,   66, 1018, 1018,   66,   66, 1018,   66, 1018,
      921,   66,   66, 1018,   66,   66, 1018, 1018,  922,   66,
       66,   66,  923,   66,   66, 1018, 1018,   66,   66, 1018,
       66, 1018, 1018,   66,   66, 1018,   66,   66, 1018, 1018,
      925,  926,   66,   66, 1018,   66,  927,  924, 1018,  928,

       66, 1018,   66,  929, 1018,   66,   66,  930,   66,   66,
     1018,   66, 1018,   66,   66,   66,   66,   66,   66,   66,
     1018,   66,   66, 1018,   66, 1018,   66,   66,   66, 1018,
       66, 1018, 1018,   66, 1018,   66, 1018,   66,  932,  931,
       66,   66, 1018,   66,   66, 1018,   66, 1018,   66,   66,
       66,   66,   66, 1018,   66,   66, 1018,  933, 1018,   66,
       66,   66, 1018,   66,   66, 1018,  934, 1018,   66,   66,
       66,  936,   66,   66, 1018, 1018,   66,  935, 1018,   66,
       66,  937,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66, 1018,   66,   66,  938,   66,   66,   66,

     1018,   66,   66,   66,   66, 1018,   66,   66,  939,   66,
       66, 1018,   66,   66, 1018, 1018,   66,   66, 1018,   66,
      940,   66, 1018, 1018,   66,  942,  941,   66, 1018,   66,
      943,   66,   66,  944,   66,   66, 1018,   66,   66,  945,
      946, 1018,   66,   66,   66, 1018,   66,   66, 1018, 1018,
     1018, 1018,   66,   66, 1018,   66,   66, 1018,   66, 1018,
      947,   66,   66,   66,   66, 1018,   66,   66, 1018,   66,
     1018,   66,   66,   66,   66,   66, 1018,   66,   66, 1018,
      948, 1018,   66,   66,   66, 1018,   66,   66, 1018,  949,
     1018, 1018,   66,   66, 1018,   66,  951, 1018,   66, 1018,

      950, 1018,   66,   66,   66, 1018,   66,  953, 1018,   66,
       66, 1018,   66,  952, 1018,   66,   66,  955,   66,   66,
     1018,   66,   66, 1018,   66,   66, 1018,   66,   66,  954,
       66,   66, 1018,   66,   66, 1018,   66,   66, 1018,   66,
      956, 1018,   66,   66, 1018,   66,   66,  957, 1018,   66,
       66,   66, 1018,   66,   66, 1018,  958,   66,  960,  959,
       66,   66,   66,   66, 1018,   66,   66, 1018, 1018,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
      961, 1018,   66, 1018,   66,   66,   66,   66,   66, 1018,
       66,  962,  963,   66,   66, 1018,   66,   66, 1018,   66,

       66, 1018,   66,   66, 1018,   66,   66, 1018,   66,   66,
     1018,   66, 1018, 1018,   66,   66, 1018,   66,   66,  964,
      965,   66,   66,   66, 1018,   66,   66, 1018, 1018,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
     1018, 1018,   66,   66,   66,   66,   66,   66,   66, 1018,
      966,   66, 1018, 1018,   66, 1018, 1018,   66,   66,   66,
     1018, 1018,  968,   66, 1018,  967,  970,   66,   66,   66,
     1018,   66,   66, 1018, 1018,   66,  969, 1018,   66,  971,
       66,   66,   66, 1018, 1018,   66,   66, 1018,   66,   66,
     1018, 1018, 1018, 1018,   66,  972,   66,  974,  973,   66,

       66, 1018,   66,  975, 1018,   66, 1018, 1018,   66,   66,
     1018,   66, 1018,   66, 1018,   66,   66,   66,   66,   66,
      976,   66,   66, 1018, 1018,   66,   66, 1018,   66,   66,
      977,   66,   66,   66,   66, 1018,   66,   66,   66,   66,
      980,   66,   66, 1018,   66, 1018,   66,   66,   66,  978,
       66,  981,  979,   66,  982,  983, 1018,   66,   66, 1018,
     1018,   66, 1018,  984,  985,   66, 1018, 1018,   66, 1018,
       66, 1018, 1018,   66,  986, 1018, 1018,   66, 1018, 1018,
       66, 1018,   66, 1018, 1018,   66,   66, 1018,   66, 1018,
      987,   66,   66,   66,   66, 1018,   66,   66, 1018,   66,

      988,   66,   66,   66,   66,   66,  989,   66,   66, 1018,
       66, 1018,   66,   66,   66,   66,   66, 1018,   66,   66,
     1018, 1018,  991,  990,   66,   66, 1018,   66, 1018, 1018,
       66, 1018,   66, 1018,   66,   66,  992,   66,   66, 1018,
       66,   66, 1018, 1018, 1018,   66,   66,   66,  993,   66,
       66, 1018,   66, 1018, 1018,   66,   66,   66,  994,  996,
      995,   66, 1018, 1018, 1018,   66,   66,   66,  997,   66,
       66, 1018,   66, 1018,   66,   66,   66,   66,   66,   66,
       66, 1018,   66,   66, 1018,   66, 1018,   66,   66,   66,
     1018,   66,   66, 1018,   66,  998,   66,   66,   66,   66,

       66,   66,   66, 1018,   66,   66, 1018,   66,  999,   66,
       66,   66, 1018,   66,   66, 1018, 1018, 1018,   66,   66,
       66, 1000,   66,   66, 1018, 1018,   66,   66, 1001,   66,
     1018,   66,   66,   66, 1002,   66,   66, 1018, 1018,   66,
       66, 1018,   66, 1003,   66,   66,   66, 1018,   66,   66,
     1018, 1004,   66,   66, 1018,   66, 1018,   66,   66,   66,
     1005,   66,   66, 1018, 1018,   66,   66, 1018,   66, 1018,
     1018,   66,   66, 1018,   66,   66, 1007, 1006, 1018,   66,
       66,   66, 1008,   66,   66, 1018, 1018,   66,   66, 1018,
       66, 1018,   66,   66,   66, 1018,   66,   66, 1018, 1018,

       66,   66, 1018,   66, 1018, 1018,   66,   66, 1018,   66,
     1009, 1018, 1018,   66, 1010, 1018,   66, 1018,   66,   66,
     1011,   66, 1014, 1015,   66,   66, 1018,   66,   66, 1018,
       66,   66, 1012, 1013,   66, 1018,   66, 1018, 1018,   66,
       66, 1016, 1017,   66,   66,   66,   66, 1018,   66,   66,
       66,   66,   66,   66, 1018, 1018, 1018, 1018,   66,   66,
       66, 1018,   66,   66,   66, 1018, 1018,   66,   66,   66,
       66,   66,   66, 1018, 1018,   66,   66,   66,   66,   66,
       66,   66, 1018,   66,   66, 1018, 1018,   66, 1018, 1018,
       66,   66,   66, 1018, 1018,   66, 1018, 1018, 1018, 1018,

     1018, 1018,   66,   66,   66,   57,   57,  153,  153,  153,
      153,  151,  151,  151,  151,    3, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018
    } ;

static yyconst flex_int16_t yy_chk[6885] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,   18,
       20,    5,    8,    8,   18,    8,    8,    8,    8, 1019,
        8,  867,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,   55,  261,  261,   55,   20,    8,

        8,    8,  814,    8,  808,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   26,  803,   26,   26,   26,   58,   30,   19,   30,
       30,   30,   67,  150,  745,   26,   33,   62,   33,  740,
       33,   30,   33,   33,   26,   33,   58,  738,   33,  735,
       30,   67,  150,  352,  352,  732,   19,   31,   33,   31,
       31,   31,   37,  669,   39,   62,   37,   31,   39,   31,
       37,   31,   39,   37,   38,   39,  661,   38,  659,   37,

       31,   39,   38,   39,   31,   38,   38,   31,   31,  228,
      228,   38,   31,  658,   31,  184,  184,  184,  184,  257,
      257,  257,  257,   31,   32,  653,   32,   32,   32,  259,
      259,  259,  259,   34,  648,  630,   34,  570,   32,   34,
       34,  228,   34,   36,   36,   34,   34,   32,  559,  557,
       36,   36,   32,   36,   36,   34,   36,  489,   32,   32,
       36,   32,  489,  489,   32,  489,   36,  556,  552,  551,
      550,  545,  489,   40,   32,   35,   35,   35,  526,  523,
       35,   40,   35,   35,   40,   35,   40,   35,   35,  522,
       40,   42,   41,   35,   41,   41,   41,   35,   35,   42,

       41,  503,   42,   41,   42,   41,  472,   43,   42,   41,
      459,   41,   43,  457,  456,   43,  452,  451,   43,   45,
      450,   43,  445,   44,   43,   44,   46,   45,   43,  425,
       45,   44,  422,   44,   44,  421,   45,   44,   50,   44,
       44,  400,   44,   46,  354,  346,   50,   46,  495,   50,
      495,   46,  345,  495,   46,   50,  495,  344,  338,  314,
       46,   47,   47,  495,   47,   47,   48,   66,   47,   47,
      307,   47,   47,  277,   48,   47,  256,   48,   47,   47,
       66,  236,   48,   48,   49,   49,  151,   49,   66,   48,
       57,   66,   49,   56,   25,   49,   23,   66,    6,    3,

        0,   49,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   68,   61,    0,   69,    0,    0,
       68,    0,   70,    0,   69,    0,    0,    0,   61,   61,
       61,   61,   61,   68,    0,   70,   61,   69,   61,   61,
        0,   68,    0,   70,   68,   69,   70,    0,   69,    0,
       68,   70,   70,    0,   69,   68,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   61,   61,   61,   61,
       63,   63,   63,   63,   63,   63,   63,   63,   63,    0,
        0,    0,    0,    0,   63,   71,   72,   73,    0,    0,
        0,    0,   63,   63,   63,   63,   63,   63,   71,   72,

       73,   71,    0,    0,   73,   74,   71,   72,   73,   71,
       72,   73,   75,    0,    0,   71,   72,   73,   74,    0,
        0,    0,    0,    0,   76,   75,   74,    0,   77,   74,
        0,    0,    0,   75,    0,   74,   75,   76,   78,    0,
       77,   77,   75,   75,    0,   76,    0,    0,   76,   77,
        0,   78,   77,   76,   76,    0,   79,   78,   77,   78,
        0,    0,   78,   78,    0,    0,   80,    0,   78,   79,
       81,  490,    0,  490,    0,    0,    0,   79,  490,   80,
       79,  490,   79,   81,    0,   82,   79,   80,  490,   83,
       80,   81,   80,    0,   81,    0,   80,   81,   82,   84,

       81,   85,   83,    0,    0,    0,   82,    0,    0,   82,
       83,   82,   84,   83,   85,   82,   84,    0,    0,   83,
       84,   86,   85,   84,    0,   85,   87,    0,   85,   84,
       85,   85,    0,   88,   86,    0,    0,    0,    0,   87,
        0,   91,   86,    0,   86,   86,   88,   87,   89,    0,
       87,   86,   90,   91,   88,    0,   87,   88,    0,    0,
        0,   89,   88,   88,   89,   90,   91,    0,   95,   89,
        0,    0,   89,   90,   91,   92,   90,   91,   89,    0,
       93,   95,   90,   91,   90,    0,    0,    0,   92,   95,
       92,    0,   95,   93,   94,    0,   92,    0,   95,   92,

       93,   93,    0,    0,   93,   92,   96,   94,    0,   94,
       93,    0,    0,   97,    0,   94,    0,    0,   94,   96,
        0,    0,    0,    0,   94,   94,   97,   96,   98,   96,
       96,    0,   99,  100,   97,    0,   96,   97,    0,    0,
        0,   98,   98,   97,   97,   99,  100,  101,  102,   98,
        0,    0,   98,   99,  100,    0,   99,  100,   98,  101,
      101,  102,   99,  100,    0,    0,  100,  103,  101,  102,
        0,  101,  102,    0,  104,    0,    0,  101,  102,  105,
      103,  106,    0,    0,    0,    0,    0,  104,  103,    0,
        0,  103,  105,    0,  106,  104,    0,  103,  104,  107,

      105,  109,  106,  105,  104,  106,  105,    0,    0,  105,
      104,  106,  107,  108,  109,    0,    0,  108,    0,    0,
      107,  110,  109,  107,    0,  109,    0,    0,    0,  107,
      108,  109,  109,  111,  110,  112,  110,    0,  108,    0,
        0,  108,  110,    0,    0,  110,  111,  108,  112,  111,
        0,  110,    0,  113,  111,  114,  112,  111,  112,  112,
        0,    0,    0,  111,    0,  112,  113,    0,  114,  115,
        0,    0,    0,  116,  113,    0,  114,  113,  113,  114,
      114,    0,  115,  113,  114,  114,  116,  115,  117,  118,
      115,    0,    0,  115,  116,    0,    0,  116,    0,  115,

        0,  117,  118,  116,  116,    0,    0,  119,  120,  117,
      118,    0,  117,  118,  118,  117,    0,    0,  117,  118,
      119,  120,  122,    0,    0,    0,  121,    0,  119,  120,
        0,  119,  120,    0,    0,  122,  119,  119,  120,  121,
      123,  124,  121,  122,    0,  126,  122,  121,    0,    0,
      121,    0,  122,  123,  124,  123,  121,    0,  126,    0,
      125,  123,  124,  124,  123,  124,  126,  126,    0,  126,
      123,  124,  123,  125,  127,  126,  128,  125,  130,    0,
        0,  125,    0,    0,  125,    0,  125,  127,    0,  128,
      125,  130,  127,  129,    0,  127,    0,  128,  127,  130,

      128,  131,  130,  128,  127,  129,  128,    0,  130,    0,
        0,    0,  130,    0,  131,  132,    0,  129,  129,  133,
        0,    0,  131,    0,    0,  131,  129,    0,  132,  129,
        0,  131,  133,  134,  131,  129,  132,    0,  136,  132,
      133,    0,    0,  133,  135,  132,  134,  135,  135,  133,
      133,  136,  137,  136,  134,    0,  135,  134,    0,  136,
        0,    0,  136,  134,    0,  137,  138,    0,  136,  135,
      139,    0,    0,  137,    0,    0,  137,  135,    0,  138,
      135,    0,  137,  139,  137,  140,  135,  138,    0,  141,
      138,  139,    0,    0,  139,  138,  138,    0,  140,  142,

      139,  143,  141,    0,    0,    0,  140,  140,  140,  140,
      141,  141,  142,  141,  143,  140,    0,  144,    0,  141,
      142,    0,  143,  142,  145,  143,  494,  494,    0,  142,
      144,  143,  494,  143,    0,  494,    0,  145,  144,  146,
        0,  144,  494,    0,  144,  145,  148,  144,  145,    0,
      145,  147,  146,    0,  145,    0,    0,  146,    0,  148,
      146,    0,    0,  146,  147,  147,    0,  148,  147,  146,
      148,    0,  147,  148,    0,  147,  148,    0,    0,    0,
        0,  147,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,    0,  153,    0,  491,    0,  491,

        0,  156,    0,  157,  491,    0,    0,  491,  153,  153,
      153,  153,  153,  156,  491,  157,  153,  158,  153,  153,
        0,    0,    0,    0,    0,  156,  156,  157,  157,  158,
        0,  160,    0,    0,  156,    0,  157,  156,    0,  157,
        0,  159,  158,  156,  160,  157,  153,  153,  153,  153,
      158,  161,  160,  158,  159,  160,  159,    0,    0,  158,
      160,  160,  159,  162,  161,  159,    0,  163,    0,    0,
        0,  159,  161,  161,    0,  161,  162,  165,    0,  164,
      163,  161,    0,    0,  162,    0,  163,  162,  163,    0,
      165,  163,  164,  162,    0,    0,    0,  163,  165,  164,

      164,  165,  166,  164,  167,    0,  168,  165,    0,  164,
        0,    0,    0,    0,    0,  166,  166,  167,  168,  168,
      169,  166,  170,  166,  166,  167,  166,  168,  167,    0,
      168,    0,  166,  169,  167,  170,  168,  170,  171,    0,
      172,  169,  173,  170,  169,    0,  170,    0,  174,    0,
      169,  171,  170,  172,    0,  173,    0,    0,  176,  171,
      174,  172,  171,  173,  172,  175,  173,    0,  171,  171,
      172,  176,  173,  174,    0,    0,    0,    0,  175,  176,
      175,  174,  176,  177,  174,  178,  175,    0,  176,  175,
      174,    0,    0,    0,  176,  175,  177,  179,  178,  180,

      177,    0,    0,    0,  177,    0,  178,  177,    0,  178,
      179,  181,  180,  177,  180,  178,    0,    0,  179,    0,
      180,  179,    0,  180,  181,  182,  183,  179,  179,  180,
      185,    0,  181,    0,  181,  181,    0,    0,  182,  183,
      186,  181,    0,  185,    0,  187,  182,  183,    0,  182,
      183,  185,    0,  186,  185,  182,  183,  186,  187,  185,
      185,  186,  187,  188,  186,  189,  187,    0,    0,  187,
      186,    0,    0,    0,    0,  187,  188,  190,  189,  191,
      188,    0,    0,    0,  188,    0,  189,  188,    0,  189,
      190,  192,  191,  188,  190,  189,    0,    0,  190,    0,

      191,  190,    0,  191,  192,    0,  193,  190,    0,  191,
      195,  194,  192,    0,  192,  192,    0,    0,    0,  193,
        0,  192,  193,  195,  194,  195,  196,  193,  194,    0,
      193,  195,  194,  197,  195,  194,  193,    0,  198,  196,
      195,  194,    0,    0,    0,  196,  197,  196,  199,    0,
      196,  198,    0,    0,  197,    0,  196,  197,  200,  198,
      199,  199,  198,  197,  197,    0,    0,    0,  198,  199,
      201,  200,  199,    0,  200,    0,    0,  202,  199,  200,
        0,    0,  200,  201,  203,    0,    0,    0,  200,  205,
      202,  201,  204,    0,  201,  204,    0,  203,  202,  206,

      201,  202,  205,    0,  204,  203,  205,  202,  203,    0,
      205,    0,  206,  205,  203,    0,    0,  204,  207,  205,
      206,    0,    0,  206,    0,  204,    0,    0,  204,  206,
      206,  207,  209,  208,  204,  207,  496,  211,    0,  207,
      210,  496,  207,    0,  496,  209,  208,  212,  207,  208,
      211,  496,  210,  209,  208,    0,  209,  208,  211,  214,
      212,  211,  209,  208,  209,  210,  213,  211,  212,  210,
        0,  212,  214,  210,    0,    0,  210,  212,  213,  213,
      214,  215,  210,  214,    0,    0,  216,  213,    0,  214,
      213,  217,    0,    0,  215,    0,  213,    0,  215,  216,

        0,  218,  215,  216,  217,  215,  220,  216,  217,    0,
      216,  215,  217,  219,  218,  217,  216,  216,    0,  220,
      221,  217,  218,    0,  220,  218,  219,  220,    0,  219,
      220,  218,  221,  221,  219,  222,  220,  219,  221,  223,
        0,  221,    0,  219,  221,    0,    0,    0,  222,    0,
      221,  225,  223,  224,    0,    0,  222,    0,    0,  222,
      223,    0,  226,  223,  225,  222,  224,  226,    0,  223,
      223,  224,  225,    0,  224,  225,    0,  224,    0,  226,
      226,  225,  227,  224,  499,  499,  229,  226,  226,    0,
      499,  226,    0,  499,    0,  227,  230,  226,  231,  229,

      499,    0,  229,  227,    0,    0,  227,  229,  232,  230,
      229,  231,  227,    0,    0,  231,  229,  230,  233,  231,
      230,  232,  231,  234,    0,  237,  230,    0,  231,  232,
      235,  233,  232,    0,  232,    0,  234,  237,  232,  233,
      238,    0,  233,  235,  234,    0,    0,  234,  233,    0,
      237,  235,  238,  234,  235,    0,  239,    0,  237,    0,
      235,  237,    0,  240,  240,  238,  241,  237,  242,  239,
      240,    0,    0,  238,    0,    0,  238,  239,    0,  241,
      239,  242,  238,  240,    0,    0,  239,  241,  239,  242,
      241,  240,  242,  243,  240,  244,  241,  241,  242,    0,

      240,  242,    0,  245,  492,  243,  492,    0,  244,    0,
      246,  492,    0,    0,  492,  245,  244,    0,  243,  244,
        0,  492,  244,  246,    0,  244,  243,  245,  245,  243,
      247,  246,    0,  245,  246,  243,  245,  248,    0,  245,
      246,    0,    0,  247,    0,  245,    0,    0,  247,  249,
      248,  247,    0,    0,  247,    0,    0,    0,  248,  250,
      247,  248,  249,    0,  251,    0,  248,  248,  248,    0,
      249,    0,  250,  249,  252,    0,  250,  251,  253,  249,
      250,    0,    0,  250,    0,  251,  252,  252,  251,  250,
      251,  253,  254,    0,  251,  252,  258,    0,  252,  253,

        0,    0,  253,    0,  252,  254,  255,    0,  253,  258,
        0,  260,    0,  254,    0,    0,  254,  258,  255,  255,
      258,  254,  254,    0,  260,    0,  258,  255,    0,  262,
      255,  258,  260,    0,  263,  260,  255,    0,    0,  264,
        0,  260,  262,    0,    0,    0,  260,  263,    0,  262,
      262,  263,  264,  262,  265,  263,  264,  510,  263,  262,
      264,    0,  510,  264,  263,  510,    0,  265,  266,  264,
      267,    0,  510,    0,  510,  265,    0,    0,  265,  265,
      266,  266,  266,  267,  265,  266,  268,    0,    0,  266,
      269,  267,  266,    0,  267,    0,    0,    0,  266,  268,

      267,    0,  270,  269,  271,    0,    0,  268,    0,    0,
      268,  269,    0,  269,  269,  270,  268,  271,  268,    0,
      269,  271,  272,  270,    0,  271,  270,  273,  271,    0,
        0,  270,  270,    0,  271,  272,    0,  274,    0,    0,
      273,  272,  275,  272,  273,    0,  272,  276,  273,  279,
      274,  273,  272,    0,  275,  275,    0,  273,  274,  274,
      276,  274,  279,  275,    0,  275,  275,  274,  276,  278,
      279,  276,  275,  279,  280,  275,  281,  276,    0,  279,
        0,  282,  278,    0,    0,    0,    0,  280,    0,  281,
      278,  278,    0,  278,  282,  280,  283,  281,  280,  278,

      281,  284,  282,  285,  280,  282,  281,    0,    0,  283,
        0,  282,  281,    0,  284,  286,  285,  283,    0,    0,
      283,    0,  284,    0,  285,  284,  283,  285,  286,  291,
      293,  284,  286,  285,  292,    0,  286,  284,    0,  286,
        0,  498,  291,  293,  498,  286,  498,  292,  294,  498,
      291,  293,    0,  291,  293,  292,  498,  293,  292,  291,
      293,  294,  295,  292,  292,  291,  296,    0,    0,  294,
        0,    0,  294,  294,    0,  295,  297,    0,  294,  296,
      299,  298,    0,  295,    0,  295,  295,  296,  297,  297,
      296,    0,  295,  299,  298,  299,  296,  297,  298,  300,

      297,  299,  298,    0,  299,  298,  297,    0,    0,  301,
      299,  298,  300,    0,  302,    0,  497,    0,    0,  303,
      300,  497,  301,  300,  497,  300,  301,  302,  497,  300,
      301,  497,  303,  301,  304,  302,  500,  500,  302,  301,
      303,  305,  500,  303,  302,  500,  306,  304,  303,  303,
        0,    0,  500,    0,  305,  304,  304,  308,  304,  306,
        0,    0,  305,    0,  304,  305,  306,  306,  309,  308,
      306,  305,    0,  310,    0,    0,  306,    0,    0,    0,
        0,  309,  308,  311,    0,    0,  310,  312,  313,  309,
      308,    0,  309,  308,  310,    0,  311,  310,  309,  308,

      312,  313,  315,  310,  311,    0,    0,  311,  312,  313,
        0,  312,  313,  311,  316,  315,  317,  312,  313,  313,
        0,    0,    0,  315,    0,    0,  315,  316,  318,  317,
      320,  316,  315,    0,    0,  316,    0,  317,  316,    0,
      317,  318,  319,  320,  316,  318,  317,    0,    0,  318,
        0,  320,  318,    0,  320,  319,  321,  322,  318,    0,
      320,    0,    0,  319,  319,    0,  319,    0,    0,  321,
      322,  323,  319,    0,    0,  324,  325,  321,  322,    0,
      321,  322,  322,    0,  323,  321,  321,  322,  324,  325,
      326,  327,  323,    0,    0,  323,  324,  325,    0,  324,

      325,  323,    0,  326,  327,  324,  325,    0,    0,  328,
      329,  326,  327,    0,  326,  327,    0,    0,    0,    0,
      326,  327,  328,  329,  326,  330,    0,    0,    0,    0,
      328,  329,  331,  328,  329,    0,  504,  332,  330,  328,
      329,  504,  330,    0,  504,  331,  330,  333,    0,  330,
      332,  504,    0,  331,  504,  330,  331,  334,  332,  332,
      333,  332,  331,    0,    0,  333,    0,  332,  333,    0,
      334,  333,  339,  334,    0,  335,  335,  333,  334,    0,
        0,  334,  335,    0,  340,  339,  341,  334,    0,    0,
        0,    0,    0,  339,    0,  335,  339,  340,  342,  341,

      343,    0,  339,  335,  339,  340,  335,  341,  340,    0,
      341,  342,  335,  343,  340,  341,  341,    0,  347,  342,
      342,  343,  342,    0,  343,  348,    0,    0,  342,    0,
      343,  347,  349,    0,    0,    0,    0,  350,  348,  347,
        0,    0,  347,    0,    0,  349,  348,  347,  347,  348,
      350,  353,  351,  349,    0,  348,  349,    0,  350,    0,
        0,  350,  349,  353,  353,  351,  355,  350,  350,  351,
      356,  357,  353,  351,    0,  353,  351,    0,    0,  355,
        0,  353,  351,  356,  357,  358,    0,  355,    0,  359,
      355,  356,  357,    0,  356,  357,  355,    0,  358,  360,

      356,  357,  359,    0,  361,    0,  358,    0,    0,  358,
      359,  362,  360,  359,    0,  358,  358,  361,    0,  359,
      360,    0,    0,  360,  362,  361,  363,  364,  361,  360,
      360,    0,  362,    0,  361,  362,    0,    0,    0,  363,
      364,  362,  362,    0,    0,    0,  365,  363,  364,  366,
      363,  364,    0,    0,    0,    0,  363,  364,  364,  365,
      365,  366,  365,    0,    0,  367,    0,  365,    0,  372,
      365,  380,  372,  366,  366,  372,  365,  380,  367,    0,
        0,  377,  366,    0,  377,  366,  367,  377,  372,  367,
      380,  366,    0,    0,    0,  367,  372,  381,  380,  372,

      377,  380,  382,    0,    0,  372,    0,  380,  377,  383,
      381,  377,    0,    0,    0,  382,  384,  377,  381,    0,
        0,  381,  383,  382,    0,    0,  382,  381,  385,  384,
      383,    0,  382,  383,    0,  386,    0,  384,  382,  383,
      384,  385,  384,  384,    0,    0,  384,    0,  386,  385,
      387,  385,  385,    0,  388,    0,  386,    0,  385,  386,
      386,    0,  387,  387,    0,  386,  389,  388,  390,    0,
        0,  387,    0,  391,  387,  388,    0,    0,  388,  389,
      387,  390,    0,    0,  388,  388,  391,  389,  389,  390,
      389,    0,  390,  392,  391,  391,  389,  391,  390,    0,

      393,    0,    0,  391,  390,    0,  392,  394,    0,  391,
        0,    0,    0,  393,  392,    0,    0,  392,  392,  395,
      394,  393,    0,  392,  393,  393,  396,    0,  394,    0,
      393,  394,  395,  397,  395,  395,  508,  394,    0,  396,
      395,  508,  508,  395,  508,  398,  397,  396,    0,  395,
      396,  508,  399,    0,  397,    0,  396,  397,  398,  397,
        0,    0,  398,  397,  401,  399,  398,    0,  402,  398,
        0,    0,    0,  399,    0,  398,  399,  401,  403,    0,
      402,  402,  399,  404,    0,  401,    0,    0,  401,  402,
        0,  403,  402,  405,  401,  404,  404,  406,  402,  403,

        0,    0,  403,  403,  404,  405,  405,  404,  403,    0,
      406,    0,  407,  404,  405,    0,  408,  405,  406,    0,
        0,  406,    0,  405,  407,  407,  409,  406,  410,  408,
      501,  501,    0,  407,    0,  501,  407,  408,  501,  409,
      408,  410,  407,  408,  411,  501,  408,  409,  412,  410,
      409,  409,  410,    0,    0,    0,  409,  411,  410,  410,
      411,  412,  413,    0,    0,  411,  414,  415,  411,  412,
        0,    0,  412,    0,  411,  413,    0,  413,  412,  414,
      415,  417,    0,  413,  412,  416,  413,  414,  415,    0,
      414,  415,  413,  417,  417,  414,  414,  415,  416,  418,

      419,  416,  417,    0,    0,  417,  416,    0,    0,  416,
        0,  417,  418,  419,  418,  416,    0,  419,  420,  423,
      418,  419,    0,  418,  419,    0,    0,    0,    0,  418,
      419,  420,  423,  423,  424,  420,    0,    0,  426,  420,
      423,    0,  420,  423,    0,    0,    0,  424,  420,  423,
      427,  426,    0,  426,  428,  424,    0,    0,  424,  426,
      424,    0,  426,  427,  424,    0,  429,  428,  426,    0,
        0,  427,    0,  427,  427,  428,  430,    0,  428,  429,
      427,  431,    0,  429,  428,  428,  432,  429,    0,  430,
      429,    0,    0,    0,  431,    0,  429,  430,    0,  432,

      430,  433,  431,    0,    0,  431,  430,  432,    0,    0,
      432,  431,  431,  435,  433,  434,  432,  432,    0,    0,
        0,    0,  433,    0,    0,  433,  435,  434,  434,  436,
      435,  433,  433,    0,  435,    0,  434,  435,    0,  434,
        0,  437,  436,  435,    0,  434,    0,    0,  438,    0,
      436,    0,  436,  436,  437,    0,    0,    0,    0,  436,
      437,  438,  437,  438,  439,  437,    0,    0,  440,  438,
        0,  437,  438,    0,    0,    0,    0,  439,  438,    0,
      441,  440,    0,    0,  442,  439,    0,  439,  439,  440,
        0,    0,  440,  441,  439,  443,  442,  442,  440,    0,

      443,  441,  446,    0,  441,  442,    0,    0,  442,  444,
      441,    0,    0,  443,  442,  446,  444,    0,  447,    0,
      448,  443,    0,  446,  443,    0,  446,    0,    0,  444,
      443,  447,  446,  448,  449,    0,    0,  444,    0,  447,
      444,  448,  447,  447,  448,    0,  444,  449,  447,  453,
      448,  449,    0,  448,  454,  449,  458,    0,  449,    0,
        0,    0,  453,    0,  449,    0,  453,  454,  455,  458,
      453,  454,  460,  453,    0,  454,    0,  458,  454,  453,
      458,  455,  455,    0,  454,  460,  458,  461,  460,  455,
      458,    0,  455,  460,    0,    0,  460,  462,  455,    0,

      461,    0,  460,    0,  461,    0,    0,    0,  461,  463,
      462,  461,    0,  464,    0,    0,    0,  461,  462,    0,
      462,  462,  463,  465,    0,    0,  464,  462,  463,    0,
      463,    0,    0,  463,  464,  466,  465,  464,    0,  463,
        0,    0,  467,  464,  465,    0,  465,  465,  466,  468,
        0,    0,    0,  465,    0,  467,  466,  467,    0,  466,
        0,  469,  468,  467,    0,  466,  467,  466,  470,    0,
      468,    0,  467,  468,  469,    0,    0,    0,    0,  468,
      471,  470,  469,    0,  473,  469,  468,    0,  470,  470,
        0,  469,  470,  471,  474,    0,    0,  473,  470,    0,

        0,  471,  475,    0,  471,  473,  473,  474,  473,  475,
      471,  476,    0,    0,  473,  474,  476,    0,  474,    0,
      474,  477,  475,    0,  474,    0,    0,  478,  477,  476,
      475,    0,  478,  475,    0,  479,    0,  476,    0,  475,
      476,  477,  479,    0,  480,  478,  476,    0,    0,  477,
        0,    0,  477,  478,    0,  479,  478,  480,  477,    0,
      481,    0,  478,  479,    0,  480,  479,    0,  480,  493,
      482,  493,  479,  481,  480,  493,  493,    0,  481,  493,
      483,  481,  484,  482,  481,    0,  493,  482,    0,    0,
      481,  482,    0,  483,  482,  484,  485,    0,  486,    0,

      482,  483,    0,  484,  483,  483,  484,    0,  487,  485,
      483,  486,  484,    0,    0,    0,  485,  485,    0,  486,
      485,  487,  486,  488,  486,    0,  485,    0,  486,  487,
        0,    0,  487,  502,    0,  502,  488,  488,  487,  487,
      502,    0,  488,  502,  488,  488,    0,  488,    0,  505,
      502,    0,  488,  488,  505,  505,    0,  505,  505,  506,
      506,    0,  509,    0,  505,  506,  507,  509,  506,  507,
      509,  507,    0,    0,  507,  506,    0,  509,  512,  511,
      509,  507,  511,  512,  511,  512,  512,  511,    0,    0,
        0,  514,  513,  512,  511,  513,  514,  513,    0,  514,

      513,    0,  516,  515,  516,    0,  514,  513,  515,  516,
        0,  515,  516,    0,    0,  515,    0,    0,  515,  516,
      516,  517,  518,  518,  517,    0,  517,  518,    0,  517,
      518,  519,    0,  519,  520,    0,  517,  518,  519,  520,
        0,  519,  520,    0,  521,  521,  524,  525,  519,  520,
      521,  524,  525,  521,  524,  525,  520,    0,  524,  527,
      521,  524,  525,  525,  527,  528,    0,  527,    0,    0,
      528,  529,    0,  528,  527,    0,  529,  527,    0,  529,
      528,  531,  530,  531,    0,    0,  529,  530,  531,    0,
      530,  531,    0,    0,  532,  538,    0,  530,  531,  532,

      538,  532,  532,  538,  530,  533,  533,    0,  534,  532,
      538,  533,  538,  534,  533,  534,  534,  535,    0,  537,
        0,  533,  535,  534,  537,  535,  535,  537,  536,    0,
      537,  536,  535,  536,  537,    0,  536,  539,    0,  540,
      539,  541,  539,  536,  540,  539,  541,  540,    0,  541,
      541,  540,  539,  542,  540,  543,  541,  544,  542,    0,
      543,  542,  544,  543,    0,  544,  546,    0,  542,    0,
      543,  546,  544,    0,  546,  546,    0,  547,    0,    0,
        0,  546,  547,  548,    0,  547,  548,  549,  548,  549,
        0,  548,  547,    0,  549,  553,    0,  549,  548,    0,

      553,  554,    0,  553,  549,    0,  554,  555,    0,  554,
      553,    0,  555,  558,    0,  555,  554,    0,  558,  555,
      558,  558,  555,    0,  560,  561,    0,    0,  558,  560,
      561,    0,  560,  561,  561,    0,    0,  563,  562,  560,
      561,  562,  563,  562,    0,  563,  562,    0,  563,    0,
      565,  564,  563,  562,  564,  565,  564,    0,  565,  564,
        0,    0,  566,  565,  567,  565,  564,  566,    0,  567,
      566,    0,  567,  568,    0,  569,  567,  566,  568,  567,
      569,  568,    0,  569,    0,    0,  571,    0,  568,  571,
      569,  571,  569,    0,  571,  572,    0,  572,    0,  573,

      572,  571,    0,  572,  573,    0,    0,  573,  574,    0,
      572,    0,  575,  574,  573,    0,  574,  575,    0,    0,
      575,  576,    0,  574,    0,    0,  576,  575,  577,  576,
      577,    0,  578,    0,  579,  577,  576,  578,  577,  579,
      578,  579,  579,  580,    0,  577,    0,  578,  580,  579,
        0,  580,  581,    0,  580,    0,    0,  581,  580,    0,
      581,  581,    0,  582,  583,  583,    0,  581,  582,    0,
      583,  582,    0,  583,  584,  584,  585,    0,  582,  584,
      583,  585,  584,  585,  585,  586,    0,  587,    0,  584,
      586,  585,  587,  586,  586,  587,  588,    0,    0,  588,

      586,  588,  587,    0,  588,  589,    0,  590,  589,  590,
      589,  588,    0,  589,  590,    0,    0,  590,  591,    0,
      589,    0,  592,  591,  590,    0,  591,  592,    0,    0,
      592,  593,    0,  591,    0,  594,  593,  592,  593,  593,
      594,    0,  594,  594,  595,    0,  593,    0,  596,  595,
      594,  595,  595,  596,    0,    0,  596,    0,    0,  595,
        0,  597,  598,  596,    0,  596,  597,  598,  597,  597,
      598,    0,    0,  598,  599,  600,  597,  598,    0,  599,
      600,    0,  599,  600,    0,    0,  601,  602,  601,  599,
      600,  601,  602,  599,  601,  602,    0,    0,  603,    0,

        0,  601,  602,  603,  602,  603,  603,  605,    0,    0,
      606,  606,  605,  603,    0,  605,  606,  605,    0,  606,
      607,    0,  605,    0,    0,  607,  606,    0,  607,  608,
        0,    0,  607,    0,  608,  607,    0,  608,    0,    0,
      609,  610,  610,    0,  608,  609,  608,  610,  609,    0,
      610,  609,    0,  611,    0,  609,    0,  610,  611,  612,
        0,  611,  611,    0,  612,    0,    0,  612,  611,    0,
      613,    0,  615,  613,  612,  613,  614,  615,  613,  614,
      615,  614,    0,    0,  614,  613,    0,  615,  615,  616,
      617,  614,    0,    0,  616,  617,  616,  616,  617,    0,

        0,  618,    0,    0,  616,  617,  618,  617,    0,  618,
      619,    0,  619,  618,  620,  619,  618,  620,  619,  620,
        0,    0,  620,  621,    0,  619,  622,  622,  621,  620,
        0,  621,  622,    0,  621,  622,  623,    0,  621,    0,
      624,  623,  622,  623,  623,  624,    0,    0,  624,  625,
        0,  623,    0,    0,  625,  624,    0,  625,    0,    0,
      626,  625,  627,  626,  625,  626,    0,  627,  626,    0,
      627,  628,    0,  628,    0,  626,  628,  627,    0,  628,
      631,    0,  632,    0,    0,  631,  628,  632,  631,    0,
      632,    0,  631,  634,    0,  631,    0,  632,  634,  632,

        0,  634,  635,    0,  636,    0,    0,  635,  634,  636,
      635,  636,  636,  637,    0,  638,    0,  635,  637,  636,
      638,  637,    0,  638,  639,  637,    0,    0,  637,  639,
      638,    0,  639,  640,  639,  641,  640,  642,  640,  639,
      641,  640,  642,  641,    0,  642,  643,    0,  640,  643,
      641,  643,  642,    0,  643,  644,    0,  645,    0,  645,
      644,  643,  645,  644,    0,  645,  646,    0,    0,  646,
      644,  646,  645,    0,  646,    0,    0,  647,    0,  649,
        0,  646,  647,  647,  649,  647,    0,  649,  650,    0,
      651,    0,  647,  650,  649,  651,  650,  650,  651,  652,

        0,    0,    0,  650,  652,  651,  652,  652,  656,    0,
      657,    0,    0,  656,  652,  657,  656,    0,  657,  660,
        0,  660,  657,  656,  660,  657,    0,  660,  662,    0,
      663,  662,    0,  662,  660,  663,  662,    0,  663,  665,
      664,  664,    0,  662,  665,  663,  664,  665,    0,  664,
      666,    0,  667,    0,  665,  666,  664,  667,  666,    0,
      667,    0,    0,  667,    0,  666,    0,  667,  668,  668,
      670,    0,    0,    0,  668,  670,    0,  668,  670,    0,
        0,    0,    0,  671,  668,  670,  671,    0,  671,  672,
        0,  671,  670,    0,  672,    0,    0,  672,  671,  672,

      673,  677,  674,    0,  672,  673,  675,  674,  673,  673,
      674,  675,    0,    0,  675,  673,    0,  674,    0,  674,
        0,  675,  677,  676,  676,    0,  678,  677,  675,  676,
      677,  678,  676,    0,  678,  679,  679,  677,    0,  676,
      679,  678,    0,  679,  680,    0,  681,    0,  682,  680,
      679,  681,  680,  682,  681,    0,  682,    0,    0,  680,
        0,  681,  683,  682,  683,    0,  684,  683,  681,  684,
      683,  684,    0,    0,  684,  685,    0,  683,  685,  686,
      685,  684,  686,  685,  686,    0,    0,  686,  687,    0,
      685,    0,    0,  687,  686,    0,  687,  688,    0,    0,

        0,    0,  688,  687,    0,  688,  689,  687,    0,    0,
        0,  689,  688,    0,  689,  689,  688,  690,  691,  691,
        0,  689,  690,    0,  691,  690,    0,  691,    0,    0,
        0,    0,  690,  692,  691,  690,    0,  692,  692,  693,
        0,  692,    0,    0,  693,    0,  693,  693,  692,    0,
      694,    0,    0,  694,  693,  694,  695,    0,  694,  695,
        0,  695,  696,    0,  695,  694,    0,  696,    0,    0,
      696,  695,    0,  697,  696,  697,    0,  696,  697,  698,
        0,  697,    0,    0,  698,  699,    0,  698,  697,    0,
      699,    0,    0,  699,  698,    0,  699,  700,  700,    0,

      699,    0,  701,  700,    0,    0,  700,  701,    0,  701,
      701,  703,    0,  700,  702,  702,  703,  701,    0,  703,
      702,    0,  703,  702,  704,    0,  703,    0,  705,  704,
      702,    0,  704,  705,    0,    0,  705,  706,    0,  704,
        0,    0,  706,  705,    0,  706,  707,    0,  707,    0,
      705,  707,  706,    0,  707,  708,    0,  709,  708,  710,
      708,  707,  709,  708,  710,  709,    0,  710,  711,  709,
      708,    0,  709,  711,  710,  712,  711,  712,    0,  711,
        0,  713,  712,  711,    0,  712,  713,    0,    0,  713,
      714,    0,  712,    0,  714,  714,  713,    0,  714,  715,

        0,  716,    0,  713,  715,  714,  716,  715,    0,  716,
      717,    0,    0,    0,  715,  717,  716,  715,  717,  718,
        0,  717,    0,  719,  718,  717,  719,  718,  719,    0,
      718,  719,  721,    0,  718,  722,  722,  721,  719,    0,
      721,  722,    0,    0,  722,  723,    0,  721,  723,  721,
      723,  722,    0,  723,  724,    0,  724,    0,    0,  724,
      723,    0,  724,  725,  726,  726,    0,  730,  725,  724,
      726,  725,  730,  726,  725,  730,  727,  727,  725,    0,
      726,  727,  730,    0,  727,  728,    0,  728,    0,  729,
      728,  727,  729,  728,  729,    0,    0,  729,  731,    0,

      728,    0,  733,  731,  729,  733,  731,  733,    0,    0,
      733,    0,    0,  731,  734,  736,  734,  733,    0,  734,
      736,    0,  734,  736,    0,    0,  739,    0,    0,  734,
      736,  739,  736,    0,  739,    0,    0,  741,  741,  742,
        0,  739,  741,  739,  742,  741,    0,  742,    0,    0,
      743,    0,  741,  743,  742,  743,  742,    0,  743,  744,
        0,    0,    0,    0,  744,  743,    0,  744,    0,    0,
        0,    0,    0,    0,  744,  746,  746,  746,  746,  746,
      746,  746,  746,    0,  747,  748,  750,    0,    0,  747,
      748,  750,  747,  748,  750,    0,    0,  748,  746,  747,

      748,  750,  749,  746,  751,  749,  746,  749,    0,  751,
      749,    0,  751,  746,  753,  752,  753,  749,    0,  751,
      752,  753,    0,  752,  753,  752,    0,  754,  755,  755,
      752,  753,  754,    0,  755,  754,    0,  755,  756,  757,
      756,  757,  754,  754,  755,  756,  757,    0,  756,  757,
      758,  759,  758,  759,  760,  756,  757,  758,  759,  760,
      758,  759,  760,    0,    0,  760,  761,  758,  759,  760,
      762,  761,  763,    0,  761,  762,    0,  763,  762,    0,
      763,  761,    0,    0,    0,  762,  764,  763,  761,    0,
      765,  764,  762,  765,  764,  765,    0,    0,  765,  766,

        0,  764,    0,    0,  766,  765,    0,  766,  767,    0,
      768,    0,    0,  767,  766,  768,  767,  768,  768,  767,
        0,  769,  769,  767,    0,  768,  769,  770,    0,  769,
        0,    0,  770,  771,    0,  770,  769,    0,  771,  772,
        0,  771,  770,    0,  772,  773,  773,  772,  771,    0,
      773,    0,    0,  773,  772,    0,  774,  775,  774,  775,
      773,  774,  775,    0,  774,  775,    0,    0,  776,  777,
        0,  774,  775,  776,  777,    0,  776,  777,    0,  779,
      776,  779,    0,  776,  777,  778,  779,  778,    0,  779,
      778,    0,  780,  778,  780,    0,  779,    0,    0,  780,

      778,  781,  780,  781,    0,  782,    0,  782,  781,  780,
        0,  781,  782,    0,    0,  782,  783,    0,  781,    0,
        0,  783,  782,    0,  783,  784,    0,  785,    0,  785,
      784,  783,    0,  784,  785,    0,  784,  785,  786,    0,
      784,    0,  787,  786,  785,  786,  786,  787,    0,    0,
      787,  788,    0,  786,    0,  789,  788,  787,  788,  788,
      789,    0,    0,  789,    0,    0,  788,    0,  790,    0,
      789,    0,  789,  790,    0,    0,  790,  791,    0,  790,
        0,  791,  791,  790,    0,  791,  792,  792,  793,    0,
      794,  792,  791,  793,  792,  794,  793,    0,  794,  795,

        0,  792,    0,  793,  795,  794,    0,  795,  796,    0,
      797,    0,    0,  796,  795,  797,  796,  798,  797,  798,
        0,  799,    0,  796,  798,  797,  799,  798,    0,  799,
      800,    0,    0,    0,  798,  800,  799,    0,  800,    0,
        0,  801,    0,  802,    0,  800,  801,  800,  802,  801,
        0,  802,  804,    0,  805,    0,  801,  804,  802,  805,
      804,    0,  805,  807,    0,    0,    0,  804,  807,  805,
        0,  807,    0,    0,  809,    0,  811,    0,  807,  809,
      809,  811,  809,    0,  811,    0,    0,  812,    0,  809,
        0,  811,  812,  811,    0,  812,  813,    0,  815,    0,

        0,  813,  812,  815,  813,  812,  815,  816,    0,  817,
        0,  813,  816,  815,  817,  816,    0,  817,  818,    0,
      819,    0,  816,  818,  817,  819,  818,    0,  819,  820,
        0,  821,    0,  818,  820,  819,  821,  820,    0,  821,
      822,    0,    0,    0,  820,  822,  821,    0,  822,  823,
        0,  823,    0,  824,  823,  822,    0,  823,  824,    0,
        0,  824,  825,    0,  823,    0,  826,  825,  824,  826,
      825,  826,    0,    0,  826,  827,    0,  825,  825,  828,
      827,  826,    0,  827,  828,    0,    0,  828,    0,    0,
      827,    0,  829,  830,  828,    0,  828,  829,  830,    0,

      829,  830,    0,    0,  831,  832,    0,  829,  830,  831,
      832,  831,  831,  832,    0,  833,  833,  834,  835,  831,
      832,  833,  834,  835,  833,  834,  835,    0,    0,  836,
        0,  833,  834,  835,  836,  837,    0,  836,  837,    0,
      837,  838,    0,  837,  836,    0,  838,  839,    0,  838,
      837,    0,  839,    0,    0,  839,  838,    0,  840,  841,
      842,  840,  839,  840,  841,  842,  840,  841,  842,    0,
        0,    0,  843,  840,  841,  842,  842,  843,  844,    0,
      843,    0,    0,  844,  843,    0,  844,  843,    0,  845,
      844,  846,    0,  844,  845,    0,  846,  845,    0,  846,

      847,    0,  846,    0,  845,  847,  846,    0,  847,  847,
        0,  848,  849,  850,    0,  847,  848,  849,  850,  848,
      849,  850,    0,  848,  851,  852,  848,  849,  850,  851,
      852,  851,  851,  852,  853,    0,  853,  854,  855,  851,
      852,  853,  854,  855,  853,  854,  855,  855,    0,    0,
      857,  853,  854,  855,  856,  857,  856,    0,  857,  856,
        0,    0,  856,    0,    0,  857,  858,  859,  859,  856,
      860,  858,  858,  859,  858,  860,  859,  860,  860,  861,
        0,  858,    0,  859,  861,  860,    0,  861,  862,    0,
      863,    0,    0,  862,  861,  863,  862,    0,  863,    0,

        0,  864,    0,  862,    0,  863,  864,  863,    0,  864,
        0,    0,  865,  864,  866,  865,  864,  865,  864,  866,
      865,    0,  866,  869,    0,  870,    0,  865,  869,  866,
      870,  869,    0,  870,  871,    0,    0,    0,  869,  871,
      870,    0,  871,  873,    0,  874,  873,    0,  873,  871,
      874,  873,    0,  874,  875,    0,  876,    0,  873,  875,
      874,  876,  875,  876,  876,  875,    0,  877,    0,  875,
      877,  876,  877,  878,    0,  877,  878,    0,  878,  879,
        0,  878,  877,    0,  879,    0,    0,  879,  878,    0,
        0,  881,  880,    0,  879,  880,  881,  880,  879,  881,

      880,    0,    0,  882,  883,  884,  881,  880,  882,  883,
      884,  882,  883,  884,    0,    0,  885,    0,  882,  883,
      884,  885,    0,    0,  885,  886,    0,  886,    0,    0,
      886,  885,    0,  886,  887,    0,    0,    0,  887,  887,
      886,  888,  887,  888,    0,    0,    0,  889,  888,  887,
      889,  888,  889,    0,    0,  889,  890,    0,  888,    0,
      890,  890,  889,    0,  890,  891,    0,    0,  891,  892,
      891,  890,  892,  891,  892,    0,    0,  892,  893,    0,
      891,    0,    0,  893,  892,    0,  893,  894,    0,    0,
      894,  895,  894,  893,    0,  894,  895,  893,    0,  895,

      896,    0,  894,  896,    0,  896,  895,  897,  896,  897,
        0,  898,    0,  899,  897,  896,  898,  897,  899,  898,
        0,  899,  900,    0,  897,    0,  898,  900,  899,    0,
      900,    0,    0,  901,    0,  902,    0,  900,  901,  900,
      902,  901,    0,  902,  903,    0,  904,    0,  901,  903,
      902,  904,  903,    0,  904,  905,    0,  902,    0,  903,
      905,  904,    0,  905,  906,    0,  904,    0,  908,  906,
      905,  908,  906,  908,    0,    0,  908,  905,    0,  906,
      909,  910,  910,  908,  911,  909,  912,  910,  909,  911,
      910,  912,  911,    0,  912,  909,  911,  910,  913,  911,

        0,  912,  914,  913,  915,    0,  913,  914,  912,  915,
      914,    0,  915,  913,    0,    0,  916,  914,    0,  915,
      913,  916,    0,    0,  916,  916,  915,  917,    0,  918,
      917,  916,  917,  918,  918,  917,    0,  918,  919,  919,
      919,    0,  917,  919,  918,    0,  919,  920,    0,    0,
        0,    0,  920,  919,    0,  920,  921,    0,  922,    0,
      921,  921,  920,  922,  921,    0,  922,  923,    0,  924,
        0,  921,  923,  922,  924,  923,    0,  924,  925,    0,
      922,    0,  923,  925,  924,    0,  925,  926,    0,  923,
        0,    0,  926,  925,    0,  926,  926,    0,  927,    0,

      925,    0,  926,  927,  928,    0,  927,  928,    0,  928,
      929,    0,  928,  927,    0,  929,  930,  930,  929,  928,
        0,  930,  931,    0,  930,  929,    0,  931,  932,  929,
      931,  930,    0,  932,  933,    0,  932,  931,    0,  933,
      931,    0,  933,  932,    0,  934,  935,  933,    0,  933,
      934,  935,    0,  934,  935,    0,  934,  936,  937,  935,
      934,  935,  936,  937,    0,  936,  937,    0,    0,  938,
      939,  940,  936,  937,  938,  939,  940,  938,  939,  940,
      938,    0,  941,    0,  938,  939,  940,  941,  942,    0,
      941,  942,  943,  942,  943,    0,  942,  941,    0,  943,

      944,    0,  943,  942,    0,  944,  945,    0,  944,  943,
        0,  945,    0,    0,  945,  944,    0,  946,  947,  945,
      946,  945,  946,  947,    0,  946,  947,    0,    0,  948,
      949,  950,  946,  947,  948,  949,  950,  948,  949,  950,
        0,    0,  951,  952,  948,  949,  950,  951,  952,    0,
      951,  952,    0,    0,  953,    0,    0,  951,  952,  953,
        0,    0,  953,  954,    0,  952,  954,  955,  954,  953,
        0,  954,  955,    0,    0,  955,  953,    0,  954,  955,
      956,  957,  955,    0,    0,  956,  957,    0,  956,  957,
        0,    0,    0,    0,  958,  956,  957,  958,  957,  958,

      959,    0,  958,  959,    0,  959,    0,    0,  959,  958,
        0,  960,    0,  961,    0,  959,  960,  962,  961,  960,
      960,  961,  962,    0,    0,  962,  960,    0,  961,  963,
      963,  964,  962,  965,  963,    0,  964,  963,  965,  964,
      966,  965,  966,    0,  963,    0,  964,  966,  965,  964,
      966,  967,  965,  967,  968,  968,    0,  966,  967,    0,
        0,  967,    0,  969,  969,  970,    0,    0,  967,    0,
      970,    0,    0,  970,  970,    0,    0,  968,    0,    0,
      970,    0,  968,    0,    0,  968,  969,    0,  971,    0,
      971,  969,  968,  971,  969,    0,  971,  972,    0,  973,

      972,  969,  972,  971,  973,  972,  973,  973,  974,    0,
      975,    0,  972,  974,  973,  975,  974,    0,  975,  976,
        0,    0,  976,  974,  976,  975,    0,  976,    0,    0,
      977,    0,  978,    0,  976,  977,  977,  978,  977,    0,
      978,  979,    0,    0,    0,  977,  979,  978,  979,  979,
      980,    0,  981,    0,    0,  980,  979,  981,  980,  982,
      981,  982,    0,    0,    0,  980,  982,  981,  983,  982,
      983,    0,  984,    0,  985,  983,  982,  984,  983,  985,
      984,    0,  985,  986,    0,  983,    0,  984,  986,  985,
        0,  986,  987,    0,  988,  987,  989,  987,  986,  988,

      987,  989,  988,    0,  989,  990,    0,  987,  989,  988,
      990,  989,    0,  990,  991,    0,    0,    0,  992,  991,
      990,  992,  991,  992,    0,    0,  992,  993,  993,  991,
        0,  994,  993,  992,  994,  993,  994,    0,    0,  994,
      995,    0,  993,  995,  996,  995,  994,    0,  995,  996,
        0,  996,  996,  997,    0,  995,    0,  998,  997,  996,
      997,  997,  998,    0,    0,  998,  999,    0,  997,    0,
        0,  999,  998,    0,  999, 1000, 1000,  999,    0, 1001,
     1000,  999, 1001, 1000, 1001,    0,    0, 1001, 1002,    0,
     1000,    0, 1003, 1002, 1001,    0, 1002, 1003,    0,    0,

     1003, 1004,    0, 1002,    0,    0, 1004, 1003,    0, 1004,
     1002,    0,    0, 1005, 1003,    0, 1004,    0, 1005, 1006,
     1004, 1005, 1009, 1009, 1006, 1007,    0, 1006, 1005,    0,
     1007, 1008, 1005, 1007, 1006,    0, 1008,    0,    0, 1008,
     1007, 1010, 1010, 1011, 1012, 1009, 1008,    0, 1011, 1012,
     1009, 1011, 1012, 1009,    0,    0,    0,    0, 1011, 1012,
     1009,    0, 1013, 1014, 1010,    0,    0, 1013, 1014, 1010,
     1013, 1014, 1010,    0,    0, 1015, 1016, 1013, 1014, 1010,
     1015, 1016,    0, 1015, 1016,    0,    0, 1017,    0,    0,
     1015, 1016, 1017,    0,    0, 1017,    0,    0,    0,    0,

        0,    0, 1017, 1020, 1020, 1021, 1021, 1022, 1022, 1022,
     1022, 1023, 1023, 1023, 1023, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018
    } ;

static yyconst flex_int16_t yy_rule_linenum[230] =
    {   0,
       44,   45,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,  100,  101,  102,  103,  104,  106,  108,
      109,  110,  112,  113,  114,  116,  117,  118,  119,  121,
      122,  123,  124,  125,  126,  128,  129,  130,  131,  132,
      133,  134,  135,  137,  138,  139,  140,  141,  142,  143,
      144,  145,  146,  147,  148,  149,  150,  151,  152,  153,

      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
      175,  176,  177,  178,  179,  180,  181,  182,  183,  185,
      186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  227,
      228,  229,  230,  231,  233,  234,  235,  236,  237,  239,
      240,  241,  243,  245,  246,  247,  248,  249,  250,  251,
      253,  255,  256,  257,  258,  259,  260,  261,  264,  265,

      266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
      276,  278,  279,  280,  281,  282,  283,  284,  285,  286,
      287,  288,  291,  292,  293,  295,  296,  297,  298
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/bif.l"
/******************************************************************************
* Copyright 2015-2020 Xilinx, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the BIF file */
/* Run the bif.y file first through bison to generate the bif.tab.h file, which is included herein */
/* Then run this file through flex to generate the bif.yy.c source code */
#line 22 "../s/bif.l"
 #include <stdio.h>
 #include "bifscanner.h"
 #include "bif.tab.hpp"
 #include "authentication.h"
 #include "encryption.h"
 typedef BIF::BisonParser::token tok;
/* see http://www.lysator.liu.se/c/ANSI-C-grammar-l.html */
#line 35 "../s/bif.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 2399 "../bisonflex/bif.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 38 "../s/bif.l"



   yylloc->step ();


#line 2563 "../bisonflex/bif.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1019 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1018 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 230 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 230 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 231 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "../s/bif.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 45 "../s/bif.l"
yylloc->lines (1); yylloc->step ();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "../s/bif.l"
return tok::BOOTLOADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "../s/bif.l"
return tok::PRESIGN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "../s/bif.l"
return tok::UDF_DATA;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "../s/bif.l"
return tok::XIP_MODE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "../s/bif.l"
return tok::BOOT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "../s/bif.l"
return tok::USER;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "../s/bif.l"
return tok::STATIC;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "../s/bif.l"
return tok::NOAUTOSTART;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "../s/bif.l"
return tok::MULTIBOOT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "../s/bif.l"
return tok::PROTECTED;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "../s/bif.l"
return tok::ALIGNMENT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "../s/bif.l"
return tok::EARLY_HANDOFF;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "../s/bif.l"
return tok::DELAY_HANDOFF;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "../s/bif.l"
return tok::DELAY_LOAD;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "../s/bif.l"
return tok::HIVEC;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "../s/bif.l"
return tok::BLOCKS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "../s/bif.l"
return tok::AUTHBLOCKS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "../s/bif.l"
return tok::BIGENDIAN;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "../s/bif.l"
return tok::A32_MODE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "../s/bif.l"
return tok::PARTITION;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "../s/bif.l"
return tok::IMAGE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "../s/bif.l"
return tok::METAHEADER;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "../s/bif.l"
yylval->number = tok::OFFSET;                   return tok::OFFSET;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "../s/bif.l"
yylval->number = tok::RESERVE;                  return tok::RESERVE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "../s/bif.l"
yylval->number = tok::LOAD;                     return tok::LOAD;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "../s/bif.l"
yylval->number = tok::COPY;                     return tok::COPY;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "../s/bif.l"
yylval->number = tok::STARTUP;                  return tok::STARTUP;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "../s/bif.l"
yylval->number = tok::PARTITION_NUM;            return tok::PARTITION_NUM;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "../s/bif.l"
yylval->number = tok::INIT;                     return tok::INIT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "../s/bif.l"
yylval->number = tok::UDF_BH;                   return tok::UDF_BH;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "../s/bif.l"
yylval->number = tok::AES_KEY_FILE;             return tok::AES_KEY_FILE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "../s/bif.l"
yylval->number = tok::PPK_FILE;                 return tok::PPK_FILE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "../s/bif.l"
yylval->number = tok::PSK_FILE;                 return tok::PSK_FILE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "../s/bif.l"
yylval->number = tok::SPK_FILE;                 return tok::SPK_FILE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "../s/bif.l"
yylval->number = tok::SSK_FILE;                 return tok::SSK_FILE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "../s/bif.l"
yylval->number = tok::SPK_SIGNATURE_FILE;       return tok::SPK_SIGNATURE_FILE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "../s/bif.l"
yylval->number = tok::BH_SIGNATURE_FILE;        return tok::BH_SIGNATURE_FILE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "../s/bif.l"
yylval->number = tok::HEADER_SIGNATURE_FILE;    return tok::HEADER_SIGNATURE_FILE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "../s/bif.l"
yylval->number = tok::BOOTVECTORS;              return tok::BOOTVECTORS;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "../s/bif.l"
yylval->number = tok::BOOTIMAGE;                return tok::BOOTIMAGE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "../s/bif.l"
yylval->number = tok::PARENT_ID;                return tok::PARENT_ID; 
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "../s/bif.l"
yylval->number = tok::ID_CODE;                  return tok::ID_CODE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "../s/bif.l"
yylval->number = tok::EXT_ID_CODE;              return tok::EXT_ID_CODE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "../s/bif.l"
yylval->number = tok::ID;                       return tok::ID; 
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "../s/bif.l"
yylval->number = tok::NAME;                     return tok::NAME; 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "../s/bif.l"
yylval->number = tok::PFILE;                    return tok::PFILE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "../s/bif.l"
yylval->number = tok::BH_KEY_FILE;              return tok::BH_KEY_FILE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "../s/bif.l"
yylval->number = tok::PUF_HELPER_FILE;          return tok::PUF_HELPER_FILE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "../s/bif.l"
yylval->number = tok::PMUFW_IMAGE;              return tok::PMUFW_IMAGE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "../s/bif.l"
yylval->number = tok::PMCDATA;                  return tok::PMCDATA;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 98 "../s/bif.l"
yylval->number = tok::BH_KEY_IV;                return tok::BH_KEY_IV;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "../s/bif.l"
yylval->number = tok::BBRAM_KEK_IV;             return tok::BBRAM_KEK_IV;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 101 "../s/bif.l"
yylval->number = tok::BH_KEK_IV;                return tok::BH_KEK_IV;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 102 "../s/bif.l"
yylval->number = tok::EFUSE_KEK_IV;             return tok::EFUSE_KEK_IV;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 103 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK0_IV;       return tok::EFUSE_USER_KEK0_IV;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 104 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK1_IV;       return tok::EFUSE_USER_KEK1_IV;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 106 "../s/bif.l"
yylval->number = tok::FAMILY_KEY;               return tok::FAMILY_KEY;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 108 "../s/bif.l"
return tok::ENCRYPTION;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 109 "../s/bif.l"
yylval->number = 0;                             return tok::NONE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 110 "../s/bif.l"
yylval->number = Encryption::AES;               return tok::ENCRVALUE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 112 "../s/bif.l"
return tok::AUTHENTICATION;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 113 "../s/bif.l"
yylval->number = Authentication::RSA;           return tok::AUTHVALUE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 114 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 116 "../s/bif.l"
return tok::CHECKSUM;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 117 "../s/bif.l"
yylval->number = Checksum::MD5;                 return tok::CHECKSUMVALUE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 118 "../s/bif.l"
yylval->number = Checksum::SHA2;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 119 "../s/bif.l"
yylval->number = Checksum::SHA3;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 121 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 122 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 123 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 124 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 125 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 126 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 128 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 129 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 130 "../s/bif.l"
yylval->number = PartitionType::CONFIG_DATA_OBJ;return tok::PTYPEVALUE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 131 "../s/bif.l"
yylval->number = PartitionType::RAW;            return tok::PTYPEVALUE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 132 "../s/bif.l"
yylval->number = PartitionType::CFI;            return tok::PTYPEVALUE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 133 "../s/bif.l"
yylval->number = PartitionType::CFI_GSC;        return tok::PTYPEVALUE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 134 "../s/bif.l"
yylval->number = PartitionType::SLR_BOOT;       return tok::PTYPEVALUE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 135 "../s/bif.l"
yylval->number = PartitionType::SLR_CONFIG;     return tok::PTYPEVALUE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 142 "../s/bif.l"
yylval->number = KeySource::EfuseBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 143 "../s/bif.l"
yylval->number = KeySource::EfuseGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "../s/bif.l"
yylval->number = KeySource::BbramBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "../s/bif.l"
yylval->number = KeySource::BbramGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "../s/bif.l"
yylval->number = KeySource::BhGryKey;           return tok::KEY_SRC;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "../s/bif.l"
yylval->number = KeySource::BhBlkKey;           return tok::KEY_SRC;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 149 "../s/bif.l"
yylval->number = KeySource::UserKey0;           return tok::KEY_SRC;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "../s/bif.l"
yylval->number = KeySource::UserKey1;           return tok::KEY_SRC;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "../s/bif.l"
yylval->number = KeySource::UserKey2;           return tok::KEY_SRC;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 152 "../s/bif.l"
yylval->number = KeySource::UserKey3;           return tok::KEY_SRC;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 153 "../s/bif.l"
yylval->number = KeySource::UserKey4;           return tok::KEY_SRC;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 154 "../s/bif.l"
yylval->number = KeySource::UserKey5;           return tok::KEY_SRC;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 155 "../s/bif.l"
yylval->number = KeySource::UserKey6;           return tok::KEY_SRC;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 156 "../s/bif.l"
yylval->number = KeySource::UserKey7;           return tok::KEY_SRC;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 157 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey0;      return tok::KEY_SRC;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 158 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey0;   return tok::KEY_SRC;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 159 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey0;   return tok::KEY_SRC;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 160 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey1;      return tok::KEY_SRC;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 161 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey1;   return tok::KEY_SRC;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 162 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey1;   return tok::KEY_SRC;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 163 "../s/bif.l"
yylval->number = KeySource::BhKupKey;           return tok::KEY_SRC;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "../s/bif.l"
yylval->number = Core::R5Single;                return tok::CORE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "../s/bif.l"
yylval->number = Core::R5Dual;                  return tok::CORE;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "../s/bif.l"
yylval->number = BhRsa::BhRsaEnable;            return tok::BH_RSA;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "../s/bif.l"
yylval->number = AuthHash::Sha2;                return tok::AUTH_HASH;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "../s/bif.l"
yylval->number = PufHdLoc::PUFinBH;             return tok::PUFHD_LOC;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "../s/bif.l"
yylval->number = AuthOnly::Enabled;             return tok::AUTH_ONLY;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "../s/bif.l"
yylval->number = OptKey::OptKeyinSecHdr;        return tok::OPT_KEY;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "../s/bif.l"
yylval->number = PufMode::PUF4K;                return tok::PUF4KMODE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "../s/bif.l"
yylval->number = tok::SHUTTER;                  return tok::SHUTTER;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "../s/bif.l"
yylval->number = DpaCM::DpaCMEnable;            return tok::DPA_CM;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "../s/bif.l"
yylval->number = tok::SMAP_WIDTH;               return tok::SMAP_WIDTH;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "../s/bif.l"
yylval->number = tok::BYPASS_IDCODE_CHECK;      return tok::BYPASS_IDCODE_CHECK;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 185 "../s/bif.l"
return tok::BOOT_DEVICE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 186 "../s/bif.l"
yylval->number = tok::ADDRESS;                  return tok::ADDRESS;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 187 "../s/bif.l"
yylval->number = BootDevice::QSPI32;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 188 "../s/bif.l"
yylval->number = BootDevice::QSPI24;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 189 "../s/bif.l"
yylval->number = BootDevice::NAND;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 190 "../s/bif.l"
yylval->number = BootDevice::SD0;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 191 "../s/bif.l"
yylval->number = BootDevice::SD1;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 192 "../s/bif.l"
yylval->number = BootDevice::SDLS;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 193 "../s/bif.l"
yylval->number = BootDevice::MMC;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 194 "../s/bif.l"
yylval->number = BootDevice::USB;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 195 "../s/bif.l"
yylval->number = BootDevice::ETHERNET;          return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 196 "../s/bif.l"
yylval->number = BootDevice::PCIE;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 197 "../s/bif.l"
yylval->number = BootDevice::SATA;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 198 "../s/bif.l"
yylval->number = BootDevice::OSPI;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 199 "../s/bif.l"
yylval->number = BootDevice::SMAP;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 200 "../s/bif.l"
yylval->number = BootDevice::SBI;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 201 "../s/bif.l"
yylval->number = BootDevice::SD0RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 202 "../s/bif.l"
yylval->number = BootDevice::SD1RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 203 "../s/bif.l"
yylval->number = BootDevice::SDLSRAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 204 "../s/bif.l"
yylval->number = BootDevice::MMCRAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 205 "../s/bif.l"
yylval->number = BootDevice::MMC0;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 206 "../s/bif.l"
yylval->number = BootDevice::MMC0RAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 208 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 209 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 210 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 211 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 212 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 213 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 214 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 215 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 216 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 217 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 218 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 219 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 220 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 221 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 222 "../s/bif.l"
yylval->number = DestinationCPU::R5_lockstep;   return tok::DEST_CPU_TYPE;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 223 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 224 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 225 "../s/bif.l"
yylval->number = DestinationCPU::AIE;            return tok::DEST_CPU_TYPE;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 227 "../s/bif.l"
return tok::DEST_DEVICE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 228 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PS;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 229 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PL;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 230 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PMU;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 231 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_XIP;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 233 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 234 "../s/bif.l"
yylval->number = ExceptionLevel::EL0;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 235 "../s/bif.l"
yylval->number = ExceptionLevel::EL1;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 236 "../s/bif.l"
yylval->number = ExceptionLevel::EL2;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 237 "../s/bif.l"
yylval->number = ExceptionLevel::EL3;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 239 "../s/bif.l"
return tok::TRUSTZONE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 240 "../s/bif.l"
yylval->number = TrustZone::Secure;             return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 241 "../s/bif.l"
yylval->number = TrustZone::NonSecure;          return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 243 "../s/bif.l"
yylval->number = tok::SLR_NUM;                  return tok::SLR_NUM;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 245 "../s/bif.l"
yylval->number = tok::AUTH_PARAMS;              return tok::AUTH_PARAMS;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 246 "../s/bif.l"
yylval->number = tok::PPK_SELECT;               return tok::PPK_SELECT;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 247 "../s/bif.l"
yylval->number = tok::SPK_SELECT;               return tok::SPK_SELECT;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 248 "../s/bif.l"
yylval->number = SpkSelect::SPK_eFUSE;          return tok::SPKSELECT;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 249 "../s/bif.l"
yylval->number = SpkSelect::USER_eFUSE;         return tok::SPKSELECT;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 250 "../s/bif.l"
yylval->number = tok::SPK_ID;                   return tok::SPK_ID; 
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 251 "../s/bif.l"
return tok::HEADER_AUTH;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 253 "../s/bif.l"
yylval->number = tok::REVOKE_ID;                return tok::REVOKE_ID;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 255 "../s/bif.l"
yylval->number = tok::SPLIT;                    return tok::SPLIT;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 256 "../s/bif.l"
yylval->number = tok::SPLIT_MODE;               return tok::SPLIT_MODE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 257 "../s/bif.l"
yylval->number = SplitMode::SlaveMode;          return tok::SPLITMODE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 258 "../s/bif.l"
yylval->number = SplitMode::Normal;             return tok::SPLITMODE;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 259 "../s/bif.l"
yylval->number = tok::SPLIT_FMT;                return tok::SPLIT_FMT; 
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 260 "../s/bif.l"
return tok::MCS;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 261 "../s/bif.l"
return tok::BIN;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 264 "../s/bif.l"
yylval->number=atoi(yytext);                    return tok::DECVALUE;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 265 "../s/bif.l"
yylval->number=strtoul(yytext+2,NULL,16);       return tok::HEXVALUE;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 266 "../s/bif.l"
return tok::COLON;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 267 "../s/bif.l"
return tok::SEMICOLON;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 268 "../s/bif.l"
return tok::EQUAL;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 269 "../s/bif.l"
return tok::COMMA;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 270 "../s/bif.l"
return tok::OBRACKET;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 271 "../s/bif.l"
return tok::EBRACKET;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 272 "../s/bif.l"
return tok::OBRACE;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 273 "../s/bif.l"
return tok::EBRACE;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 274 "../s/bif.l"
return tok::LPAREN;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 275 "../s/bif.l"
return tok::RPAREN;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 276 "../s/bif.l"
return tok::ASTERISK;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 278 "../s/bif.l"
return tok::PLUS;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 279 "../s/bif.l"
return tok::MINUS;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 280 "../s/bif.l"
return tok::LSHIFT;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 281 "../s/bif.l"
return tok::RSHIFT;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 282 "../s/bif.l"
return tok::MULT;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 283 "../s/bif.l"
return tok::DIVIDE;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 284 "../s/bif.l"
return tok::MODULO;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 285 "../s/bif.l"
return tok::NEGATION;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 286 "../s/bif.l"
return tok::AND;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 287 "../s/bif.l"
return tok::OR;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 288 "../s/bif.l"
return tok::XOR;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 291 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::WORD;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 292 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::FILENAME;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 293 "../s/bif.l"
yylval->string=strdup(yytext+1); yylval->string[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 295 "../s/bif.l"
yylloc->step ();
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 296 "../s/bif.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 297 "../s/bif.l"
/* ignore (Linux only) */
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 298 "../s/bif.l"
printf("WARNING: bad character! '%s' (0x%02X)\n",yytext,yytext[0]);
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 299 "../s/bif.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3824 "../bisonflex/bif.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	biffree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	biffree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					bifrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) bifrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1019 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1019 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1018);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) bifalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) bifalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		biffree((void *) b->yy_ch_buf  );

	biffree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) bifalloc(new_size  );

		else
			(yy_start_stack) = (int *) bifrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *bifalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *bifrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void biffree (void * ptr )
{
	free( (char *) ptr );	/* see bifrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 299 "../s/bif.l"




void BIF::FlexScanner::comment()
{
    char c, c1;
loop:
    while ((c = yyinput()) != '*' && c != 0) 
    {
        // putchar(c);
        if (c == '\n') yylloc->lines (1);
    }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

