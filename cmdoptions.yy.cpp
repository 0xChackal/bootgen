#line 2 "../bisonflex/cmdoptions.yy.cpp"

#line 4 "../bisonflex/cmdoptions.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer cmdoptionsFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *cmdoptionsalloc (yy_size_t  );
void *cmdoptionsrealloc (void *,yy_size_t  );
void cmdoptionsfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 146
#define YY_END_OF_BUFFER 147
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[799] =
    {   0,
        0,    0,  147,  145,  143,  144,  145,  141,  141,  141,
        3,    3,   36,  139,  140,  140,  140,  140,  139,  139,
      139,  139,  139,  139,  140,  140,    8,  140,  140,  140,
      140,   76,   77,  140,  140,  140,  140,  140,   78,  140,
      140,  143,  144,    0,    0,  141,  141,  141,  141,  141,
      141,  141,   70,  141,  141,  141,    7,    9,   58,  141,
      141,   10,  141,    1,  141,    3,  139,  140,  140,    0,
      140,  140,  140,   64,  139,  140,  140,  140,  139,   60,
      140,  140,  140,  140,  139,  140,  139,  139,  140,  140,
      140,  139,  140,  140,  140,  140,  140,  140,  140,   62,

      140,  140,  140,  140,  140,  140,  140,  140,  140,   11,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      142,    0,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,    0,    2,  141,    4,    0,  140,  140,  140,  140,
      140,  140,  140,  140,  141,  140,  140,   32,  140,  140,
      140,  139,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,   61,  140,  140,
      140,  140,  140,  140,   89,   31,  140,  140,   12,  140,

      140,  140,   45,   63,  107,  140,  140,  140,  140,  140,
      140,  140,   46,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,    0,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,   13,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,   23,   27,
      140,  140,  140,   73,   44,  140,  141,  140,  141,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,   75,   57,  140,  140,  140,  140,   24,  140,   16,
       95,   28,  140,  140,  117,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  141,  140,  140,

      140,  140,  140,  140,  140,  140,  140,  141,  140,  140,
      141,   55,   54,  141,  141,  141,   38,  141,  141,    6,
      141,   71,  141,  141,  141,  141,  141,  141,  141,   59,
      141,  141,  141,  141,  140,  140,  140,  141,  140,  140,
       21,  141,  140,  141,  140,  141,  140,  140,  140,  140,
       17,  140,  141,  140,   22,  140,   14,  140,  140,  141,
      140,  140,  133,   74,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  141,  140,
      140,  140,  136,  140,  140,  140,   18,  140,  141,  141,
      140,  140,  141,  140,  141,   37,  141,  141,  141,  141,

        5,  141,  141,  141,  141,  141,  141,  141,   29,  141,
      141,  140,  140,  140,  141,  140,  140,  141,  140,  141,
      129,  141,  140,  140,  140,  140,  140,  141,  141,  140,
      140,  140,  140,  141,  140,  140,  140,   81,  140,  140,
      115,  140,  140,  140,  140,  141,  140,  140,  140,  140,
      141,  140,  140,  140,  140,  140,  140,  140,  140,   96,
      141,   94,  140,  141,   56,  141,  141,  141,  141,  141,
       39,  141,  141,  141,  141,  141,  141,   66,  141,  140,
      140,  140,  141,  140,  140,  141,  141,  140,  141,  141,
      140,  140,  140,  140,  140,  141,  141,  140,   86,  140,

      140,  141,  140,  140,  141,  140,  140,  140,  140,  140,
      140,  141,   98,  111,  140,   99,  141,  116,  100,  140,
      101,   35,  140,  118,  140,  141,   15,  141,  140,  141,
      141,  141,   20,  141,  141,  141,  141,  141,  141,  141,
      141,  141,   25,  140,  140,  141,  140,  140,  141,  141,
      140,   72,  141,  140,  140,  140,  109,  140,  141,  141,
      140,  140,  140,  140,  141,  140,  140,  141,  140,  140,
      140,  140,   34,  140,  141,  141,  138,  140,   26,  140,
      112,  113,  140,   19,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  140,  114,  141,  134,

      140,  130,  141,  140,  141,  104,  140,  140,  140,  141,
      141,  140,  140,  140,   50,  141,  141,  140,  141,  140,
      140,  140,  140,  140,  141,  141,  140,  125,   90,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
       69,   97,  141,  140,  127,  140,  141,  105,  140,  140,
      141,  141,  140,  106,  141,  141,  141,  141,  140,  141,
       92,  140,  140,  140,  141,  141,  141,  140,  141,  141,
      141,  141,  141,  141,   51,  141,  141,  141,  141,   65,
      126,  140,  135,  121,  137,  140,  141,  141,  140,  141,
      141,  120,  141,  141,  140,  141,  140,   85,  140,  141,

      128,  141,  140,  141,  141,  141,  141,  141,  141,   53,
      141,  141,  141,  140,  141,  141,  141,   79,  141,  141,
      141,  141,  140,  141,  140,  140,  141,  141,   83,  141,
       41,  141,  141,  141,   68,  141,  141,   52,  140,  141,
      141,  141,  132,  141,  141,  141,   87,  140,  141,   49,
      140,  141,  141,  141,  141,  141,   43,  141,  141,  108,
      141,  141,   88,  141,  141,  141,  140,  141,   82,  141,
      141,   33,  141,  141,   40,  141,  122,  141,   93,  124,
       80,  103,  141,  110,  141,   67,   42,  141,  141,  141,
      141,  141,  141,  119,   91,   30,  123,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    1,    8,    7,    9,   10,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    1,
       14,    1,    1,    1,   15,   16,   17,   18,   18,   18,
       19,   20,   19,   19,   21,   19,   22,   19,   19,   19,
       19,   19,   23,   19,   19,   19,   19,   24,   19,   19,
        1,   25,    1,    1,   26,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   19,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[52] =
    {   0,
        1,    1,    1,    2,    3,    1,    4,    4,    4,    4,
        4,    4,    1,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4
    } ;

static yyconst flex_int16_t yy_base[804] =
    {   0,
        0,    0, 1394, 1395,   50, 1390,   51,    0,   51,   47,
       96,   40, 1395,  138,  178, 1370, 1360, 1345,  218,  240,
      143,  128,  260,  283, 1358,   34,   32, 1357,   56, 1358,
     1346,  136,  306,   36,   56, 1342, 1354, 1352, 1355, 1346,
     1330,   71, 1376, 1373,  147,    0, 1334, 1341,  127,  131,
     1340, 1343, 1342, 1334,  138, 1331,    0,   66, 1339, 1328,
     1337,    0, 1317, 1395,  352,  137,  173, 1353,  357,  157,
      166,  163,  185,  208,  214,  186,  187,  159,  229,  210,
      220,  204,  222,  235,  352,  188,  367,  290,  221,  230,
      247,  371,  233,  232,  266,  198,  268,  167,  269,  243,

      271,  272,  280,  292,  315,  277,  295,  299,  303, 1352,
      316,  300,  298,   44,  347,  358,  377,  379,  386,  307,
      384,  385,  387,  392,  399,  393,  389,  390,  394,  391,
     1395,  404, 1335, 1331, 1334,  400, 1315, 1331, 1322, 1319,
     1320, 1329, 1322, 1321,  397,  410, 1313, 1325,  405, 1308,
     1311, 1346, 1395,  445,    0,    0,  306,  418,  401,  421,
      430,  439,  440,  441, 1312,  442,  443, 1334,  447,  448,
      449,  455,  451,  457,  458,  459,  462,  467,  468,  471,
      472,  470,  473,  469,  478,  485,  489, 1333,  479,  474,
      475,  509,  498,  500, 1332, 1331,  504,  477,  502,  508,

      513,  511, 1330, 1329, 1328,  515,  518,  514,  516,  520,
      523,  524, 1327,  522,  526,  527,  528,  538,  521,  547,
      529,  530,  549,  550, 1334, 1304, 1311, 1290, 1298, 1293,
     1289, 1289, 1294, 1299, 1288, 1295, 1300,    0, 1280, 1297,
     1288, 1288, 1293, 1291, 1276, 1284, 1283, 1275, 1303, 1302,
      555,  557,  559, 1301,  563,  561, 1282,  564, 1278,  565,
      567,  569,  570,  571,  582,  566,  594,  568,  572,  583,
      573, 1298, 1297,  596,  574,  598,  599, 1296,  600, 1295,
     1294, 1293,  577,  606, 1292,  608,  610,  613,  614,  617,
      619,  623,  620,  624,  625,  621,  626, 1272,  627,  629,

      630,  632,  634,  636,  633,  640,  637,  645,  644,  649,
     1265,  650,    0, 1268, 1268, 1274,    0, 1268, 1248,    0,
     1254,    0, 1265, 1266, 1249, 1253, 1265, 1253, 1259,    0,
     1254, 1243, 1255, 1248,  666,  653,  654, 1244,  661,  667,
     1271, 1233,  668, 1251,  672, 1251,  673,  674,  677,  676,
     1267,  678, 1237,  683,  680,  681, 1265,  682,  684, 1248,
      686,  687, 1263, 1262,  689,  688,  691,  697,  692,  699,
      702,  706,  710,  715,  711,  712,  720,  722, 1239,  723,
      726,  727, 1260,  729,  731,  736, 1259,  733, 1237, 1243,
      737,  734, 1229,  738, 1237,    0, 1225, 1225, 1224, 1237,

        0, 1213, 1228, 1221, 1227, 1232, 1214, 1224,    0, 1206,
     1214,  740,  739,  741, 1227,  745,  744,  735,  756, 1216,
     1239, 1220,  761,  763,  762,  755,  765, 1206, 1215,  764,
      767,  768,  773, 1208,  780,  782,  781, 1234,  783,  784,
     1233,  785,  786,  787,  789, 1210,  791,  793,  795,  800,
     1207,  802,  804,  797,  807,  810,  801,  808,  814,    0,
     1198, 1229,  817, 1211,  821, 1203, 1195, 1197, 1192, 1191,
        0, 1207, 1189, 1202, 1199, 1187, 1191, 1203, 1197,  824,
      829,  830, 1184,  831,  832, 1191, 1190,  833, 1183, 1176,
      835,  840,  834,  838,  842, 1181, 1194,  844,  846,  843,

      853, 1181,  858,  850, 1188,  859,  845,  849,  860,  861,
      852, 1180, 1204, 1203,  869, 1202, 1183, 1200, 1199,  848,
     1198, 1197,  864, 1196,  873, 1181, 1194, 1175,  883, 1164,
     1163, 1167, 1167, 1170, 1163, 1164, 1159, 1166, 1170, 1168,
     1158, 1149, 1179,  884,  886, 1164,  887,  888, 1143, 1152,
      889,    0, 1153,  891,  893,  890, 1174,  894, 1151, 1146,
      892,  896,  895,  897, 1152,  900,  905, 1144,  898,  901,
      906,  912, 1169,  902, 1154, 1152,    0,  903, 1166,  926,
        0,    0,  929,    0, 1143, 1149, 1136, 1149, 1134, 1134,
     1145, 1137, 1142, 1124, 1138, 1156,  930, 1153, 1127, 1151,

      931,    0, 1132,  932, 1133, 1148,  936,  937,  915, 1134,
     1129,  938,  939,  940, 1145, 1122,  920,  946, 1127,  949,
      947,  950,  952,  955, 1122, 1119,  951, 1140, 1139, 1125,
     1115, 1110,  933, 1119, 1114, 1108, 1114, 1109, 1097, 1110,
        0, 1128, 1096,  957,    0,  958, 1108, 1125,  959,  961,
     1099, 1096,  963,  973, 1098, 1101, 1106, 1101,  971, 1088,
     1117,  974,  978,  977, 1089, 1097, 1082,  979, 1088, 1080,
     1098, 1096, 1091, 1085,    0, 1089, 1092, 1073, 1074,    0,
        0,  980, 1103,    0, 1102,  981, 1074, 1081,  982, 1082,
     1080,    0, 1066, 1059,  983, 1058,  988, 1094,  993, 1058,

        0, 1061,  998, 1064, 1059, 1072, 1057, 1050, 1055,    0,
     1068, 1053, 1065,  992,  983, 1065, 1062, 1080, 1046, 1044,
     1056, 1045, 1001, 1047, 1003, 1004, 1048, 1041, 1072, 1054,
        0, 1037, 1048, 1037,    0, 1049, 1034,    0, 1005, 1037,
     1046, 1045,    0, 1037, 1043, 1042,    0, 1007, 1027, 1058,
     1008, 1039, 1026, 1037, 1017, 1021,    0, 1006, 1005, 1033,
      999,  996,    0, 1000, 1003,  995, 1011, 1003, 1024,  993,
     1003,    0,  992,  987,    0,  999,    0,  992,    0,    0,
        0, 1012,  611,    0,  462,    0,    0,  410,  332,  278,
      213,  165,   79,    0,    0,    0,    0, 1395, 1052,   64,

     1055, 1059, 1063
    } ;

static yyconst flex_int16_t yy_def[804] =
    {   0,
      798,    1,  798,  798,  798,  798,  799,  800,  800,  800,
      798,   11,  798,   11,   11,   15,   15,   15,   11,   19,
       11,   19,   19,   23,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,  798,  798,  801,  801,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  798,  802,   11,   11,   15,   15,  798,
       15,   15,   15,   11,   11,   15,   15,   15,   11,   15,
       15,   15,   15,   15,   11,   15,   11,   11,   15,   15,
       15,   11,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
      798,  798,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  803,  798,  802,   69,  800,   15,   15,   15,   15,
       15,   15,   15,   15,  800,   15,   15,   15,   15,   15,
       15,   11,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,  801,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,   15,   15,
       15,   15,   15,   15,   15,   15,  800,   15,  800,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,  800,   15,   15,

       15,   15,   15,   15,   15,   15,   15,  800,   15,   15,
      800,   15,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,   15,   15,   15,  800,   15,   15,
       15,  800,   15,  800,   15,  800,   15,   15,   15,   15,
       15,   15,  800,   15,   15,   15,   15,   15,   15,  800,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,  800,   15,
       15,   15,   15,   15,   15,   15,   15,   15,  800,  800,
       15,   15,  800,   15,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,   15,   15,   15,  800,   15,   15,  800,   15,  800,
       15,  800,   15,   15,   15,   15,   15,  800,  800,   15,
       15,   15,   15,  800,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,  800,   15,   15,   15,   15,
      800,   15,   15,   15,   15,   15,   15,   15,   15,  800,
      800,   15,   15,  800,   15,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,   15,
       15,   15,  800,   15,   15,  800,  800,   15,  800,  800,
       15,   15,   15,   15,   15,  800,  800,   15,   15,   15,

       15,  800,   15,   15,  800,   15,   15,   15,   15,   15,
       15,  800,   15,   15,   15,   15,  800,   15,   15,   15,
       15,   15,   15,   15,   15,  800,   15,  800,   15,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,   15,   15,   15,  800,   15,   15,  800,  800,
       15,  800,  800,   15,   15,   15,   15,   15,  800,  800,
       15,   15,   15,   15,  800,   15,   15,  800,   15,   15,
       15,   15,   15,   15,  800,  800,  800,   15,   15,   15,
      800,  800,   15,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,   15,   15,  800,   15,

       15,  800,  800,   15,  800,   15,   15,   15,   15,  800,
      800,   15,   15,   15,   15,  800,  800,   15,  800,   15,
       15,   15,   15,   15,  800,  800,   15,   15,   15,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,   15,  800,   15,  800,   15,  800,   15,   15,   15,
      800,  800,   15,   15,  800,  800,  800,  800,   15,  800,
       15,   15,   15,   15,  800,  800,  800,   15,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,   15,   15,  800,   15,   15,  800,  800,   15,  800,
      800,  800,  800,  800,   15,  800,   15,   15,   15,  800,

      800,  800,   15,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,   15,  800,  800,  800,   15,  800,  800,
      800,  800,   15,  800,   15,   15,  800,  800,   15,  800,
      800,  800,  800,  800,  800,  800,  800,  800,   15,  800,
      800,  800,  800,  800,  800,  800,  800,   15,  800,   15,
       15,  800,  800,  800,  800,  800,  800,  800,  800,   15,
      800,  800,  800,  800,  800,  800,   15,  800,   15,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,   15,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,    0,  798,  798,

      798,  798,  798
    } ;

static yyconst flex_int16_t yy_nxt[1447] =
    {   0,
        4,    5,    6,    5,    7,    4,    8,    9,   10,   11,
       12,   12,    4,   13,   14,   14,   14,   14,   15,   16,
       17,   15,   18,   15,    8,    8,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   15,   34,   35,   36,   37,   38,   39,   40,   15,
       41,   42,   64,   42,   44,   65,  798,   44,   44,   44,
       44,   44,   44,   68,   97,  100,  120,   46,   98,  101,
      102,   99,   42,  205,   42,   44,   44,   47,   48,  121,
       49,   50,   51,   52,   53,   54,  104,   55,   68,   56,
       57,   58,  146,   59,   60,  105,  122,   61,   62,  123,

      124,   63,   46,   46,   46,   66,   66,   66,  147,  797,
       67,   67,   67,   67,   68,   68,   68,   68,   68,   69,
       46,   46,   67,   67,   67,   67,   67,   67,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   69,   68,   68,   67,   67,   67,
       70,  131,   67,   67,   67,   70,   67,  135,   85,  132,
       68,   68,  137,  108,   68,  156,   68,  109,  143,  138,
       68,  798,  136,   86,  110,  798,   84,  144,  798,  798,
      157,  156,   67,   67,   67,   68,   68,   68,   68,   68,
       70,   68,   68,   68,   68,   68,   68,  798,  798,  798,

      798,   68,  796,  163,   68,   68,   68,   68,   68,   68,
      798,  159,  158,  186,  174,  162,  798,   67,   67,   67,
      161,   68,  798,   67,   67,   67,   68,   67,   67,   67,
       70,   68,  798,  798,  798,  165,  184,   68,   67,   67,
       67,   68,  798,  169,  798,  798,   74,  798,   75,  177,
      795,  167,   68,  166,   76,  798,   68,  160,  168,  798,
       77,  170,   68,   78,  182,  171,   68,   79,   67,  181,
       67,  164,  178,   80,   81,  179,   82,   68,  798,   83,
      798,  798,   68,  798,  798,   68,   87,  188,   67,  798,
       67,   88,  798,  183,  185,  187,   68,  189,   89,   67,

       67,   67,   90,  190,  798,   68,  191,  798,   91,   92,
      798,  798,  798,   68,   67,  798,  794,   93,  798,  798,
      196,   68,  249,   94,  193,   68,   95,  798,  798,  192,
      198,   68,  111,  197,  199,  176,  112,  203,   68,  113,
      114,  194,  204,  115,  200,  201,  116,  195,  117,  118,
      212,  119,  152,  152,  153,  152,  152,  152,  202,  798,
      793,   67,   67,   67,  152,  152,  155,  155,  155,  798,
      798,  155,  155,  155,  155,   68,   67,   67,   67,  172,
       67,   67,   67,  155,  155,  155,  155,  155,  155,  798,
       68,  798,  206,  207,   68,  173,  798,  798,  798,  798,

       68,  798,  798,  798,  798,  798,  798,  208,  180,  175,
      213,  798,  225,  798,  210,   68,  209,  211,  217,   68,
      214,  215,  216,  239,  220,  218,  229,  250,  225,  224,
      798,  221,  222,  798,  223,  240,  792,  230,  241,  242,
      245,  246,  798,  251,  219,  152,  152,  153,  152,  152,
      152,  798,  798,  798,  798,  798,  252,  152,  152,  798,
      798,  798,  253,  798,   67,   67,   67,  256,  259,  798,
      798,  798,  254,  255,  798,  260,  258,  262,   68,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  791,  798,
      798,  798,  261,  265,  266,  264,  273,  798,  270,  275,

      263,  798,  267,   68,  268,  271,  269,  276,  272,  274,
      798,  279,  798,  280,  798,  277,  798,  278,  282,  281,
      798,  798,  287,  798,  284,  798,  798,  798,  798,  285,
      798,  286,  798,  798,  798,  798,  798,  291,  798,  798,
      798,  798,  798,  289,  296,  288,  293,  290,  298,  294,
      798,  297,  283,  300,  299,  292,  304,  295,  303,  798,
      302,  798,  798,  309,  307,  301,  306,  798,  310,  798,
      305,  798,  308,  798,  311,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  336,  338,  798,
      339,  312,  346,  340,  798,  798,  343,  337,  341,  335,

      345,  347,  351,  348,  350,  352,  798,  353,  798,  359,
      798,  798,  798,  349,  357,  354,  361,  356,  798,  365,
      798,  360,  798,  358,  355,  798,  798,  363,  362,  798,
      364,  798,  798,  798,  366,  798,  798,  798,  798,  798,
      370,  798,  798,  369,  798,  798,  798,  367,  798,  798,
      790,  377,  798,  368,  371,  372,  798,  373,  375,  376,
      378,  798,  798,  381,  382,  798,  798,  374,  384,  380,
      387,  385,  389,  798,  390,  391,  383,  386,  798,  798,
      798,  388,  412,  392,  798,  798,  798,  394,  798,  798,
      798,  414,  798,  798,  798,  798,  798,  416,  798,  798,

      798,  798,  413,  798,  798,  417,  419,  425,  429,  798,
      423,  798,  435,  424,  798,  421,  427,  437,  798,  426,
      430,  431,  798,  798,  798,  440,  432,  798,  443,  436,
      439,  442,  798,  433,  798,  798,  441,  438,  798,  798,
      446,  798,  444,  798,  448,  798,  798,  447,  798,  798,
      798,  798,  798,  798,  445,  480,  798,  798,  450,  454,
      486,  456,  453,  449,  457,  455,  487,  798,  798,  452,
      481,  482,  463,  798,  798,  798,  798,  798,  465,  798,
      798,  458,  488,  459,  484,  798,  462,  491,  485,  492,
      493,  495,  798,  798,  798,  798,  798,  798,  798,  798,

      494,  798,  500,  798,  498,  798,  505,  798,  501,  798,
      507,  499,  798,  798,  798,  508,  798,  510,  509,  798,
      798,  513,  798,  511,  503,  504,  798,  506,  523,  798,
      516,  514,  518,  798,  519,  520,  798,  521,  515,  522,
      543,  798,  798,  798,  798,  798,  798,  798,  524,  527,
      798,  529,  798,  525,  798,  798,  798,  798,  798,  547,
      798,  798,  798,  544,  798,  798,  548,  554,  545,  555,
      798,  798,  798,  798,  578,  557,  798,  551,  556,  561,
      562,  798,  563,  564,  567,  798,  558,  571,  566,  570,
      572,  574,  579,  569,  576,  798,  798,  573,  798,  798,

      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  580,  798,  798,  798,  798,  601,  798,  798,  612,
      597,  606,  600,  607,  798,  617,  583,  798,  609,  608,
      598,  621,  622,  614,  604,  613,  620,  618,  798,  629,
      624,  798,  798,  798,  798,  623,  615,  627,  798,  798,
      798,  798,  798,  657,  650,  658,  628,  644,  798,  798,
      642,  798,  798,  798,  798,  655,  672,  798,  673,  798,
      798,  798,  653,  798,  646,  798,  662,  654,  648,  649,
      665,  661,  664,  798,  659,  798,  798,  663,  683,  798,
      798,  798,  798,  798,  798,  798,  668,  695,  690,  686,

      798,  682,  685,  699,  798,  798,  715,  689,  698,  697,
      798,  740,  741,  798,  714,  798,  798,  798,  725,  798,
      798,  703,  726,  798,  798,  718,  789,  723,  729,  788,
      787,  739,  786,  785,  751,  784,  798,  783,  781,  780,
      779,  782,  778,  760,  777,  798,  748,  776,  775,  767,
      769,  774,  750,   45,  773,   45,   44,   44,   44,  154,
      154,  154,  154,  152,  152,  152,  152,  772,  771,  770,
      798,  768,  766,  765,  764,  763,  762,  761,  759,  758,
      757,  756,  755,  754,  798,  753,  752,  749,  747,  746,
      745,  744,  798,  743,  742,  738,  737,  736,  735,  734,

      733,  732,  731,  730,  728,  727,  798,  724,  722,  721,
      720,  719,  717,  716,  798,  798,  713,  712,  711,  710,
      709,  708,  707,  706,  705,  704,  702,  701,  700,  798,
      696,  694,  693,  692,  691,  688,  687,  798,  684,  681,
      798,  680,  679,  678,  677,  676,  675,  674,  671,  670,
      669,  798,  798,  667,  666,  660,  656,  798,  652,  651,
      798,  647,  645,  798,  643,  798,  641,  640,  639,  638,
      637,  636,  635,  634,  633,  632,  631,  630,  798,  626,
      625,  798,  619,  616,  611,  610,  798,  605,  603,  602,
      599,  798,  596,  595,  594,  593,  592,  591,  590,  589,

      588,  587,  586,  585,  584,  582,  798,  581,  798,  798,
      798,  798,  798,  577,  798,  798,  798,  575,  568,  565,
      560,  559,  553,  552,  550,  549,  546,  542,  541,  540,
      539,  538,  537,  536,  535,  534,  533,  532,  531,  530,
      528,  798,  526,  517,  512,  798,  798,  502,  497,  496,
      490,  798,  489,  483,  479,  478,  477,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  467,  466,  464,  461,
      460,  798,  798,  451,  798,  798,  434,  798,  428,  798,
      422,  420,  418,  798,  415,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,

      396,  395,  393,  379,  798,  798,  798,  798,  798,  798,
      798,  344,  342,  798,  798,  798,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  257,  153,  248,
      247,  244,  243,  238,  237,  236,  235,  234,  233,  232,
      231,  228,  227,  226,  798,  798,  151,  150,  149,  148,
      145,  142,  141,  140,  139,  134,  133,  131,   43,  130,
      129,  128,  127,  126,  125,  107,  106,  103,   96,   73,
       72,   71,   43,  798,    3,  798,  798,  798,  798,  798,

      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798
    } ;

static yyconst flex_int16_t yy_chk[1447] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,   10,    5,    7,   10,  114,    7,    7,    7,
        7,    7,    7,   12,   26,   27,   34,  800,   26,   27,
       27,   26,   42,  114,   42,    7,    7,    9,    9,   34,
        9,    9,    9,    9,    9,    9,   29,    9,   12,    9,
        9,    9,   58,    9,    9,   29,   35,    9,    9,   35,

       35,    9,   11,   11,   11,   11,   11,   11,   58,  793,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   14,   14,   14,
       14,   45,   21,   21,   21,   21,   22,   49,   22,   45,
       66,   14,   50,   32,   22,   70,   21,   32,   55,   50,
       22,   78,   49,   22,   32,   72,   21,   55,   71,   98,
       71,   70,   67,   67,   67,   66,   14,   15,   15,   15,
       15,   21,   15,   15,   15,   15,   67,   73,   76,   77,

       86,   15,  792,   78,   15,   15,   15,   15,   15,   15,
       96,   73,   72,   98,   86,   77,   82,   74,   74,   74,
       76,   67,   80,   75,   75,   75,   15,   19,   19,   19,
       19,   74,   81,   89,   83,   80,   96,   75,   79,   79,
       79,   19,   90,   82,   94,   93,   19,   84,   19,   89,
      791,   81,   79,   80,   19,  100,   74,   75,   81,   91,
       19,   83,   75,   19,   94,   84,   19,   20,   20,   93,
       20,   79,   90,   20,   20,   91,   20,   79,   95,   20,
       97,   99,   20,  101,  102,   20,   23,  100,   23,  106,
       23,   23,  103,   95,   97,   99,   23,  101,   23,   88,

       88,   88,   23,  102,  104,   23,  102,  107,   23,   24,
      113,  108,  112,   88,   24,  109,  790,   24,  157,  120,
      106,   24,  157,   24,  104,   24,   24,  105,  111,  103,
      108,   24,   33,  107,  109,   88,   33,  112,   88,   33,
       33,  105,  113,   33,  111,  111,   33,  105,   33,   33,
      120,   33,   65,   65,   65,   65,   65,   65,  111,  115,
      789,   85,   85,   85,   65,   65,   69,   69,   69,   69,
      116,   69,   69,   69,   69,   85,   87,   87,   87,   85,
       92,   92,   92,   69,   69,   69,   69,   69,   69,  117,
       87,  118,  115,  116,   92,   85,  121,  122,  119,  123,

       85,  127,  128,  130,  124,  126,  129,  117,   92,   87,
      121,  125,  132,  159,  118,   87,  117,  119,  124,   92,
      122,  122,  123,  145,  126,  125,  136,  158,  132,  130,
      158,  127,  128,  160,  129,  145,  788,  136,  146,  146,
      149,  149,  161,  159,  125,  154,  154,  154,  154,  154,
      154,  162,  163,  164,  166,  167,  160,  154,  154,  169,
      170,  171,  161,  173,  172,  172,  172,  164,  167,  174,
      175,  176,  162,  163,  177,  169,  166,  171,  172,  178,
      179,  184,  182,  180,  181,  183,  190,  191,  785,  198,
      185,  189,  170,  174,  175,  173,  182,  186,  179,  184,

      172,  187,  176,  172,  177,  180,  178,  185,  181,  183,
      193,  189,  194,  190,  199,  186,  197,  187,  192,  191,
      200,  192,  198,  202,  193,  201,  208,  206,  209,  194,
      207,  197,  210,  219,  214,  211,  212,  202,  215,  216,
      217,  221,  222,  200,  209,  199,  206,  201,  211,  207,
      218,  210,  192,  214,  212,  202,  217,  208,  216,  220,
      215,  223,  224,  221,  219,  214,  218,  251,  222,  252,
      217,  253,  220,  256,  223,  255,  258,  260,  266,  261,
      268,  262,  263,  264,  269,  271,  275,  252,  255,  283,
      255,  224,  261,  255,  265,  270,  258,  253,  256,  251,

      260,  261,  263,  261,  262,  264,  267,  265,  274,  271,
      276,  277,  279,  261,  269,  266,  275,  268,  284,  283,
      286,  274,  287,  270,  267,  288,  289,  277,  276,  290,
      279,  291,  293,  296,  284,  292,  294,  295,  297,  299,
      289,  300,  301,  288,  302,  305,  303,  286,  304,  307,
      783,  296,  306,  287,  290,  291,  309,  292,  294,  295,
      297,  310,  312,  300,  301,  336,  337,  293,  303,  299,
      306,  304,  308,  339,  308,  309,  302,  305,  335,  340,
      343,  307,  335,  310,  345,  347,  348,  312,  350,  349,
      352,  337,  355,  356,  358,  354,  359,  339,  361,  362,

      366,  365,  336,  367,  369,  340,  343,  349,  354,  368,
      347,  370,  361,  348,  371,  345,  352,  365,  372,  350,
      355,  356,  373,  375,  376,  368,  358,  374,  371,  362,
      367,  370,  377,  359,  378,  380,  369,  366,  381,  382,
      374,  384,  372,  385,  376,  388,  392,  375,  386,  391,
      394,  413,  412,  414,  373,  412,  417,  416,  378,  382,
      418,  385,  381,  377,  386,  384,  418,  426,  419,  380,
      413,  414,  392,  423,  425,  424,  430,  427,  394,  431,
      432,  386,  419,  388,  416,  433,  391,  423,  417,  424,
      425,  427,  435,  437,  436,  439,  440,  442,  443,  444,

      426,  445,  432,  447,  430,  448,  437,  449,  433,  454,
      440,  431,  450,  457,  452,  442,  453,  444,  443,  455,
      458,  447,  456,  445,  435,  436,  459,  439,  457,  463,
      450,  448,  452,  465,  453,  454,  480,  455,  449,  456,
      480,  481,  482,  484,  485,  488,  493,  491,  458,  463,
      494,  465,  492,  459,  495,  500,  498,  507,  499,  484,
      520,  508,  504,  481,  511,  501,  485,  491,  482,  492,
      503,  506,  509,  510,  520,  494,  523,  488,  493,  498,
      499,  515,  500,  501,  504,  525,  495,  508,  503,  507,
      509,  511,  523,  506,  515,  529,  544,  510,  545,  547,

      548,  551,  556,  554,  561,  555,  558,  563,  562,  564,
      569,  525,  566,  570,  574,  578,  548,  567,  571,  561,
      544,  554,  547,  555,  572,  566,  529,  609,  558,  556,
      545,  570,  571,  563,  551,  562,  569,  567,  580,  583,
      574,  583,  597,  601,  604,  572,  564,  578,  607,  608,
      612,  613,  614,  617,  609,  617,  580,  601,  618,  621,
      597,  620,  622,  627,  623,  614,  633,  624,  633,  644,
      646,  649,  612,  650,  604,  653,  621,  613,  607,  608,
      624,  620,  623,  659,  618,  654,  662,  622,  646,  664,
      663,  668,  682,  686,  689,  695,  627,  659,  654,  650,

      697,  644,  649,  664,  714,  699,  686,  653,  663,  662,
      703,  715,  715,  723,  682,  725,  726,  739,  697,  748,
      751,  668,  699,  767,  782,  689,  778,  695,  703,  776,
      774,  714,  773,  771,  726,  770,  769,  768,  766,  765,
      764,  767,  762,  739,  761,  760,  723,  759,  758,  748,
      751,  756,  725,  799,  755,  799,  801,  801,  801,  802,
      802,  802,  802,  803,  803,  803,  803,  754,  753,  752,
      750,  749,  746,  745,  744,  742,  741,  740,  737,  736,
      734,  733,  732,  730,  729,  728,  727,  724,  722,  721,
      720,  719,  718,  717,  716,  713,  712,  711,  709,  708,

      707,  706,  705,  704,  702,  700,  698,  696,  694,  693,
      691,  690,  688,  687,  685,  683,  679,  678,  677,  676,
      674,  673,  672,  671,  670,  669,  667,  666,  665,  661,
      660,  658,  657,  656,  655,  652,  651,  648,  647,  643,
      642,  640,  639,  638,  637,  636,  635,  634,  632,  631,
      630,  629,  628,  626,  625,  619,  616,  615,  611,  610,
      606,  605,  603,  600,  599,  598,  596,  595,  594,  593,
      592,  591,  590,  589,  588,  587,  586,  585,  579,  576,
      575,  573,  568,  565,  560,  559,  557,  553,  550,  549,
      546,  543,  542,  541,  540,  539,  538,  537,  536,  535,

      534,  533,  532,  531,  530,  528,  527,  526,  524,  522,
      521,  519,  518,  517,  516,  514,  513,  512,  505,  502,
      497,  496,  490,  489,  487,  486,  483,  479,  478,  477,
      476,  475,  474,  473,  472,  470,  469,  468,  467,  466,
      464,  462,  461,  451,  446,  441,  438,  434,  429,  428,
      422,  421,  420,  415,  411,  410,  408,  407,  406,  405,
      404,  403,  402,  400,  399,  398,  397,  395,  393,  390,
      389,  387,  383,  379,  364,  363,  360,  357,  353,  351,
      346,  344,  342,  341,  338,  334,  333,  332,  331,  329,
      328,  327,  326,  325,  324,  323,  321,  319,  318,  316,

      315,  314,  311,  298,  285,  282,  281,  280,  278,  273,
      272,  259,  257,  254,  250,  249,  248,  247,  246,  245,
      244,  243,  242,  241,  240,  239,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  213,
      205,  204,  203,  196,  195,  188,  168,  165,  152,  151,
      150,  148,  147,  144,  143,  142,  141,  140,  139,  138,
      137,  135,  134,  133,  110,   68,   63,   61,   60,   59,
       56,   54,   53,   52,   51,   48,   47,   44,   43,   41,
       40,   39,   38,   37,   36,   31,   30,   28,   25,   18,
       17,   16,    6,    3,  798,  798,  798,  798,  798,  798,

      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798
    } ;

static yyconst flex_int16_t yy_rule_linenum[146] =
    {   0,
       42,   43,   45,   46,   49,   50,   51,   52,   53,   55,
       56,   57,   59,   60,   61,   62,   63,   64,   66,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   78,   79,
       80,   81,   83,   84,   85,   87,   88,   89,   90,   91,
       92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
      103,  104,  105,  107,  108,  109,  110,  112,  114,  115,
      116,  117,  118,  119,  121,  122,  123,  124,  125,  127,
      128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
      138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  153,  154,  155,  156,  157,  158,

      159,  160,  161,  163,  164,  165,  166,  167,  168,  169,
      170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
      180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
      190,  191,  192,  193,  194,  195,  196,  197,  201,  202,
      203,  204,  207,  208,  209
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/cmdoptions.l"
/******************************************************************************
* Copyright 2015-2019 Xilinx, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the register initialization file */
/* Run the cmdoptions.y file first through bison to generate the regidit.tab.hpp file, which is included herein */
/* Then run this file through flex to generate the cmdoptions.yy.c source code */
#line 22 "../s/cmdoptions.l"
 #include <stdio.h>
 #include "cmdoptionsscanner.h"
 #include "cmdoptions.tab.hpp"
 typedef CO::BisonParser::token tok;
#line 31 "../s/cmdoptions.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 1118 "../bisonflex/cmdoptions.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 34 "../s/cmdoptions.l"



   yylloc->step ();




#line 1284 "../bisonflex/cmdoptions.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 799 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 798 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 146 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 146 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 147 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 42 "../s/cmdoptions.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 43 "../s/cmdoptions.l"
/* ignore */;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 45 "../s/cmdoptions.l"
yylval->number=atoi(yytext);              return tok::DECVALUE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 46 "../s/cmdoptions.l"
yylval->number=strtoul(yytext+2,NULL,16); return tok::HEXVALUE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "../s/cmdoptions.l"
return tok::_IMAGE;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "../s/cmdoptions.l"
return tok::_FILL;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "../s/cmdoptions.l"
return tok::_O_TOK;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "../s/cmdoptions.l"
return tok::I;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "../s/cmdoptions.l"
return tok::_P_TOK;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "../s/cmdoptions.l"
return tok::_W;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "../s/cmdoptions.l"
return tok::ON;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "../s/cmdoptions.l"
return tok::OFF;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "../s/cmdoptions.l"
return tok::_LOG;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "../s/cmdoptions.l"
return tok::ERROR;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 61 "../s/cmdoptions.l"
return tok::WARNING;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 62 "../s/cmdoptions.l"
return tok::INFO;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 63 "../s/cmdoptions.l"
return tok::DEBUG;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 64 "../s/cmdoptions.l"
return tok::TRACE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 66 "../s/cmdoptions.l"
return tok::_BIF_HELP;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 68 "../s/cmdoptions.l"
return tok::_ENCRYPT;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 69 "../s/cmdoptions.l"
return tok::BBRAM;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 70 "../s/cmdoptions.l"
return tok::EFUSE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 71 "../s/cmdoptions.l"
return tok::HMAC;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 72 "../s/cmdoptions.l"
return tok::HMAC;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 73 "../s/cmdoptions.l"
return tok::STARTCBC;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 74 "../s/cmdoptions.l"
return tok::STARTCBC;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 75 "../s/cmdoptions.l"
return tok::KEY0;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 76 "../s/cmdoptions.l"
return tok::KEY0;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 78 "../s/cmdoptions.l"
return tok::_SPLIT;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 79 "../s/cmdoptions.l"
return tok::_PROCESS_BITSTREAM;	
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "../s/cmdoptions.l"
return tok::MCS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 81 "../s/cmdoptions.l"
return tok::BIN;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "../s/cmdoptions.l"
return tok::_DUAL_QSPI_MODE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 84 "../s/cmdoptions.l"
return tok::PARALLEL;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 85 "../s/cmdoptions.l"
return tok::STACKED;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "../s/cmdoptions.l"
return tok::EQUALS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "../s/cmdoptions.l"
return tok::_DEBUG_TOK;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "../s/cmdoptions.l"
return tok::_DUMP;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "../s/cmdoptions.l"
return tok::_LEGACY;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "../s/cmdoptions.l"
return tok::_PADIMAGEHEADER;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "../s/cmdoptions.l"
return tok::_EFUSEPPKBITS;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "../s/cmdoptions.l"
return tok::_GENERATE_HASHES;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "../s/cmdoptions.l"
return tok::_GENERATE_KEYS;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "../s/cmdoptions.l"
return tok::AUTH;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "../s/cmdoptions.l"
return tok::PEM;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "../s/cmdoptions.l"
return tok::RSA;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "../s/cmdoptions.l"
return tok::PEM;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "../s/cmdoptions.l"
return tok::RSA;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "../s/cmdoptions.l"
return tok::GREY;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "../s/cmdoptions.l"
return tok::METAL;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 "../s/cmdoptions.l"
return tok::_NONBOOTING;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "../s/cmdoptions.l"
return tok::_SPKSIGNATURE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "../s/cmdoptions.l"
return tok::_PACKAGENAME;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 107 "../s/cmdoptions.l"
return tok::_ARCH;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 108 "../s/cmdoptions.l"
return tok::ZYNQ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 109 "../s/cmdoptions.l"
return tok::ZYNQMP;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "../s/cmdoptions.l"
return tok::FPGA;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "../s/cmdoptions.l"
return tok::_R;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 114 "../s/cmdoptions.l"
return tok::_READ;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 115 "../s/cmdoptions.l"
return tok::READ_BH;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 116 "../s/cmdoptions.l"
return tok::READ_IHT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 117 "../s/cmdoptions.l"
return tok::READ_IH;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 118 "../s/cmdoptions.l"
return tok::READ_PHT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 119 "../s/cmdoptions.l"
return tok::READ_AC;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 121 "../s/cmdoptions.l"
return tok::_VERIFYKDF;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 122 "../s/cmdoptions.l"
return tok::_VERIFY;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 123 "../s/cmdoptions.l"
return tok::_ZYNQMPENCRDUMP;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 124 "../s/cmdoptions.l"
return tok::_NOAUTHBLOCKS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 125 "../s/cmdoptions.l"
return tok::_ZYNQMPES1;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "../s/cmdoptions.l"
return tok::_H;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "../s/cmdoptions.l"
return tok::_H;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "../s/cmdoptions.l"
return tok::HBIFHELP;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "../s/cmdoptions.l"
return tok::HARCH;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "../s/cmdoptions.l"
return tok::HIMAGE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "../s/cmdoptions.l"
return tok::HFILL;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "../s/cmdoptions.l"
return tok::HO;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "../s/cmdoptions.l"
return tok::HP;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "../s/cmdoptions.l"
return tok::HW;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "../s/cmdoptions.l"
return tok::HEFUSEPPKBITS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "../s/cmdoptions.l"
return tok::HGENHASHES;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "../s/cmdoptions.l"
return tok::HLEGACY;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "../s/cmdoptions.l"
return tok::HPADHDR;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "../s/cmdoptions.l"
return tok::H_SPKSIGN;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "../s/cmdoptions.l"
return tok::HDEBUG;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "../s/cmdoptions.l"
return tok::HPACKAGE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "../s/cmdoptions.l"
return tok::HENCRYPT;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "../s/cmdoptions.l"
return tok::HGENKEYS;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "../s/cmdoptions.l"
return tok::HDQSPI;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "../s/cmdoptions.l"
return tok::HLOG;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "../s/cmdoptions.l"
return tok::HZYNQMPES1;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "../s/cmdoptions.l"
return tok::HPROCESSBIT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "../s/cmdoptions.l"
return tok::HNONBOOTING;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "../s/cmdoptions.l"
return tok::HENCRDUMP;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "../s/cmdoptions.l"
return tok::HVERIFY;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 153 "../s/cmdoptions.l"
return tok::H_BIF_INIT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 154 "../s/cmdoptions.l"
return tok::H_BIF_UDFBH;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 155 "../s/cmdoptions.l"
return tok::H_BIF_AES;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 156 "../s/cmdoptions.l"
return tok::H_BIF_PPK;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 157 "../s/cmdoptions.l"
return tok::H_BIF_PSK;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 158 "../s/cmdoptions.l"
return tok::H_BIF_SPK;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 159 "../s/cmdoptions.l"
return tok::H_BIF_SSK;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 160 "../s/cmdoptions.l"
return tok::H_BIF_SPKSIGN;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 161 "../s/cmdoptions.l"
return tok::H_BIF_HDRSIGN;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "../s/cmdoptions.l"
return tok::H_BIF_BI;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "../s/cmdoptions.l"
return tok::H_BIF_BL;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "../s/cmdoptions.l"
return tok::H_BIF_ENCR;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "../s/cmdoptions.l"
return tok::H_BIF_PID;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "../s/cmdoptions.l"
return tok::H_BIF_AUTH;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "../s/cmdoptions.l"
return tok::H_BIF_CHKSM;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "../s/cmdoptions.l"
return tok::H_BIF_POWNER;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "../s/cmdoptions.l"
return tok::H_BIF_PRESIGN;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "../s/cmdoptions.l"
return tok::H_BIF_UDF;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "../s/cmdoptions.l"
return tok::H_BIF_XIP;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "../s/cmdoptions.l"
return tok::H_BIF_ALIGN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "../s/cmdoptions.l"
return tok::H_BIF_OFFSET;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "../s/cmdoptions.l"
return tok::H_BIF_RES;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "../s/cmdoptions.l"
return tok::H_BIF_LOAD;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "../s/cmdoptions.l"
return tok::H_BIF_STARTUP;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "../s/cmdoptions.l"
return tok::H_BIF_KEYSRC;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "../s/cmdoptions.l"
return tok::H_BIF_FSBLCFG;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "../s/cmdoptions.l"
return tok::H_BIF_BOOTDEV;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "../s/cmdoptions.l"
return tok::H_BIF_DESTCPU;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "../s/cmdoptions.l"
return tok::H_BIF_DESTDEV;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "../s/cmdoptions.l"
return tok::H_BIF_EL;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "../s/cmdoptions.l"
return tok::H_BIF_TZ;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "../s/cmdoptions.l"
return tok::H_BIF_AUTHPARAM;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "../s/cmdoptions.l"
return tok::H_BIF_BHKEY;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "../s/cmdoptions.l"
return tok::H_BIF_PFW;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "../s/cmdoptions.l"
return tok::H_BIF_BLOCKS;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "../s/cmdoptions.l"
return tok::H_BIF_BHIV;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "../s/cmdoptions.l"
return tok::H_BIF_METAL;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "../s/cmdoptions.l"
return tok::H_BIF_ELYHNDOFF;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "../s/cmdoptions.l"
return tok::H_BIF_HIVEC;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "../s/cmdoptions.l"
return tok::H_BIF_AUTHBLOCKS;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "../s/cmdoptions.l"
return tok::H_BIF_BHSIGN;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 195 "../s/cmdoptions.l"
return tok::H_SPLIT;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 196 "../s/cmdoptions.l"
return tok::H_BIF_BOOTVEC;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 197 "../s/cmdoptions.l"
return tok::H_BIF_PUFDATA;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 201 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext);         return tok::HEXSTRING;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 202 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext);         return tok::IDENTIFIER;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 203 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext);    return tok::FILENAME;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 204 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext+1); yylval->cstring[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 207 "../s/cmdoptions.l"
yylloc->step ();
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 208 "../s/cmdoptions.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 209 "../s/cmdoptions.l"
LOG_ERROR("Unknown option on command line: %s\n",yytext);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 210 "../s/cmdoptions.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2125 "../bisonflex/cmdoptions.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	cmdoptionsfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	cmdoptionsfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cmdoptionsrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cmdoptionsrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 799 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 799 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 798);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cmdoptionsalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cmdoptionsalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cmdoptionsfree((void *) b->yy_ch_buf  );

	cmdoptionsfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cmdoptionsalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cmdoptionsrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) cmdoptionsalloc(new_size  );

		else
			(yy_start_stack) = (int *) cmdoptionsrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cmdoptionsalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cmdoptionsrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cmdoptionsfree (void * ptr )
{
	free( (char *) ptr );	/* see cmdoptionsrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 210 "../s/cmdoptions.l"




void CO::FlexScanner::comment()
{
    char c, c1;
    loop:
        while ((c = yyinput()) != '*' && c != 0) 
        {
            // putchar(c);
        }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

