#line 2 "../bisonflex/cmdoptions.yy.cpp"

#line 4 "../bisonflex/cmdoptions.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer cmdoptionsFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *cmdoptionsalloc (yy_size_t  );
void *cmdoptionsrealloc (void *,yy_size_t  );
void cmdoptionsfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 173
#define YY_END_OF_BUFFER 174
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[944] =
    {   0,
        0,    0,  174,  172,  170,  171,  168,  172,   37,  167,
      167,  168,  166,  166,   36,  166,  167,  167,  167,  167,
      166,  166,  166,  166,  166,  166,  167,  167,    7,  167,
      167,  167,  167,   82,   83,  167,  167,  167,  167,  167,
       84,  167,  167,  170,  171,  168,    0,    0,  167,  167,
      167,  167,  167,  167,  167,  167,   76,  167,  167,  167,
        6,    8,   64,  167,  167,    9,  167,    1,  168,  166,
      167,    0,  167,  167,  167,  166,   70,  166,  167,  167,
      167,  166,   66,  167,  167,  167,  167,  167,  166,  167,
      166,  166,  166,  167,  167,  167,  166,  167,  167,  167,

      167,  167,  167,  167,  113,   68,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,   10,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  169,    0,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,    0,    2,  168,    3,    0,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,   31,  167,  167,  167,  167,  167,  166,
      167,  167,  167,  167,  167,  166,  167,  167,  167,  167,

      167,  167,  167,  167,  167,  167,  167,  167,   67,  167,
      167,  167,  167,  167,  167,   94,   30,  167,  167,  167,
      167,   11,  167,  167,  167,  167,   52,   69,  134,   40,
      167,  167,  167,  167,  167,  167,  167,  167,  167,   53,
      167,  119,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,    0,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,   12,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,   22,
       26,  167,  167,  167,  167,   79,   51,  167,  167,  167,
      167,  167,  167,  167,  167,  108,  109,  167,  167,  167,

      167,  103,  167,  167,  167,  167,  167,  167,  167,  112,
       81,   63,  167,  167,  167,  167,   23,  167,   15,  122,
       27,  167,  167,  145,  167,  116,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  102,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  120,  167,  167,  167,  167,  167,   60,
       59,  167,  167,  167,   39,  167,  167,    5,  167,   77,
      167,  167,  167,  167,  167,  167,  167,   65,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,   20,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

       16,  167,  167,  167,  167,  167,   49,   21,  167,   13,
      167,  167,  167,  167,  167,  161,   80,  167,  167,  167,
      167,  167,  167,  137,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      163,  167,  167,  167,   17,  167,  167,  167,  167,  167,
      167,  167,  167,  167,   38,  167,  167,  167,  167,  167,
        4,  167,  167,  167,  167,  167,  167,  167,  167,   28,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  157,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  121,   87,  167,  167,  167,  143,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  123,
      167,   99,   62,  167,  167,   61,  167,  167,  167,  167,
      167,  167,  167,   44,  167,  167,  167,  167,  167,  167,
      167,   72,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,   91,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,   41,  167,  125,  139,  167,  126,  167,

      144,  167,  127,  167,  128,   35,  167,  146,  167,  167,
      167,   14,  167,  167,  167,  167,  167,  167,  167,   19,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
       24,  167,  167,  167,  167,  167,  167,  167,  167,   78,
      167,  167,  167,  167,  167,  167,  167,  136,  167,  167,
      167,  167,  104,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,   34,  167,  167,
      167,  167,  165,  167,  167,   25,  167,  140,  167,  141,
      167,   18,  167,  167,   43,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  142,

      167,  167,  158,  167,  167,  167,  167,  167,  167,  131,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
       55,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      118,  117,  167,  167,  167,  167,  153,  167,   95,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,   75,  167,  124,  167,  167,  155,  167,  106,
      167,  167,   42,  132,  167,  167,  111,  167,  167,  167,
      167,  133,  167,  167,  167,  167,  167,  167,  115,   97,
      167,  167,  167,  167,  167,  167,  167,  167,  100,  167,
      167,  167,  167,  167,  167,  167,   56,  167,  167,  167,

      167,  167,   71,  167,  154,  167,  162,  107,  149,  164,
      167,  167,  167,  167,  167,  167,  167,  148,  167,  167,
      167,  167,  167,   90,  167,  167,  156,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,   58,  167,  167,
      167,  167,  105,  167,  167,  167,  167,  167,   85,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
       89,  167,  167,   46,  167,  167,  167,   74,  167,  167,
      167,   57,  167,  110,  167,  167,  167,  160,  167,  167,
      167,   92,  167,  167,   54,  167,  167,  167,  167,  167,
      167,  167,  167,   50,  167,  167,  167,  135,  167,  167,

       93,  167,  167,  167,  167,  167,   88,  167,  167,  167,
       33,   32,  167,  167,   45,  167,  167,  150,  167,   98,
      152,   86,  130,  167,  138,  167,  167,   73,   47,  167,
      167,  167,  167,  167,  101,  167,   48,  167,  147,   96,
       29,  151,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    5,    5,    5,    5,    1,    5,
        5,    7,    5,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   16,   16,   16,   16,   16,   17,    1,    1,
       18,    1,    1,    5,   19,   20,   21,   22,   22,   22,
       23,   24,   23,   23,   25,   23,   26,   23,   23,   23,
       23,   23,   27,   23,   23,   23,   23,   28,   23,   23,
        1,   29,    1,    5,   30,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   23,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    1,    1,    2,    3,    4,    1,    5,    6,    6,
        3,    6,    6,    6,    6,    6,    1,    1,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    3,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6
    } ;

static yyconst flex_int16_t yy_base[950] =
    {   0,
        0,    0, 1151, 1152,   54, 1147,    0,   55,    0,   81,
      106,   50,  150,   34, 1152,   46, 1132,   55,   63,  131,
      187,  170,  172,  171,  202,  215,  138,  209,  219,  139,
      212,  142,  233,  235,  271,  159,  224,  143,  162,  178,
      174,  129,  222,   71, 1145,    0, 1141,   71,    0,    0,
     1099, 1106,  117,   40, 1105, 1108, 1107, 1099,  157, 1096,
        0,  211, 1104,  182, 1103,    0, 1083, 1152,  321,  238,
      328,  263, 1117, 1081, 1103,  242,  247,  251, 1094, 1099,
     1082,  254,  250,  247, 1086, 1085, 1093,  249,  304,  255,
      318,  277,  303, 1094, 1079, 1092,  326, 1083, 1086, 1090,

     1078, 1089, 1068, 1087,    0, 1068, 1085,   43, 1061, 1077,
      277, 1065, 1063, 1069, 1067, 1073, 1072,    0, 1064,  333,
     1064, 1056, 1070, 1061,  270, 1062,  282, 1061, 1064,  303,
     1068, 1065, 1050,  329, 1056, 1064,  162, 1049, 1057, 1045,
     1044, 1045, 1046, 1152,  304, 1055, 1051, 1054,  341, 1035,
     1051, 1042, 1039, 1040, 1049, 1042, 1041,  250,  340, 1033,
     1045, 1042,  335, 1027, 1030, 1069, 1152,  383,    0,    0,
     1050, 1058, 1022, 1035, 1027, 1029, 1027, 1026, 1032, 1022,
     1022, 1030, 1029,    0, 1025, 1008, 1023, 1001, 1019,  349,
     1022, 1003, 1010, 1005, 1008,  350, 1000, 1000, 1002, 1010,

     1005,  347, 1012, 1001, 1006, 1006, 1004, 1005,    0, 1000,
      992,  986,  346, 1003,  999,    0,    0, 1001,  996,  998,
      979,  980,  992,  986,  986,  361,    0,    0,    0,    0,
      994,  987,  986,  973,  987,  983,  988,  983,  981,    0,
      965,    0,  345,  975,  977,  362,  979,  963,  975,  979,
      358,  965,  977,  960,  999,  966,  973,  952,  960,  955,
      951,  951,  956,  961,  950,  957,  962,    0,  942,  959,
      950,  950,  955,  953,  936,  937,  945,  944,  936,    0,
        0,  932,  942,  944,  935,    0,  377,  935,  941,  938,
      936,  938,  932,  374,  931,    0,    0,  933,  915,  929,

      937,  936,  911,  933,  928,  908,  914,  915,  918,    0,
        0,    0,  928,  910,  921,  922,    0,  919,    0,    0,
        0,  906,  919,    0,  913,    0,  906,  901,  913,  900,
      915,  903,  903,  900,  903,  908,  888,  900,  899,  902,
      897,  899,    0,  887,  886,  893,  892,  881,  890,  888,
      878,  891,  876,    0,  303,  888,  892,  883,  879,  878,
        0,  881,  881,  887,  886,  880,  860,    0,  866,    0,
      877,  878,  861,  865,  877,  865,  871,    0,  858,  865,
      854,  866,  859,  879,  884,  844,  855,  851,  852,    0,
      840,  850,  857,  848,  842,  383,  847,  844,  852,  838,

        0,  855,  841,  837,  848,  851,    0,  835,  834,    0,
      829,  823,  843,  844,  827,    0,    0,  840,  818,  836,
      826,  836,  819,    0,  830,  835,  824,  815,  814,  828,
      831,  819,  822,  810,  816,  817,  804,  819,  812,  815,
        0,  810,  815,  372,    0,  794,  810,  816,  792,  804,
      801,  799,  797,  806,    0,  374,  806,  794,  793,  806,
        0,  782,  797,  790,  796,  801,  783,  795,  792,    0,
      774,  782,  806,  811,  788,  788,  791,  772,  378,  789,
      778,  784,    0,  773,  781,  776,  783,  782,  779,  761,
      383,  779,  761,  769,  769,  761,  756,  765,  763,  758,

      752,  752,  769,    0,  767,  748,  765,    0,  760,  757,
      758,  762,  752,  746,  750,  753,  744,  738,  750,  743,
      748,  748,  746,  737,  744,  744,  745,  731,  731,    0,
      725,  743,    0,  735,  737,  735,  728,  720,  719,  727,
      720,  715,  714,    0,  730,  712,  725,  722,  710,  723,
      713,  725,  719,  732,  722,  712,  707,  702,  709,  708,
      707,  696,  699,  704,  699,  690,  699,  702,  704,  688,
      694,  704,  690,  684,  687,  684,  699,  689,  689,  683,
      691,  682,  689,  684,  687,  687,  681,  670,  675,  682,
      675,  676,  670,    0,  671,    0,    0,  682,    0,  676,

        0,  675,    0,  678,    0,    0,  675,    0,  664,  675,
      665,    0,  669,  655,  657,  656,  655,  652,  658,  658,
      661,  654,  655,  650,  657,  661,  655,  658,  648,  639,
        0,  644,  644,  635,  652,  649,  630,  639,  629,    0,
      647,  641,  637,  640,  639,  638,  628,    0,  628,  639,
      630,  629,    0,  624,  634,  621,  621,  609,  626,  631,
      623,  616,  623,  601,  602,  605,  594,    0,  597,   35,
      108,  199,    0,  253,  306,    0,  376,    0,  389,    0,
      413,    0,  388,  389,    0,  397,  386,  401,  388,  390,
      403,  397,  404,  405,  389,  405,  427,  397,  407,    0,

      401,  413,    0,  410,  399,  404,  409,  416,  402,    0,
      404,  405,  419,  420,  411,  426,  423,  419,  416,  430,
        0,  422,  424,  420,  432,  419,  430,  434,  427,  435,
        0,  441,  435,  434,  424,  425,    0,  440,    0,  447,
      448,  440,  437,  443,  449,  447,  443,  451,  448,  438,
      439,  454,    0,  457,    0,  444,  444,    0,  459,    0,
      458,  461,    0,    0,  449,  454,    0,  456,  458,  457,
      453,  473,  463,  468,  475,  472,  477,  462,    0,    0,
      470,  476,  481,  469,  479,  466,  479,  470,    0,  476,
      477,  471,  491,  491,  488,  484,    0,  490,  495,  478,

      491,  482,    0,  495,    0,  492,    0,    0,    0,    0,
      496,  503,  490,  499,  488,  503,  503,    0,  491,  486,
      492,  488,  508,    0,  510,  493,    0,  498,  508,  513,
      505,  506,  503,  518,  505,  500,  507,    0,  522,  509,
      519,  524,    0,  516,  525,  529,  530,  529,    0,  516,
      516,  530,  521,  520,  526,  518,  538,  531,  526,  534,
        0,  543,  544,    0,  529,  542,  533,    0,  547,  534,
      542,    0,  542,    0,  541,  552,  553,    0,  547,  555,
      556,    0,  545,  544,    0,  547,  560,  549,  566,  563,
      564,  558,  566,    0,  555,  556,  573,    0,  555,  555,

        0,  562,  567,  561,  575,  572,    0,  565,  578,  577,
        0,    0,  570,  568,    0,  582,  581,    0,  580,    0,
        0,    0,    0,  576,    0,  590,  587,    0,    0,  592,
      589,  592,  583,  585,    0,  586,    0,  594,    0,    0,
        0,    0, 1152,  627,  632,  634,  639,  645,  651
    } ;

static yyconst flex_int16_t yy_def[950] =
    {   0,
      943,    1,  943,  943,  943,  943,  944,  945,  946,  943,
       10,  944,   11,   13,  943,   13,   11,   11,   11,   11,
       13,   13,   13,   13,   13,   13,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,  943,  943,  944,  947,  947,  946,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,  943,  948,   13,
       11,  943,   11,   11,   11,   13,   13,   13,   11,   11,
       11,   13,   11,   11,   11,   11,   11,   11,   13,   11,
       13,   13,   13,   11,   11,   11,   13,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,  943,  943,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,  949,  943,  948,   71,  944,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   13,
       11,   11,   11,   11,   11,   13,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,  947,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,    0,  943,  943,  943,  943,  943,  943
    } ;

static yyconst flex_int16_t yy_nxt[1208] =
    {   0,
        4,    5,    6,    5,    7,    8,    4,    9,   10,   11,
       12,   13,   14,   14,   14,   14,    4,   15,   16,   16,
       16,   16,   17,   18,   19,   17,   20,   17,    7,   11,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   17,   36,   37,   38,   39,
       40,   41,   42,   17,   43,   44,   68,   44,   47,   47,
       69,   50,   72,   47,   47,   47,   47,   47,   47,   47,
       47,   72,   44,   50,   44,  150,  144,  732,  211,   72,
       73,  212,  151,   47,   47,   46,   50,  145,   49,   50,
       50,   46,   50,   50,   50,   50,   50,   74,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,   46,
       50,   51,   52,   50,   53,   54,   55,   56,   57,   58,
       50,   59,   50,   60,   61,   62,   50,   63,   64,   50,
       50,   65,   66,   50,   50,   67,   50,   50,  733,   50,
       50,   50,   50,   50,   50,   72,   50,   72,   50,   50,
       50,  148,   50,   50,   72,   72,   50,   50,   72,   72,
       50,   70,   70,   70,   70,   70,  149,  142,   70,   70,
       70,   70,  101,  109,  112,   72,  113,   71,   72,   75,
       70,   70,   70,   70,   70,   70,   72,   72,   72,  137,
       72,  156,  247,  130,   72,  139,  138,   50,   50,   50,

      157,   82,   71,   72,  141,   89,  131,   83,   84,   87,
       85,  248,  140,   86,   50,   88,  162,   76,   72,   77,
       90,   78,   50,   50,   50,   72,  163,   79,   72,   50,
      734,   72,   91,   80,   92,   72,   81,   93,   72,   50,
       72,  159,   50,  102,   94,   97,  110,  103,   95,   72,
      104,   72,  105,   98,   96,  111,  106,  160,  132,   99,
      107,  108,  100,  114,  133,   50,  116,   50,  134,   50,
      117,  135,  136,  170,   50,  143,  115,  118,   50,  180,
      269,   50,  182,  183,  735,  193,  119,   72,  174,  184,
       50,  170,  270,  188,   50,  189,  194,  181,  175,   50,

      179,  120,  231,   50,   50,  121,   50,  215,  122,  123,
      196,  124,  125,  216,  255,  126,  234,  127,  128,  232,
      129,  166,  166,  167,  166,  235,  166,  166,  166,   50,
       50,   50,  255,  238,  447,  190,  448,  166,  166,  169,
      169,  169,  169,  169,  191,   50,  169,  169,  169,  169,
      239,  192,  197,   50,  736,   50,   50,  321,  169,  169,
      169,  169,  169,  169,  195,  224,  225,  201,  243,  244,
       50,  259,  271,  272,  276,  277,   50,   50,   50,  226,
      346,  310,  260,  166,  166,  167,  166,  311,  166,  166,
      166,  333,  347,  322,  350,  334,  356,  304,  298,  166,

      166,   50,   50,  396,  527,  357,  388,  560,  351,  335,
      737,  389,  397,  561,  398,  484,  485,  538,  486,  539,
      572,  528,  738,  573,  399,  739,  740,  741,  742,  743,
      744,  745,  746,  747,  748,  749,  750,  751,  752,  753,
      754,  755,  756,  757,  758,  759,  760,  761,  762,  763,
      764,  765,  766,  767,  768,  769,  770,  771,  772,  773,
      774,  775,  777,  776,  778,  779,  780,  781,  782,  783,
      784,  785,  786,  787,  788,  789,  790,  791,  792,  793,
      794,  796,  795,  797,  798,  799,  800,  801,  802,  803,
      804,  805,  806,  807,  808,  809,  810,  811,  812,  813,

      814,  815,  816,  817,  818,  819,  820,  821,  822,  823,
      824,  825,  826,  827,  828,  829,  830,  831,  832,  833,
      834,  835,  836,  837,  838,  839,  840,  841,  842,  843,
      844,  845,  846,  847,  848,  849,  850,  851,  852,  853,
      854,  855,  856,  857,  858,  859,  860,  861,  862,  863,
      864,  865,  866,  867,  868,  869,  870,  871,  872,  873,
      874,  875,  876,  877,  878,  879,  880,  881,  882,  883,
      884,  885,  886,  887,  888,  889,  890,  891,  892,  893,
      894,  895,  896,  897,  898,  899,  900,  901,  902,  903,
      904,  905,  906,  907,  908,  909,  910,  911,  912,  913,

      914,  915,  916,  917,  918,  919,  920,  921,  922,  923,
      924,  925,  926,  927,  928,  929,  930,  931,  932,  933,
      934,  935,  936,  937,  938,  939,  940,  941,  942,   46,
      731,  730,   46,   48,   48,  729,  728,   48,   49,   49,
       47,   47,   47,  727,   47,  168,  168,  168,  168,  168,
      168,  166,  166,  166,  166,  166,  166,  726,  725,  724,
      723,  722,  721,  720,  719,  718,  717,  716,  715,  714,
      713,  712,  711,  710,  709,  708,  707,  706,  705,  704,
      703,  702,  701,  700,  699,  698,  697,  696,  695,  694,
      693,  692,  691,  690,  689,  688,  687,  686,  685,  684,

      683,  682,  681,  680,  679,  678,  677,  676,  675,  674,
      673,  672,  671,  670,  669,  668,  667,  666,  665,  664,
      663,  662,  661,  660,  659,  658,  657,  656,  655,  654,
      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  617,  616,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  587,  586,  585,  584,

      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,
      559,  558,  557,  556,  555,  554,  553,  552,  551,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  490,  489,  488,  487,  483,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  473,

      472,  471,  470,  469,  468,  467,  466,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  395,  394,  393,  392,  391,  390,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,

      364,  363,  362,  361,  943,  360,  359,  358,  355,  354,
      353,  352,  349,  348,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  309,  308,  307,  306,  305,  303,  302,
      301,  300,  299,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  167,  279,  278,  275,  274,  273,  268,  267,  266,
      265,  264,  263,  262,  261,  258,  257,  256,  254,  253,
      252,  251,  250,  249,  246,  245,  242,  241,  240,  237,

      236,  233,  230,  229,  228,  227,  223,  222,  221,  220,
      219,  218,  217,  214,  213,  210,  209,  208,  207,  206,
      205,  204,  203,  202,  200,  199,  198,  187,  186,  185,
      178,  177,  176,  173,  172,  171,  165,  164,  161,  158,
      155,  154,  153,  152,  147,  146,  144,   45,   72,   45,
      943,    3,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,

      943,  943,  943,  943,  943,  943,  943
    } ;

static yyconst flex_int16_t yy_chk[1208] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,   12,    5,    8,    8,
       12,   14,   16,    8,    8,    8,    8,    8,    8,    8,
        8,   18,   44,   16,   44,   54,   48,  670,  108,   19,
       18,  108,   54,    8,    8,   10,   14,   48,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   19,   16,   10,

       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   11,   11,  671,   11,
       11,   11,   11,   11,   11,   42,   11,   20,   11,   11,
       11,   53,   11,   11,   27,   30,   11,   11,   32,   38,
       11,   13,   13,   13,   13,   13,   53,   42,   13,   13,
       13,   13,   27,   30,   32,   36,   32,   13,   39,   20,
       13,   13,   13,   13,   13,   13,   22,   24,   23,   38,
       41,   59,  137,   36,   40,   39,   38,   22,   24,   23,

       59,   22,   13,   21,   41,   24,   36,   22,   22,   23,
       22,  137,   40,   22,   21,   23,   64,   21,   25,   21,
       24,   21,   22,   24,   23,   28,   64,   21,   31,   25,
      672,   26,   25,   21,   25,   29,   21,   25,   43,   21,
       37,   62,   26,   28,   25,   26,   31,   28,   25,   33,
       28,   34,   29,   26,   25,   31,   29,   62,   37,   26,
       29,   29,   26,   33,   37,   70,   34,   26,   37,   76,
       34,   37,   37,   72,   77,   43,   33,   34,   78,   83,
      158,   82,   84,   84,  674,   90,   34,   35,   76,   84,
       70,   72,  158,   88,   76,   88,   90,   83,   78,   77,

       82,   35,  125,   78,   92,   35,   82,  111,   35,   35,
       92,   35,   35,  111,  145,   35,  127,   35,   35,  125,
       35,   69,   69,   69,   69,  127,   69,   69,   69,   92,
       93,   89,  145,  130,  355,   89,  355,   69,   69,   71,
       71,   71,   71,   71,   89,   91,   71,   71,   71,   71,
      130,   89,   93,   97,  675,   93,   89,  213,   71,   71,
       71,   71,   71,   71,   91,  120,  120,   97,  134,  134,
       91,  149,  159,  159,  163,  163,  190,  196,   97,  120,
      243,  202,  149,  168,  168,  168,  168,  202,  168,  168,
      168,  226,  243,  213,  246,  226,  251,  196,  190,  168,

      168,  190,  196,  294,  444,  251,  287,  479,  246,  226,
      677,  287,  294,  479,  294,  396,  396,  456,  396,  456,
      491,  444,  679,  491,  294,  681,  683,  684,  686,  687,
      688,  689,  690,  691,  692,  693,  694,  695,  696,  697,
      698,  699,  701,  702,  704,  705,  706,  707,  708,  709,
      711,  712,  713,  714,  715,  716,  717,  718,  719,  720,
      722,  723,  724,  723,  725,  726,  727,  728,  729,  730,
      732,  733,  734,  735,  736,  738,  740,  741,  742,  743,
      744,  745,  744,  746,  747,  748,  749,  750,  751,  752,
      754,  756,  757,  759,  761,  762,  765,  766,  768,  769,

      770,  771,  772,  773,  774,  775,  776,  777,  778,  781,
      782,  783,  784,  785,  786,  787,  788,  790,  791,  792,
      793,  794,  795,  796,  798,  799,  800,  801,  802,  804,
      806,  811,  812,  813,  814,  815,  816,  817,  819,  820,
      821,  822,  823,  825,  826,  828,  829,  830,  831,  832,
      833,  834,  835,  836,  837,  839,  840,  841,  842,  844,
      845,  846,  846,  847,  848,  850,  851,  852,  853,  854,
      855,  856,  857,  858,  859,  860,  862,  863,  865,  866,
      867,  869,  870,  871,  873,  875,  876,  877,  879,  880,
      881,  883,  884,  886,  887,  888,  889,  890,  891,  892,

      893,  895,  896,  897,  899,  900,  902,  903,  904,  905,
      906,  908,  909,  910,  913,  914,  916,  917,  919,  924,
      926,  927,  930,  931,  932,  933,  934,  936,  938,  944,
      669,  667,  944,  945,  945,  666,  665,  945,  946,  946,
      947,  947,  947,  664,  947,  948,  948,  948,  948,  948,
      948,  949,  949,  949,  949,  949,  949,  663,  662,  661,
      660,  659,  658,  657,  656,  655,  654,  652,  651,  650,
      649,  647,  646,  645,  644,  643,  642,  641,  639,  638,
      637,  636,  635,  634,  633,  632,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,

      616,  615,  614,  613,  611,  610,  609,  607,  604,  602,
      600,  598,  595,  593,  592,  591,  590,  589,  588,  587,
      586,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  545,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  532,  531,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      513,  512,  511,  510,  509,  507,  506,  505,  503,  502,

      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      490,  489,  488,  487,  486,  485,  484,  482,  481,  480,
      478,  477,  476,  475,  474,  473,  472,  471,  469,  468,
      467,  466,  465,  464,  463,  462,  460,  459,  458,  457,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  443,
      442,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  423,  422,  421,
      420,  419,  418,  415,  414,  413,  412,  411,  409,  408,
      406,  405,  404,  403,  402,  400,  399,  398,  397,  395,
      394,  393,  392,  391,  389,  388,  387,  386,  385,  384,

      383,  382,  381,  380,  379,  377,  376,  375,  374,  373,
      372,  371,  369,  367,  366,  365,  364,  363,  362,  360,
      359,  358,  357,  356,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      325,  323,  322,  318,  316,  315,  314,  313,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  299,  298,
      295,  293,  292,  291,  290,  289,  288,  285,  284,  283,
      282,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  267,  266,  265,  264,  263,  262,  261,  260,

      259,  258,  257,  256,  255,  254,  253,  252,  250,  249,
      248,  247,  245,  244,  241,  239,  238,  237,  236,  235,
      234,  233,  232,  231,  225,  224,  223,  222,  221,  220,
      219,  218,  215,  214,  212,  211,  210,  208,  207,  206,
      205,  204,  203,  201,  200,  199,  198,  197,  195,  194,
      193,  192,  191,  189,  188,  187,  186,  185,  183,  182,
      181,  180,  179,  178,  177,  176,  175,  174,  173,  172,
      171,  166,  165,  164,  162,  161,  160,  157,  156,  155,
      154,  153,  152,  151,  150,  148,  147,  146,  143,  142,
      141,  140,  139,  138,  136,  135,  133,  132,  131,  129,

      128,  126,  124,  123,  122,  121,  119,  117,  116,  115,
      114,  113,  112,  110,  109,  107,  106,  104,  103,  102,
      101,  100,   99,   98,   96,   95,   94,   87,   86,   85,
       81,   80,   79,   75,   74,   73,   67,   65,   63,   60,
       58,   57,   56,   55,   52,   51,   47,   45,   17,    6,
        3,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,

      943,  943,  943,  943,  943,  943,  943
    } ;

static yyconst flex_int16_t yy_rule_linenum[173] =
    {   0,
       42,   43,   45,   48,   49,   50,   51,   52,   54,   55,
       56,   58,   59,   60,   61,   62,   63,   65,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   77,   78,   79,
       80,   82,   83,   84,   85,   87,   88,   89,   90,   91,
       92,   93,   94,   95,   96,   97,   98,  100,  101,  103,
      104,  105,  106,  107,  108,  110,  111,  112,  114,  115,
      116,  117,  118,  120,  122,  123,  124,  125,  126,  127,
      129,  130,  131,  132,  133,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
      150,  151,  152,  153,  154,  155,  156,  157,  158,  159,

      160,  161,  162,  163,  165,  166,  167,  168,  169,  170,
      171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
      181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
      191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
      201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
      211,  212,  213,  214,  215,  216,  217,  218,  219,  220,
      221,  222,  223,  224,  225,  229,  230,  231,  232,  235,
      236,  237
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/cmdoptions.l"
/******************************************************************************
* Copyright 2015-2020 Xilinx, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the register initialization file */
/* Run the cmdoptions.y file first through bison to generate the regidit.tab.hpp file, which is included herein */
/* Then run this file through flex to generate the cmdoptions.yy.c source code */
#line 22 "../s/cmdoptions.l"
 #include <stdio.h>
 #include "cmdoptionsscanner.h"
 #include "cmdoptions.tab.hpp"
 typedef CO::BisonParser::token tok;
#line 31 "../s/cmdoptions.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 1115 "../bisonflex/cmdoptions.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 34 "../s/cmdoptions.l"



   yylloc->step ();




#line 1281 "../bisonflex/cmdoptions.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 944 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 943 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 173 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 173 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 174 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 42 "../s/cmdoptions.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 43 "../s/cmdoptions.l"
/* ignore */;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 45 "../s/cmdoptions.l"
yylval->number=strtoul(yytext+2,NULL,16); return tok::HEXVALUE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "../s/cmdoptions.l"
return tok::_IMAGE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "../s/cmdoptions.l"
return tok::_FILL;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "../s/cmdoptions.l"
return tok::_O_TOK;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "../s/cmdoptions.l"
return tok::I;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "../s/cmdoptions.l"
return tok::_P_TOK;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "../s/cmdoptions.l"
return tok::_W;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "../s/cmdoptions.l"
return tok::ON;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "../s/cmdoptions.l"
return tok::OFF;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "../s/cmdoptions.l"
return tok::_LOG;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "../s/cmdoptions.l"
return tok::ERROR;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "../s/cmdoptions.l"
return tok::WARNING;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 61 "../s/cmdoptions.l"
return tok::INFO;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 62 "../s/cmdoptions.l"
return tok::DEBUG;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 63 "../s/cmdoptions.l"
return tok::TRACE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 65 "../s/cmdoptions.l"
return tok::_BIF_HELP;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 67 "../s/cmdoptions.l"
return tok::_ENCRYPT;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 68 "../s/cmdoptions.l"
return tok::BBRAM;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 69 "../s/cmdoptions.l"
return tok::EFUSE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 70 "../s/cmdoptions.l"
return tok::HMAC;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 71 "../s/cmdoptions.l"
return tok::HMAC;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 72 "../s/cmdoptions.l"
return tok::STARTCBC;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 73 "../s/cmdoptions.l"
return tok::STARTCBC;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 74 "../s/cmdoptions.l"
return tok::KEY0;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 75 "../s/cmdoptions.l"
return tok::KEY0;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 77 "../s/cmdoptions.l"
return tok::_SPLIT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 78 "../s/cmdoptions.l"
return tok::_PROCESS_BITSTREAM;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 79 "../s/cmdoptions.l"
return tok::MCS;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "../s/cmdoptions.l"
return tok::BIN;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "../s/cmdoptions.l"
return tok::_DUAL_QSPI_MODE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "../s/cmdoptions.l"
return tok::_DUAL_OSPI_MODE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 84 "../s/cmdoptions.l"
return tok::PARALLEL;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 85 "../s/cmdoptions.l"
return tok::STACKED;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "../s/cmdoptions.l"
return tok::EQUALS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "../s/cmdoptions.l"
return tok::COMMA;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "../s/cmdoptions.l"
return tok::_DEBUG_TOK;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "../s/cmdoptions.l"
return tok::_DUMP;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "../s/cmdoptions.l"
return tok::DUMP_PLM;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "../s/cmdoptions.l"
return tok::DUMP_PMC_CDO;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "../s/cmdoptions.l"
return tok::DUMP_BOOT_FILES;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "../s/cmdoptions.l"
return tok::_DUMP_DIR;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "../s/cmdoptions.l"
return tok::_LEGACY;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "../s/cmdoptions.l"
return tok::_PADIMAGEHEADER;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "../s/cmdoptions.l"
return tok::_EFUSEPPKBITS;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "../s/cmdoptions.l"
return tok::_GENERATE_HASHES;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 100 "../s/cmdoptions.l"
return tok::_SECUREDEBUG;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 101 "../s/cmdoptions.l"
return tok::ECDSA;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 103 "../s/cmdoptions.l"
return tok::_GENERATE_KEYS;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 104 "../s/cmdoptions.l"
return tok::AUTH;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 105 "../s/cmdoptions.l"
return tok::PEM;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 106 "../s/cmdoptions.l"
return tok::RSA;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 107 "../s/cmdoptions.l"
return tok::GREY;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 108 "../s/cmdoptions.l"
return tok::METAL;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "../s/cmdoptions.l"
return tok::_NONBOOTING;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "../s/cmdoptions.l"
return tok::_SPKSIGNATURE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "../s/cmdoptions.l"
return tok::_PACKAGENAME;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 114 "../s/cmdoptions.l"
return tok::_ARCH;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 115 "../s/cmdoptions.l"
return tok::ZYNQ;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 116 "../s/cmdoptions.l"
return tok::ZYNQMP;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 117 "../s/cmdoptions.l"
return tok::VERSAL;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 118 "../s/cmdoptions.l"
return tok::FPGA;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 120 "../s/cmdoptions.l"
return tok::_R;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "../s/cmdoptions.l"
return tok::_READ;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "../s/cmdoptions.l"
return tok::READ_BH;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "../s/cmdoptions.l"
return tok::READ_IHT;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "../s/cmdoptions.l"
return tok::READ_IH;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "../s/cmdoptions.l"
return tok::READ_PHT;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "../s/cmdoptions.l"
return tok::READ_AC;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 129 "../s/cmdoptions.l"
return tok::_VERIFYKDF;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 130 "../s/cmdoptions.l"
return tok::_VERIFY;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 131 "../s/cmdoptions.l"
return tok::_ZYNQMPENCRDUMP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 132 "../s/cmdoptions.l"
return tok::_NOAUTHBLOCKS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 133 "../s/cmdoptions.l"
return tok::_ZYNQMPES1;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "../s/cmdoptions.l"
return tok::_H;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "../s/cmdoptions.l"
return tok::_H;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "../s/cmdoptions.l"
return tok::HBIFHELP;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "../s/cmdoptions.l"
return tok::HARCH;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "../s/cmdoptions.l"
return tok::HIMAGE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "../s/cmdoptions.l"
return tok::HFILL;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "../s/cmdoptions.l"
return tok::HO;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "../s/cmdoptions.l"
return tok::HP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "../s/cmdoptions.l"
return tok::HW;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "../s/cmdoptions.l"
return tok::HEFUSEPPKBITS;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "../s/cmdoptions.l"
return tok::HGENHASHES;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "../s/cmdoptions.l"
return tok::HLEGACY;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "../s/cmdoptions.l"
return tok::HPADHDR;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "../s/cmdoptions.l"
return tok::H_SPKSIGN;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "../s/cmdoptions.l"
return tok::HPACKAGE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "../s/cmdoptions.l"
return tok::HENCRYPT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "../s/cmdoptions.l"
return tok::HGENKEYS;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "../s/cmdoptions.l"
return tok::HDQSPI;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "../s/cmdoptions.l"
return tok::HLOG;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "../s/cmdoptions.l"
return tok::HZYNQMPES1;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "../s/cmdoptions.l"
return tok::HPROCESSBIT;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "../s/cmdoptions.l"
return tok::HNONBOOTING;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "../s/cmdoptions.l"
return tok::HENCRDUMP;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "../s/cmdoptions.l"
return tok::HVERIFY;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "../s/cmdoptions.l"
return tok::HVERIFYKDF;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "../s/cmdoptions.l"
return tok::HSECUREDEBUG;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "../s/cmdoptions.l"
return tok::HREAD;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "../s/cmdoptions.l"
return tok::HDUMP;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "../s/cmdoptions.l"
return tok::HDUMPDIR;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "../s/cmdoptions.l"
return tok::H_BIF_AARCH32;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "../s/cmdoptions.l"
return tok::H_BIF_BIGENDIAN;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "../s/cmdoptions.l"
return tok::H_BIF_BOOTCONFIG;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "../s/cmdoptions.l"
return tok::H_BIF_COPY;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "../s/cmdoptions.l"
return tok::H_BIF_CORE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "../s/cmdoptions.l"
return tok::H_BIF_DELAY_HANDOFF;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "../s/cmdoptions.l"
return tok::H_BIF_DELAY_LOAD;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "../s/cmdoptions.l"
return tok::H_BIF_FILE;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "../s/cmdoptions.l"
return tok::H_BIF_ID;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "../s/cmdoptions.l"
return tok::H_BIF_IMAGE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "../s/cmdoptions.l"
return tok::H_BIF_METAHDR;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "../s/cmdoptions.l"
return tok::H_BIF_NAME;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "../s/cmdoptions.l"
return tok::H_BIF_PARTITION;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "../s/cmdoptions.l"
return tok::H_BIF_PARENTID;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "../s/cmdoptions.l"
return tok::H_BIF_SLR;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "../s/cmdoptions.l"
return tok::H_BIF_TYPE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "../s/cmdoptions.l"
return tok::H_BIF_KEYSRC;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "../s/cmdoptions.l"
return tok::H_BIF_INIT;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "../s/cmdoptions.l"
return tok::H_BIF_UDFBH;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "../s/cmdoptions.l"
return tok::H_BIF_AES;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "../s/cmdoptions.l"
return tok::H_BIF_PPK;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "../s/cmdoptions.l"
return tok::H_BIF_PSK;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "../s/cmdoptions.l"
return tok::H_BIF_SPK;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "../s/cmdoptions.l"
return tok::H_BIF_SSK;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "../s/cmdoptions.l"
return tok::H_BIF_SPKSIGN;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "../s/cmdoptions.l"
return tok::H_BIF_HDRSIGN;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "../s/cmdoptions.l"
return tok::H_BIF_BOOTIMAGE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "../s/cmdoptions.l"
return tok::H_BIF_BL;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "../s/cmdoptions.l"
return tok::H_BIF_ENCR;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "../s/cmdoptions.l"
return tok::H_BIF_PID;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "../s/cmdoptions.l"
return tok::H_BIF_AUTH;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "../s/cmdoptions.l"
return tok::H_BIF_CHKSM;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "../s/cmdoptions.l"
return tok::H_BIF_POWNER;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "../s/cmdoptions.l"
return tok::H_BIF_POWNER;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "../s/cmdoptions.l"
return tok::H_BIF_PRESIGN;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "../s/cmdoptions.l"
return tok::H_BIF_UDF;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "../s/cmdoptions.l"
return tok::H_BIF_XIP;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "../s/cmdoptions.l"
return tok::H_BIF_ALIGN;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "../s/cmdoptions.l"
return tok::H_BIF_OFFSET;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "../s/cmdoptions.l"
return tok::H_BIF_RES;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "../s/cmdoptions.l"
return tok::H_BIF_LOAD;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "../s/cmdoptions.l"
return tok::H_BIF_STARTUP;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "../s/cmdoptions.l"
return tok::H_BIF_KEYSRCENCR;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "../s/cmdoptions.l"
return tok::H_BIF_FSBLCFG;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "../s/cmdoptions.l"
return tok::H_BIF_BOOTDEV;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "../s/cmdoptions.l"
return tok::H_BIF_DESTCPU;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "../s/cmdoptions.l"
return tok::H_BIF_DESTDEV;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "../s/cmdoptions.l"
return tok::H_BIF_EL;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "../s/cmdoptions.l"
return tok::H_BIF_TZ;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "../s/cmdoptions.l"
return tok::H_BIF_AUTHPARAM;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "../s/cmdoptions.l"
return tok::H_BIF_BHKEY;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "../s/cmdoptions.l"
return tok::H_BIF_PFW;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "../s/cmdoptions.l"
return tok::H_BIF_BLOCKS;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "../s/cmdoptions.l"
return tok::H_BIF_BHIV;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "../s/cmdoptions.l"
return tok::H_BIF_METAL;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 220 "../s/cmdoptions.l"
return tok::H_BIF_ELYHNDOFF;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 221 "../s/cmdoptions.l"
return tok::H_BIF_HIVEC;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 222 "../s/cmdoptions.l"
return tok::H_BIF_BHSIGN;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 223 "../s/cmdoptions.l"
return tok::H_SPLIT;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 224 "../s/cmdoptions.l"
return tok::H_BIF_BOOTVEC;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 225 "../s/cmdoptions.l"
return tok::H_BIF_PUFDATA;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 229 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext);         return tok::HEXSTRING;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 230 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext);  return tok::IDENTIFIER;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 231 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext);    return tok::FILENAME;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 232 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext+1); yylval->cstring[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 235 "../s/cmdoptions.l"
yylloc->step ();
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 236 "../s/cmdoptions.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 237 "../s/cmdoptions.l"
LOG_ERROR("Unknown option on command line: %s\n",yytext);
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 238 "../s/cmdoptions.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2257 "../bisonflex/cmdoptions.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	cmdoptionsfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	cmdoptionsfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cmdoptionsrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cmdoptionsrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 944 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 944 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 943);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cmdoptionsalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cmdoptionsalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cmdoptionsfree((void *) b->yy_ch_buf  );

	cmdoptionsfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cmdoptionsalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cmdoptionsrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) cmdoptionsalloc(new_size  );

		else
			(yy_start_stack) = (int *) cmdoptionsrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cmdoptionsalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cmdoptionsrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cmdoptionsfree (void * ptr )
{
	free( (char *) ptr );	/* see cmdoptionsrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 238 "../s/cmdoptions.l"




void CO::FlexScanner::comment()
{
    char c, c1;
    loop:
        while ((c = yyinput()) != '*' && c != 0) 
        {
            // putchar(c);
        }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

